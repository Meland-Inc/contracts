/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import { UnsignedTransaction } from "ethers/utils/transaction";
import { TypedEventDescription, TypedFunctionDescription } from ".";

interface UUPSUpgradeableInterface extends Interface {
  functions: {
    upgradeTo: TypedFunctionDescription<{
      encode([newImplementation]: [string]): string;
    }>;

    upgradeToAndCall: TypedFunctionDescription<{
      encode([newImplementation, data]: [string, Arrayish]): string;
    }>;
  };

  events: {
    AdminChanged: TypedEventDescription<{
      encodeTopics([previousAdmin, newAdmin]: [null, null]): string[];
    }>;

    BeaconUpgraded: TypedEventDescription<{
      encodeTopics([beacon]: [string | null]): string[];
    }>;

    Upgraded: TypedEventDescription<{
      encodeTopics([implementation]: [string | null]): string[];
    }>;
  };
}

export class UUPSUpgradeable extends Contract {
  connect(signerOrProvider: Signer | Provider | string): UUPSUpgradeable;
  attach(addressOrName: string): UUPSUpgradeable;
  deployed(): Promise<UUPSUpgradeable>;

  on(event: EventFilter | string, listener: Listener): UUPSUpgradeable;
  once(event: EventFilter | string, listener: Listener): UUPSUpgradeable;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): UUPSUpgradeable;
  removeAllListeners(eventName: EventFilter | string): UUPSUpgradeable;
  removeListener(eventName: any, listener: Listener): UUPSUpgradeable;

  interface: UUPSUpgradeableInterface;

  functions: {
    /**
     * Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.
     */
    upgradeTo(
      newImplementation: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    /**
     * Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.
     */
    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    /**
     * Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.
     */
    upgradeToAndCall(
      newImplementation: string,
      data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    /**
     * Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.
     */
    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;
  };

  /**
   * Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.
   */
  upgradeTo(
    newImplementation: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  /**
   * Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.
   */
  "upgradeTo(address)"(
    newImplementation: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  /**
   * Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.
   */
  upgradeToAndCall(
    newImplementation: string,
    data: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  /**
   * Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.
   */
  "upgradeToAndCall(address,bytes)"(
    newImplementation: string,
    data: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  filters: {
    AdminChanged(previousAdmin: null, newAdmin: null): EventFilter;

    BeaconUpgraded(beacon: string | null): EventFilter;

    Upgraded(implementation: string | null): EventFilter;
  };

  estimate: {
    /**
     * Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.
     */
    upgradeTo(
      newImplementation: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.
     */
    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.
     */
    upgradeToAndCall(
      newImplementation: string,
      data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.
     */
    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;
  };
}
