{
  "manifestVersion": "3.2",
  "proxies": [
    {
      "address": "0x30BcB5D3c0B2aE31fD7457DC4B36c85b520ce673",
      "txHash": "0xc706af7edc07d3865e1bfa186648eae29e2520ee1992e7062a843d18e7856d40",
      "kind": "uups"
    },
    {
      "address": "0x9AB9024cf157d4c08ee288F6cDf8431344A46Ca5",
      "txHash": "0x7659ba176769d6081b93fca06d4224bfc8864e4e85dd6dca952aa4d437b8b5d5",
      "kind": "uups"
    },
    {
      "address": "0xcec52A0fF6869Ba04705DDE9CC77f8E415272950",
      "txHash": "0x4b8ac200a6f9b71232dd050fb426ce15a6e8660c364b0bef02724e9033666cc0",
      "kind": "uups"
    },
    {
      "address": "0x0a1f209C359fb6191e012E4c3165f6c70DEA231f",
      "txHash": "0x84158ee044c0ecef8bbac6ba4eb9840805432a82c8da684b735ae1d4446ffca1",
      "kind": "uups"
    },
    {
      "address": "0xa489E7E1b4ffA0C34395F587A5Ed961BA32361b1",
      "txHash": "0xbbdc121d5569355a4c3a199905295b0cd238931d23617fd4604fdf4a81ba10bd",
      "kind": "uups"
    },
    {
      "address": "0x3f56B2EaC8ba9174f7b042342953f0Fb485448C3",
      "txHash": "0x7b1552df5cba462104f210c0a990b651479da282428e045b198f8f7ec64ee041",
      "kind": "uups"
    },
    {
      "address": "0xD2F29487C5c5176c7818690Ced262BA2dd48A9ce",
      "txHash": "0x3cae2984183bf90bb67a670ea384914f60f22b9df443f3901fed4cdf046380bc",
      "kind": "uups"
    },
    {
      "address": "0x4094116c1b2912Fcb38Dd40891Bb5d759AC82cc4",
      "txHash": "0x4078c6cf05d175258fcb3a630ed3fb36be3580b5bc9d4b60096e21d914e0a0d4",
      "kind": "uups"
    },
    {
      "address": "0xAC4FBBE0D874E44AbbF978E65C65F92471193893",
      "txHash": "0xa5b58830fb7838a8fd94e64bbe2b35c9f29c34779d7648643306db59532be3f7",
      "kind": "uups"
    },
    {
      "address": "0x52d2185D64E24b3c820e799041e3e347b5e09c20",
      "txHash": "0xbcacbdca0a7ca6941932c47dbcaa7028d2b4658edd66f7c7f0ec50cceb0bf868",
      "kind": "uups"
    },
    {
      "address": "0x54E2D21Aac76Be86Fb89bA4bbc8D3AB1F9AB15E2",
      "txHash": "0x25f516d72bb6642af58fc72531343e8e54ae8f904a308fbe88ee088ca9e3b439",
      "kind": "uups"
    },
    {
      "address": "0x1989c124ff9636909175c61Cb59ADa1BeebEacA6",
      "txHash": "0xeb9b232544d5651efb215592740b9784792af26b96cd2223dc9bbdd6c96daddb",
      "kind": "uups"
    },
    {
      "address": "0x6981AbA56bd63957fEB48d50e5E904746A58b8c0",
      "txHash": "0x38f517e055ef72d7bb8bdcde4df16f536c4941418638b0c03f556e2ad4209d04",
      "kind": "uups"
    },
    {
      "address": "0x05D7A89D0780F66166C81683C556F000129527ac",
      "txHash": "0xe2798b31829de78a90addf511536f378fc0daf81e09c42ce2a9518e607ba1a0f",
      "kind": "uups"
    },
    {
      "address": "0x31A4aE41C42Ca0959C3B7FE6a77908f5aBBc3Bd2",
      "txHash": "0x45bc7b659df08120ed18cbaa7f401e39e920afd4f506c4ae11d9f33d04e5a50a",
      "kind": "uups"
    },
    {
      "address": "0x7809E4877d9370BBB5BBA1Cfd8e3dB522BaaCb5d",
      "txHash": "0x9e1302d250f86c24aa997e03507575f7b71b74370fc6a19b469d81178408c854",
      "kind": "uups"
    },
    {
      "address": "0xd1cc979f62d6b5e8C1Dd6E47ca87cF967Dc3Eb73",
      "txHash": "0xfe90de956cf512c6abad99c67a5ca8bef09609828570c6ba25749329bcd22cb3",
      "kind": "uups"
    },
    {
      "address": "0xC643935681e2B3f1B8d911B6D5fe549C98B6458C",
      "txHash": "0x806368b0d50c808c4c3a640c793202d4850defbfcdb3a70e3b35fcd8ef241623",
      "kind": "uups"
    },
    {
      "address": "0xa6b10860CE8a5B877e2f02b6099A1084e95B8B56",
      "txHash": "0xf82a47198c6bb839fc7711428f16381cc281e8186994e321d6c247951d3e7392",
      "kind": "uups"
    },
    {
      "address": "0xc38A9DFD1D99969E2f546E3FaA01918A131E435a",
      "txHash": "0x14b35420b466d679309d40e87975be2d6b687705577d39505cf66c7f189057a4",
      "kind": "uups"
    },
    {
      "address": "0xD473D32EC8c69fE07DBe154c000f578711CD5d96",
      "txHash": "0x25ecd3330e5d837e0e05a43a516cb714c6259d62f8314e31d2e053dc484f1210",
      "kind": "uups"
    },
    {
      "address": "0x5d21B61C7FEa384189B098633b75152C0dC8D9b8",
      "txHash": "0xa53be245f3e989d1be01bce8c1e193a5494758abf0281c039abd58082fc6a88d",
      "kind": "uups"
    }
  ],
  "impls": {
    "426ba9e299fdeb043f5bf239f74138aa92c10d6be6c9ed9e2f969884f1a9ce46": {
      "address": "0x438D91ed4e611041d7abdD768a2e24Ed543191FD",
      "txHash": "0xd09dff6ffb96f421022ca68ffa1f58c7918de5749d67f3ea309676e0004a3f91",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ERC20BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "MELD",
            "label": "BP",
            "type": "t_contract(BPContract)6336",
            "src": "../project:/contracts/MELD.sol:21"
          },
          {
            "contract": "MELD",
            "label": "bpEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MELD.sol:22"
          },
          {
            "contract": "MELD",
            "label": "BPDisabledForever",
            "type": "t_bool",
            "src": "../project:/contracts/MELD.sol:23"
          },
          {
            "contract": "MELD",
            "label": "upgradeDelay",
            "type": "t_uint256",
            "src": "../project:/contracts/MELD.sol:25"
          },
          {
            "contract": "MELD",
            "label": "prepareUpgradeImpl",
            "type": "t_struct(PrepareUpgradeImpl)6606_storage",
            "src": "../project:/contracts/MELD.sol:27"
          }
        ],
        "types": {
          "t_contract(BPContract)6336": {
            "label": "contract BPContract"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(PrepareUpgradeImpl)6606_storage": {
            "label": "struct MELD.PrepareUpgradeImpl",
            "members": [
              {
                "label": "newImplementation",
                "type": "t_address"
              },
              {
                "label": "createdAt",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          }
        }
      }
    },
    "c0d960c51563357e241d34304440e751ec5d34e9b3af192103e0fb100f6db365": {
      "address": "0x0dB4352aC3c9a4C5607ca1A0500c1a3068Ec96e9",
      "txHash": "0x149b8fb8e036fa76748e1d8c58fc533c38e766d5aeedc3fe384d71bfeb4b59bc",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "foundationWallet",
            "type": "t_address",
            "src": "../project:/contracts/NFTStoreStorage.sol:9"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "officialWallet",
            "type": "t_address",
            "src": "../project:/contracts/NFTStoreStorage.sol:12"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "bidbackWallet",
            "type": "t_address",
            "src": "../project:/contracts/NFTStoreStorage.sol:17"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "ownerCutPerMillion",
            "type": "t_uint256",
            "src": "../project:/contracts/NFTStoreStorage.sol:19"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "itemUploadedMap",
            "type": "t_mapping(t_contract(IMelandStoreItems)6567,t_bool)",
            "src": "../project:/contracts/NFTStoreStorage.sol:21"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "itemSymbolSales",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/NFTStoreStorage.sol:23"
          },
          {
            "contract": "NFTStore",
            "label": "itemIdCounters",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/NFTStore.sol:23"
          }
        ],
        "types": {
          "t_struct(Counter)3951_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_contract(IMelandStoreItems)6567,t_bool)": {
            "label": "mapping(contract IMelandStoreItems => bool)"
          },
          "t_contract(IMelandStoreItems)6567": {
            "label": "contract IMelandStoreItems"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "e932be6b5dd463cf89c1053ab2cb5ec67b5f55610e3ee850f51b0a8d9db023a1": {
      "address": "0x914CF97623BbAD55b6DcdA0f5fc9953236125077",
      "txHash": "0xcae205884b4848cfd5ca62d2e72dc88c95dd2131215cd6f8dee308b5e60285fb",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "MarketplaceStorage",
            "label": "acceptedToken",
            "type": "t_contract(IERC20MELD)6495",
            "src": "../project:/contracts/MarketplaceStorage.sol:10"
          },
          {
            "contract": "MarketplaceStorage",
            "label": "foundationWallet",
            "type": "t_address",
            "src": "../project:/contracts/MarketplaceStorage.sol:13"
          },
          {
            "contract": "MarketplaceStorage",
            "label": "officialWallet",
            "type": "t_address",
            "src": "../project:/contracts/MarketplaceStorage.sol:16"
          },
          {
            "contract": "MarketplaceStorage",
            "label": "orderByAssetId",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Order)7838_storage))",
            "src": "../project:/contracts/MarketplaceStorage.sol:44"
          },
          {
            "contract": "MarketplaceStorage",
            "label": "ownerCutPerMillion",
            "type": "t_uint256",
            "src": "../project:/contracts/MarketplaceStorage.sol:47"
          },
          {
            "contract": "MarketplaceStorage",
            "label": "publicationFeeInWei",
            "type": "t_uint256",
            "src": "../project:/contracts/MarketplaceStorage.sol:50"
          }
        ],
        "types": {
          "t_contract(IERC20MELD)6495": {
            "label": "contract IERC20MELD"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Order)7838_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MarketplaceStorage.Order))"
          },
          "t_mapping(t_uint256,t_struct(Order)7838_storage)": {
            "label": "mapping(uint256 => struct MarketplaceStorage.Order)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Order)7838_storage": {
            "label": "struct MarketplaceStorage.Order",
            "members": [
              {
                "label": "id",
                "type": "t_bytes32"
              },
              {
                "label": "seller",
                "type": "t_address"
              },
              {
                "label": "assetId",
                "type": "t_uint256"
              },
              {
                "label": "nft",
                "type": "t_struct(ERC721Or1155)7824_storage"
              },
              {
                "label": "price",
                "type": "t_uint256"
              },
              {
                "label": "expiresAt",
                "type": "t_uint256"
              }
            ]
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(ERC721Or1155)7824_storage": {
            "label": "struct MarketplaceStorage.ERC721Or1155",
            "members": [
              {
                "label": "erc1155",
                "type": "t_contract(IERC1155)4774"
              },
              {
                "label": "erc721",
                "type": "t_contract(IERC721)5721"
              }
            ]
          },
          "t_contract(IERC1155)4774": {
            "label": "contract IERC1155"
          },
          "t_contract(IERC721)5721": {
            "label": "contract IERC721"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "5221f8747fb3c7c1d6aefed9987f18100fc3b5b60cfd3160f52d741311b54ab7": {
      "address": "0xA7033D45D4E1A6035EFAAD8bb8Ef58e1338F91a9",
      "txHash": "0x1b918e5959059a9f5a5bb64ad26ad210c6bc634beb38963d3cf8a9ebdc84e3bd",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)14663",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)16305",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3428",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_string_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155Land",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155Land.sol:26"
          },
          {
            "contract": "Meland1155Land",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155Land.sol:27"
          },
          {
            "contract": "Meland1155Land",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Land.sol:28"
          },
          {
            "contract": "Meland1155Land",
            "label": "ticketlandIds",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155Land.sol:30"
          }
        ],
        "types": {
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)16305": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3428": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)14663": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "885e803c0f1386bce393ed8adfefbdd183c01933138b62ba8f2e41aada3aea45": {
      "address": "0x66E24790E9dbf08c8D654666Ac85276A76BB6670",
      "txHash": "0xb44fcee54138682f1b6e7f760773237c7208e7c34db5fd2b73bb3a77d58034c5",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)15146",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)16788",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3428",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_string_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155LandFuture",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/Meland1155LandFuture.sol:27"
          },
          {
            "contract": "Meland1155LandFuture",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155LandFuture.sol:32"
          },
          {
            "contract": "Meland1155LandFuture",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155LandFuture.sol:33"
          },
          {
            "contract": "Meland1155LandFuture",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155LandFuture.sol:34"
          },
          {
            "contract": "Meland1155LandFuture",
            "label": "canBuyListByAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/Meland1155LandFuture.sol:35"
          }
        ],
        "types": {
          "t_struct(Counter)3951_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)16788": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3428": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)15146": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "2d3b82802a314dca81c51c3a3aca89acc05344681041141010322d62c9c76704": {
      "address": "0xB722a0D6f693910F7257D35df4d6c970C1e5881b",
      "txHash": "0x77090d9e7c1876bcacca51cecb076aa9621d5d6dc8ef177fe00b71baa65e4306",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)15146",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)16788",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3428",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_string_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)16788": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3428": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_contract(MelandTier)15146": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3951_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "e1723236c91457599f8bdbbbcd86e3fbed8da7eceed8ace2951719e6376c1dca": {
      "address": "0x9F47103E382352e65b50d965d687Fe546b7bc11d",
      "txHash": "0x8d8dedaf2c28fc7df6b6e473afb7f04362da53adbdf8eb04f70d4a2c46b25003",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_rewardIdCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:14"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc1155RewardIdCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:15"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc721RewardIdCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:16"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc20RewardIdCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:17"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc721RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC721Reward)15267_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:41"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc20RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Reward)15273_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:42"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc1155RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC1155Reward)15261_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:43"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardById",
            "type": "t_mapping(t_uint256,t_struct(Reward)15251_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:44"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:48"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:52"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:56"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:60"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardTransferedByRewardId",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../project:/contracts/MelandTierStorage.sol:63"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:40"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)3951_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_uint256,t_struct(ERC721Reward)15267_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC721Reward)"
          },
          "t_struct(ERC721Reward)15267_storage": {
            "label": "struct MelandTierStorage.ERC721Reward",
            "members": [
              {
                "label": "erc721",
                "type": "t_contract(IERC721Upgradeable)3656"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC721Upgradeable)3656": {
            "label": "contract IERC721Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Reward)15273_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC20Reward)"
          },
          "t_struct(ERC20Reward)15273_storage": {
            "label": "struct MelandTierStorage.ERC20Reward",
            "members": [
              {
                "label": "erc20",
                "type": "t_contract(IERC20Upgradeable)3428"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3428": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC1155Reward)15261_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC1155Reward)"
          },
          "t_struct(ERC1155Reward)15261_storage": {
            "label": "struct MelandTierStorage.ERC1155Reward",
            "members": [
              {
                "label": "erc1155",
                "type": "t_contract(IERC1155Upgradeable)2527"
              },
              {
                "label": "tokenIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "amounts",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_contract(IERC1155Upgradeable)2527": {
            "label": "contract IERC1155Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(Reward)15251_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.Reward)"
          },
          "t_struct(Reward)15251_storage": {
            "label": "struct MelandTierStorage.Reward",
            "members": [
              {
                "label": "erc1155RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc721RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc20RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "c944e6f1c5888edc6f881ed8e0326f24e128731c98a07d71e0ed8ae07acbc0fd": {
      "address": "0x54Af7C481C219ce60a13a98862464A6CcE4dc2B2",
      "txHash": "0x0cdd92bf90c5ec247290666298ba6eb642e2526f8cb7b68f57b6b6a5fe3f9444",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "NFTFactory",
            "label": "supportNFTs",
            "type": "t_mapping(t_address,t_struct(SupportNFT)15511_storage)",
            "src": "../project:/contracts/NFTFactory.sol:26"
          },
          {
            "contract": "NFTFactory",
            "label": "supportRFCs",
            "type": "t_mapping(t_address,t_struct(RFC)15560_storage)",
            "src": "../project:/contracts/NFTFactory.sol:28"
          }
        ],
        "types": {
          "t_mapping(t_address,t_struct(SupportNFT)15511_storage)": {
            "label": "mapping(address => struct NFTFactory.SupportNFT)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(SupportNFT)15511_storage": {
            "label": "struct NFTFactory.SupportNFT",
            "members": [
              {
                "label": "erc721or1155",
                "type": "t_struct(ERC721Or1155)15505_storage"
              },
              {
                "label": "support",
                "type": "t_bool"
              }
            ]
          },
          "t_struct(ERC721Or1155)15505_storage": {
            "label": "struct NFTFactory.ERC721Or1155",
            "members": [
              {
                "label": "erc1155",
                "type": "t_contract(IERC1155)4774"
              },
              {
                "label": "erc721",
                "type": "t_contract(IERC721)5721"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IERC1155)4774": {
            "label": "contract IERC1155"
          },
          "t_contract(IERC721)5721": {
            "label": "contract IERC721"
          },
          "t_mapping(t_address,t_struct(RFC)15560_storage)": {
            "label": "mapping(address => struct NFTFactory.RFC)"
          },
          "t_struct(RFC)15560_storage": {
            "label": "struct NFTFactory.RFC",
            "members": [
              {
                "label": "proposer",
                "type": "t_address"
              },
              {
                "label": "proposalTime",
                "type": "t_uint256"
              },
              {
                "label": "approved",
                "type": "t_bool"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "d6765ca86d3a0ede3d1212ca31f2b8b98acf2352849065a2bceea9e1f584866a": {
      "address": "0x0E97487B3A9b78E60dF35AfB791FD385F38B0DAB",
      "txHash": "0xddf79da622fd7827920cca0d65689667e9d8377052e94f7b032e58e204bbb55f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)15125",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155MELDFuture",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/Meland1155MELDFuture.sol:30"
          },
          {
            "contract": "Meland1155MELDFuture",
            "label": "totalSupplyByERC20",
            "type": "t_mapping(t_contract(IERC20Upgradeable)3428,t_uint256)",
            "src": "../project:/contracts/Meland1155MELDFuture.sol:41"
          },
          {
            "contract": "Meland1155MELDFuture",
            "label": "futureById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Future)9893_storage)",
            "src": "../project:/contracts/Meland1155MELDFuture.sol:42"
          }
        ],
        "types": {
          "t_struct(Counter)3951_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_contract(IERC20Upgradeable)3428,t_uint256)": {
            "label": "mapping(contract IERC20Upgradeable => uint256)"
          },
          "t_contract(IERC20Upgradeable)3428": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Future)9893_storage)": {
            "label": "mapping(uint256 => struct Meland1155MELDFuture.ERC20Future)"
          },
          "t_struct(ERC20Future)9893_storage": {
            "label": "struct Meland1155MELDFuture.ERC20Future",
            "members": [
              {
                "label": "token",
                "type": "t_contract(IERC20Upgradeable)3428"
              },
              {
                "label": "unlockAt",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(MelandTier)15125": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "f4950fa59dbbd27997b7d0080cd4c1d70f08b8decfde9c70712b85c2a6b9ac99": {
      "address": "0xCbcF9B191C46FE95A4e4A9e2B2088c7c6A758dD6",
      "txHash": "0xc3c8330c8a698b667c502d74f58314e03bf60337c2dc3329f550be1b1cafbd07",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "MelandExchange",
            "label": "foundationWallet",
            "type": "t_address",
            "src": "../project:/contracts/MelandExchange.sol:26"
          },
          {
            "contract": "MelandExchange",
            "label": "officialWallet",
            "type": "t_address",
            "src": "../project:/contracts/MelandExchange.sol:29"
          },
          {
            "contract": "MelandExchange",
            "label": "bidbackWallet",
            "type": "t_address",
            "src": "../project:/contracts/MelandExchange.sol:34"
          },
          {
            "contract": "MelandExchange",
            "label": "ownerCutPerMillion",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandExchange.sol:36"
          },
          {
            "contract": "MelandExchange",
            "label": "limitEveryDayMELD",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandExchange.sol:40"
          },
          {
            "contract": "MelandExchange",
            "label": "_exchangeMELDCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/MelandExchange.sol:42"
          },
          {
            "contract": "MelandExchange",
            "label": "_depositDitaminCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/MelandExchange.sol:43"
          },
          {
            "contract": "MelandExchange",
            "label": "acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3428",
            "src": "../project:/contracts/MelandExchange.sol:45"
          },
          {
            "contract": "MelandExchange",
            "label": "melandMELDFuture",
            "type": "t_contract(Meland1155MELDFuture)10501",
            "src": "../project:/contracts/MelandExchange.sol:47"
          },
          {
            "contract": "MelandExchange",
            "label": "getExchangeMELDIdsByUserAndDay",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))",
            "src": "../project:/contracts/MelandExchange.sol:60"
          },
          {
            "contract": "MelandExchange",
            "label": "getExchangeMELDById",
            "type": "t_mapping(t_uint256,t_struct(ExchangeMELD)12305_storage)",
            "src": "../project:/contracts/MelandExchange.sol:62"
          },
          {
            "contract": "MelandExchange",
            "label": "getDepositDitaminById",
            "type": "t_mapping(t_uint256,t_struct(DepositDitamin)12316_storage)",
            "src": "../project:/contracts/MelandExchange.sol:63"
          },
          {
            "contract": "MelandExchange",
            "label": "lockedByUser",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandExchange.sol:66"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)3951_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3428": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(Meland1155MELDFuture)10501": {
            "label": "contract Meland1155MELDFuture"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))": {
            "label": "mapping(address => mapping(uint256 => uint256[]))"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(ExchangeMELD)12305_storage)": {
            "label": "mapping(uint256 => struct MelandExchange.ExchangeMELD)"
          },
          "t_struct(ExchangeMELD)12305_storage": {
            "label": "struct MelandExchange.ExchangeMELD",
            "members": [
              {
                "label": "exchangedAt",
                "type": "t_uint256"
              },
              {
                "label": "amountOfMELD",
                "type": "t_uint256"
              },
              {
                "label": "beneficiary",
                "type": "t_address"
              },
              {
                "label": "paymentDitamin",
                "type": "t_uint256"
              },
              {
                "label": "paymentAt",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(DepositDitamin)12316_storage)": {
            "label": "mapping(uint256 => struct MelandExchange.DepositDitamin)"
          },
          "t_struct(DepositDitamin)12316_storage": {
            "label": "struct MelandExchange.DepositDitamin",
            "members": [
              {
                "label": "depositedAt",
                "type": "t_uint256"
              },
              {
                "label": "amountOfMELD",
                "type": "t_uint256"
              },
              {
                "label": "beneficiary",
                "type": "t_address"
              },
              {
                "label": "paymentDitamin",
                "type": "t_uint256"
              },
              {
                "label": "paymentAt",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "9b0e2fd9b25954a57234d3fa7bfe6a7b1a3cf750f04db21ba0fa1dbd1ace2856": {
      "address": "0x754423826521cA092c930DAa7CDfE8138BF192d9",
      "txHash": "0x98332df31b3566e1c68dd13593898e6813dc33d8619b8391da25b16372f052ea",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "MelandExchange",
            "label": "foundationWallet",
            "type": "t_address",
            "src": "../project:/contracts/MelandExchange.sol:26"
          },
          {
            "contract": "MelandExchange",
            "label": "officialWallet",
            "type": "t_address",
            "src": "../project:/contracts/MelandExchange.sol:29"
          },
          {
            "contract": "MelandExchange",
            "label": "bidbackWallet",
            "type": "t_address",
            "src": "../project:/contracts/MelandExchange.sol:34"
          },
          {
            "contract": "MelandExchange",
            "label": "ownerCutPerMillion",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandExchange.sol:36"
          },
          {
            "contract": "MelandExchange",
            "label": "limitEveryDayMELD",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandExchange.sol:40"
          },
          {
            "contract": "MelandExchange",
            "label": "_exchangeMELDCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/MelandExchange.sol:42"
          },
          {
            "contract": "MelandExchange",
            "label": "_depositDitaminCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/MelandExchange.sol:43"
          },
          {
            "contract": "MelandExchange",
            "label": "acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3428",
            "src": "../project:/contracts/MelandExchange.sol:45"
          },
          {
            "contract": "MelandExchange",
            "label": "melandMELDFuture",
            "type": "t_contract(Meland1155MELDFuture)10501",
            "src": "../project:/contracts/MelandExchange.sol:47"
          },
          {
            "contract": "MelandExchange",
            "label": "getExchangeMELDIdsByUserAndDay",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))",
            "src": "../project:/contracts/MelandExchange.sol:60"
          },
          {
            "contract": "MelandExchange",
            "label": "getExchangeMELDById",
            "type": "t_mapping(t_uint256,t_struct(ExchangeMELD)12305_storage)",
            "src": "../project:/contracts/MelandExchange.sol:62"
          },
          {
            "contract": "MelandExchange",
            "label": "getDepositDitaminById",
            "type": "t_mapping(t_uint256,t_struct(DepositDitamin)12316_storage)",
            "src": "../project:/contracts/MelandExchange.sol:63"
          },
          {
            "contract": "MelandExchange",
            "label": "lockedByUser",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandExchange.sol:66"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)3951_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3428": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(Meland1155MELDFuture)10501": {
            "label": "contract Meland1155MELDFuture"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))": {
            "label": "mapping(address => mapping(uint256 => uint256[]))"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(ExchangeMELD)12305_storage)": {
            "label": "mapping(uint256 => struct MelandExchange.ExchangeMELD)"
          },
          "t_struct(ExchangeMELD)12305_storage": {
            "label": "struct MelandExchange.ExchangeMELD",
            "members": [
              {
                "label": "exchangedAt",
                "type": "t_uint256"
              },
              {
                "label": "amountOfMELD",
                "type": "t_uint256"
              },
              {
                "label": "beneficiary",
                "type": "t_address"
              },
              {
                "label": "paymentDitamin",
                "type": "t_uint256"
              },
              {
                "label": "paymentAt",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(DepositDitamin)12316_storage)": {
            "label": "mapping(uint256 => struct MelandExchange.DepositDitamin)"
          },
          "t_struct(DepositDitamin)12316_storage": {
            "label": "struct MelandExchange.DepositDitamin",
            "members": [
              {
                "label": "depositedAt",
                "type": "t_uint256"
              },
              {
                "label": "amountOfMELD",
                "type": "t_uint256"
              },
              {
                "label": "beneficiary",
                "type": "t_address"
              },
              {
                "label": "paymentDitamin",
                "type": "t_uint256"
              },
              {
                "label": "paymentAt",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "4de9caf631c1b89f473ebf71709357a77ef6d1ed25a3652c452a8ae4aef15067": {
      "address": "0x101523d3122171799Fd287c38BC233979Ba8B2b2",
      "txHash": "0xb956f1f2ca36b66951c5b329582a36c0733c6aa1b7a354dbcfbcc2d0c0473fc3",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "MelandExchange",
            "label": "foundationWallet",
            "type": "t_address",
            "src": "../project:/contracts/MelandExchange.sol:26"
          },
          {
            "contract": "MelandExchange",
            "label": "officialWallet",
            "type": "t_address",
            "src": "../project:/contracts/MelandExchange.sol:29"
          },
          {
            "contract": "MelandExchange",
            "label": "bidbackWallet",
            "type": "t_address",
            "src": "../project:/contracts/MelandExchange.sol:34"
          },
          {
            "contract": "MelandExchange",
            "label": "ownerCutPerMillion",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandExchange.sol:36"
          },
          {
            "contract": "MelandExchange",
            "label": "limitEveryDayMELD",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandExchange.sol:40"
          },
          {
            "contract": "MelandExchange",
            "label": "_exchangeMELDCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/MelandExchange.sol:42"
          },
          {
            "contract": "MelandExchange",
            "label": "_depositDitaminCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/MelandExchange.sol:43"
          },
          {
            "contract": "MelandExchange",
            "label": "acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3428",
            "src": "../project:/contracts/MelandExchange.sol:45"
          },
          {
            "contract": "MelandExchange",
            "label": "melandMELDFuture",
            "type": "t_contract(Meland1155MELDFuture)10501",
            "src": "../project:/contracts/MelandExchange.sol:47"
          },
          {
            "contract": "MelandExchange",
            "label": "getExchangeMELDIdsByUserAndDay",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))",
            "src": "../project:/contracts/MelandExchange.sol:60"
          },
          {
            "contract": "MelandExchange",
            "label": "getExchangeMELDById",
            "type": "t_mapping(t_uint256,t_struct(ExchangeMELD)12311_storage)",
            "src": "../project:/contracts/MelandExchange.sol:63"
          },
          {
            "contract": "MelandExchange",
            "label": "getDepositDitaminById",
            "type": "t_mapping(t_uint256,t_struct(DepositDitamin)12322_storage)",
            "src": "../project:/contracts/MelandExchange.sol:64"
          },
          {
            "contract": "MelandExchange",
            "label": "lockedByUser",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandExchange.sol:67"
          },
          {
            "contract": "MelandExchange",
            "label": "pendingExchangeIds",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/MelandExchange.sol:70"
          },
          {
            "contract": "MelandExchange",
            "label": "pendingDepositIds",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/MelandExchange.sol:73"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)3951_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3428": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(Meland1155MELDFuture)10501": {
            "label": "contract Meland1155MELDFuture"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))": {
            "label": "mapping(address => mapping(uint256 => uint256[]))"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(ExchangeMELD)12311_storage)": {
            "label": "mapping(uint256 => struct MelandExchange.ExchangeMELD)"
          },
          "t_struct(ExchangeMELD)12311_storage": {
            "label": "struct MelandExchange.ExchangeMELD",
            "members": [
              {
                "label": "exchangedAt",
                "type": "t_uint256"
              },
              {
                "label": "amountOfMELD",
                "type": "t_uint256"
              },
              {
                "label": "beneficiary",
                "type": "t_address"
              },
              {
                "label": "paymentDitamin",
                "type": "t_uint256"
              },
              {
                "label": "paymentAt",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(DepositDitamin)12322_storage)": {
            "label": "mapping(uint256 => struct MelandExchange.DepositDitamin)"
          },
          "t_struct(DepositDitamin)12322_storage": {
            "label": "struct MelandExchange.DepositDitamin",
            "members": [
              {
                "label": "depositedAt",
                "type": "t_uint256"
              },
              {
                "label": "amountOfMELD",
                "type": "t_uint256"
              },
              {
                "label": "beneficiary",
                "type": "t_address"
              },
              {
                "label": "paymentDitamin",
                "type": "t_uint256"
              },
              {
                "label": "paymentAt",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "4fdec6bbb47b1f1393a71ec5aa129d13095ef74c1879400a648348209f38b053": {
      "address": "0xB2D3f93ebFE158A2c67986D31073Cd3af8D957B7",
      "txHash": "0x8d80cd5ac22a4ba590c68aed5969bb0e79d57436ada026585ca18c1c457df54d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "MelandExchange",
            "label": "foundationWallet",
            "type": "t_address",
            "src": "../project:/contracts/MelandExchange.sol:26"
          },
          {
            "contract": "MelandExchange",
            "label": "officialWallet",
            "type": "t_address",
            "src": "../project:/contracts/MelandExchange.sol:29"
          },
          {
            "contract": "MelandExchange",
            "label": "bidbackWallet",
            "type": "t_address",
            "src": "../project:/contracts/MelandExchange.sol:34"
          },
          {
            "contract": "MelandExchange",
            "label": "ownerCutPerMillion",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandExchange.sol:36"
          },
          {
            "contract": "MelandExchange",
            "label": "limitEveryDayMELD",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandExchange.sol:40"
          },
          {
            "contract": "MelandExchange",
            "label": "_exchangeMELDCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/MelandExchange.sol:42"
          },
          {
            "contract": "MelandExchange",
            "label": "_depositDitaminCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/MelandExchange.sol:43"
          },
          {
            "contract": "MelandExchange",
            "label": "acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3428",
            "src": "../project:/contracts/MelandExchange.sol:45"
          },
          {
            "contract": "MelandExchange",
            "label": "melandMELDFuture",
            "type": "t_contract(Meland1155MELDFuture)10501",
            "src": "../project:/contracts/MelandExchange.sol:47"
          },
          {
            "contract": "MelandExchange",
            "label": "getExchangeMELDIdsByUserAndDay",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))",
            "src": "../project:/contracts/MelandExchange.sol:64"
          },
          {
            "contract": "MelandExchange",
            "label": "getExchangeMELDById",
            "type": "t_mapping(t_uint256,t_struct(ExchangeMELD)12327_storage)",
            "src": "../project:/contracts/MelandExchange.sol:67"
          },
          {
            "contract": "MelandExchange",
            "label": "getDepositDitaminById",
            "type": "t_mapping(t_uint256,t_struct(DepositDitamin)12342_storage)",
            "src": "../project:/contracts/MelandExchange.sol:68"
          },
          {
            "contract": "MelandExchange",
            "label": "lockedByUser",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandExchange.sol:71"
          },
          {
            "contract": "MelandExchange",
            "label": "pendingExchangeIds",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/MelandExchange.sol:74"
          },
          {
            "contract": "MelandExchange",
            "label": "pendingDepositIds",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/MelandExchange.sol:77"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)3951_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3428": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(Meland1155MELDFuture)10501": {
            "label": "contract Meland1155MELDFuture"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))": {
            "label": "mapping(address => mapping(uint256 => uint256[]))"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(ExchangeMELD)12327_storage)": {
            "label": "mapping(uint256 => struct MelandExchange.ExchangeMELD)"
          },
          "t_struct(ExchangeMELD)12327_storage": {
            "label": "struct MelandExchange.ExchangeMELD",
            "members": [
              {
                "label": "exchangedAt",
                "type": "t_uint256"
              },
              {
                "label": "amountOfMELD",
                "type": "t_uint256"
              },
              {
                "label": "beneficiary",
                "type": "t_address"
              },
              {
                "label": "paymentDitamin",
                "type": "t_uint256"
              },
              {
                "label": "paymentAt",
                "type": "t_uint256"
              },
              {
                "label": "failedAt",
                "type": "t_uint256"
              },
              {
                "label": "failedMessage",
                "type": "t_string_storage"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_struct(DepositDitamin)12342_storage)": {
            "label": "mapping(uint256 => struct MelandExchange.DepositDitamin)"
          },
          "t_struct(DepositDitamin)12342_storage": {
            "label": "struct MelandExchange.DepositDitamin",
            "members": [
              {
                "label": "depositedAt",
                "type": "t_uint256"
              },
              {
                "label": "amountOfMELD",
                "type": "t_uint256"
              },
              {
                "label": "beneficiary",
                "type": "t_address"
              },
              {
                "label": "paymentDitamin",
                "type": "t_uint256"
              },
              {
                "label": "paymentAt",
                "type": "t_uint256"
              },
              {
                "label": "failedAt",
                "type": "t_uint256"
              },
              {
                "label": "failedMessage",
                "type": "t_string_storage"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "b0aa44e7b09aeea2b1f4689099084b623ba65e3a4184a3434424ac55c52204dd": {
      "address": "0x74cD40ade40fdd26D21e40024f24763FCcD25704",
      "txHash": "0x4349d20bdf7fb6c32bf278d9bf01cdadfb590329d300183415e2c9deb9108084",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "MelandExchange",
            "label": "foundationWallet",
            "type": "t_address",
            "src": "../project:/contracts/MelandExchange.sol:26"
          },
          {
            "contract": "MelandExchange",
            "label": "officialWallet",
            "type": "t_address",
            "src": "../project:/contracts/MelandExchange.sol:29"
          },
          {
            "contract": "MelandExchange",
            "label": "bidbackWallet",
            "type": "t_address",
            "src": "../project:/contracts/MelandExchange.sol:34"
          },
          {
            "contract": "MelandExchange",
            "label": "ownerCutPerMillion",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandExchange.sol:36"
          },
          {
            "contract": "MelandExchange",
            "label": "limitEveryDayMELD",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandExchange.sol:40"
          },
          {
            "contract": "MelandExchange",
            "label": "_exchangeMELDCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/MelandExchange.sol:42"
          },
          {
            "contract": "MelandExchange",
            "label": "_depositDitaminCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/MelandExchange.sol:43"
          },
          {
            "contract": "MelandExchange",
            "label": "acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3428",
            "src": "../project:/contracts/MelandExchange.sol:45"
          },
          {
            "contract": "MelandExchange",
            "label": "melandMELDFuture",
            "type": "t_contract(Meland1155MELDFuture)10501",
            "src": "../project:/contracts/MelandExchange.sol:47"
          },
          {
            "contract": "MelandExchange",
            "label": "getExchangeMELDIdsByUserAndDay",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))",
            "src": "../project:/contracts/MelandExchange.sol:64"
          },
          {
            "contract": "MelandExchange",
            "label": "getExchangeMELDById",
            "type": "t_mapping(t_uint256,t_struct(ExchangeMELD)12327_storage)",
            "src": "../project:/contracts/MelandExchange.sol:67"
          },
          {
            "contract": "MelandExchange",
            "label": "getDepositDitaminById",
            "type": "t_mapping(t_uint256,t_struct(DepositDitamin)12342_storage)",
            "src": "../project:/contracts/MelandExchange.sol:68"
          },
          {
            "contract": "MelandExchange",
            "label": "lockedByUser",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandExchange.sol:71"
          },
          {
            "contract": "MelandExchange",
            "label": "pendingExchangeIds",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/MelandExchange.sol:74"
          },
          {
            "contract": "MelandExchange",
            "label": "pendingDepositIds",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/MelandExchange.sol:77"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)3951_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3428": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(Meland1155MELDFuture)10501": {
            "label": "contract Meland1155MELDFuture"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))": {
            "label": "mapping(address => mapping(uint256 => uint256[]))"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(ExchangeMELD)12327_storage)": {
            "label": "mapping(uint256 => struct MelandExchange.ExchangeMELD)"
          },
          "t_struct(ExchangeMELD)12327_storage": {
            "label": "struct MelandExchange.ExchangeMELD",
            "members": [
              {
                "label": "exchangedAt",
                "type": "t_uint256"
              },
              {
                "label": "amountOfMELD",
                "type": "t_uint256"
              },
              {
                "label": "beneficiary",
                "type": "t_address"
              },
              {
                "label": "paymentDitamin",
                "type": "t_uint256"
              },
              {
                "label": "paymentAt",
                "type": "t_uint256"
              },
              {
                "label": "failedAt",
                "type": "t_uint256"
              },
              {
                "label": "failedMessage",
                "type": "t_string_storage"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_struct(DepositDitamin)12342_storage)": {
            "label": "mapping(uint256 => struct MelandExchange.DepositDitamin)"
          },
          "t_struct(DepositDitamin)12342_storage": {
            "label": "struct MelandExchange.DepositDitamin",
            "members": [
              {
                "label": "depositedAt",
                "type": "t_uint256"
              },
              {
                "label": "amountOfMELD",
                "type": "t_uint256"
              },
              {
                "label": "beneficiary",
                "type": "t_address"
              },
              {
                "label": "paymentDitamin",
                "type": "t_uint256"
              },
              {
                "label": "paymentAt",
                "type": "t_uint256"
              },
              {
                "label": "failedAt",
                "type": "t_uint256"
              },
              {
                "label": "failedMessage",
                "type": "t_string_storage"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "76146e167492958365cc1f6758663b8c6a3ff970bbf9cab84ce805ffaacf82ea": {
      "address": "0x6678ddB19f8f9c4789ea7c68CF03A8BE99e91e5f",
      "txHash": "0xdc4296bff96760ce3381962eafea45f2bfc5235c656849450c9237b00bd290ee",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)15125",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155MELDFuture",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/Meland1155MELDFuture.sol:30"
          },
          {
            "contract": "Meland1155MELDFuture",
            "label": "totalSupplyByERC20",
            "type": "t_mapping(t_contract(IERC20Upgradeable)3428,t_uint256)",
            "src": "../project:/contracts/Meland1155MELDFuture.sol:41"
          },
          {
            "contract": "Meland1155MELDFuture",
            "label": "futureById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Future)9893_storage)",
            "src": "../project:/contracts/Meland1155MELDFuture.sol:42"
          }
        ],
        "types": {
          "t_struct(Counter)3951_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_contract(IERC20Upgradeable)3428,t_uint256)": {
            "label": "mapping(contract IERC20Upgradeable => uint256)"
          },
          "t_contract(IERC20Upgradeable)3428": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Future)9893_storage)": {
            "label": "mapping(uint256 => struct Meland1155MELDFuture.ERC20Future)"
          },
          "t_struct(ERC20Future)9893_storage": {
            "label": "struct Meland1155MELDFuture.ERC20Future",
            "members": [
              {
                "label": "token",
                "type": "t_contract(IERC20Upgradeable)3428"
              },
              {
                "label": "unlockAt",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(MelandTier)15125": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "89ae33c6d9e569f04a91d7b502274ac12182ecae8f028dc56cb5d94ca5f0587c": {
      "address": "0x7DC7B66F43B9Eba35A9b15720660a87D536eFe14",
      "txHash": "0x5ae84d9f94c68e4c0438c3b823ed25ef8ec5e13d79809463bef6bb43f02a7eb2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "MelandExchange",
            "label": "foundationWallet",
            "type": "t_address",
            "src": "../project:/contracts/MelandExchange.sol:26"
          },
          {
            "contract": "MelandExchange",
            "label": "officialWallet",
            "type": "t_address",
            "src": "../project:/contracts/MelandExchange.sol:29"
          },
          {
            "contract": "MelandExchange",
            "label": "bidbackWallet",
            "type": "t_address",
            "src": "../project:/contracts/MelandExchange.sol:34"
          },
          {
            "contract": "MelandExchange",
            "label": "ownerCutPerMillion",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandExchange.sol:36"
          },
          {
            "contract": "MelandExchange",
            "label": "limitEveryDayMELD",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandExchange.sol:40"
          },
          {
            "contract": "MelandExchange",
            "label": "_exchangeMELDCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/MelandExchange.sol:42"
          },
          {
            "contract": "MelandExchange",
            "label": "_depositDitaminCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/MelandExchange.sol:43"
          },
          {
            "contract": "MelandExchange",
            "label": "acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3428",
            "src": "../project:/contracts/MelandExchange.sol:45"
          },
          {
            "contract": "MelandExchange",
            "label": "melandMELDFuture",
            "type": "t_contract(Meland1155MELDFuture)10506",
            "src": "../project:/contracts/MelandExchange.sol:47"
          },
          {
            "contract": "MelandExchange",
            "label": "getExchangeMELDIdsByUserAndDay",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))",
            "src": "../project:/contracts/MelandExchange.sol:64"
          },
          {
            "contract": "MelandExchange",
            "label": "getExchangeMELDById",
            "type": "t_mapping(t_uint256,t_struct(ExchangeMELD)12332_storage)",
            "src": "../project:/contracts/MelandExchange.sol:67"
          },
          {
            "contract": "MelandExchange",
            "label": "getDepositDitaminById",
            "type": "t_mapping(t_uint256,t_struct(DepositDitamin)12347_storage)",
            "src": "../project:/contracts/MelandExchange.sol:68"
          },
          {
            "contract": "MelandExchange",
            "label": "lockedByUser",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandExchange.sol:71"
          },
          {
            "contract": "MelandExchange",
            "label": "pendingExchangeIds",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/MelandExchange.sol:74"
          },
          {
            "contract": "MelandExchange",
            "label": "pendingDepositIds",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/MelandExchange.sol:77"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)3951_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3428": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(Meland1155MELDFuture)10506": {
            "label": "contract Meland1155MELDFuture"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))": {
            "label": "mapping(address => mapping(uint256 => uint256[]))"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(ExchangeMELD)12332_storage)": {
            "label": "mapping(uint256 => struct MelandExchange.ExchangeMELD)"
          },
          "t_struct(ExchangeMELD)12332_storage": {
            "label": "struct MelandExchange.ExchangeMELD",
            "members": [
              {
                "label": "exchangedAt",
                "type": "t_uint256"
              },
              {
                "label": "amountOfMELD",
                "type": "t_uint256"
              },
              {
                "label": "beneficiary",
                "type": "t_address"
              },
              {
                "label": "paymentDitamin",
                "type": "t_uint256"
              },
              {
                "label": "paymentAt",
                "type": "t_uint256"
              },
              {
                "label": "failedAt",
                "type": "t_uint256"
              },
              {
                "label": "failedMessage",
                "type": "t_string_storage"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_struct(DepositDitamin)12347_storage)": {
            "label": "mapping(uint256 => struct MelandExchange.DepositDitamin)"
          },
          "t_struct(DepositDitamin)12347_storage": {
            "label": "struct MelandExchange.DepositDitamin",
            "members": [
              {
                "label": "depositedAt",
                "type": "t_uint256"
              },
              {
                "label": "amountOfMELD",
                "type": "t_uint256"
              },
              {
                "label": "beneficiary",
                "type": "t_address"
              },
              {
                "label": "paymentDitamin",
                "type": "t_uint256"
              },
              {
                "label": "paymentAt",
                "type": "t_uint256"
              },
              {
                "label": "failedAt",
                "type": "t_uint256"
              },
              {
                "label": "failedMessage",
                "type": "t_string_storage"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "509865518b4c7983c18a7bb7f5be62ea2951f072beb12dcb9abc34044d1a5047": {
      "address": "0x5a7Da68064D77714f8d24917eb9B40eE2Ca42d66",
      "txHash": "0x99d61b1af64a41ee6fcecd551f2f94510ee8f1cceb8bb7c10099abaf748d6cf8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)15146",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155MELDFuture",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/Meland1155MELDFuture.sol:30"
          },
          {
            "contract": "Meland1155MELDFuture",
            "label": "totalSupplyByERC20",
            "type": "t_mapping(t_contract(IERC20Upgradeable)3428,t_uint256)",
            "src": "../project:/contracts/Meland1155MELDFuture.sol:45"
          },
          {
            "contract": "Meland1155MELDFuture",
            "label": "futureById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Future)9893_storage)",
            "src": "../project:/contracts/Meland1155MELDFuture.sol:46"
          }
        ],
        "types": {
          "t_struct(Counter)3951_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_contract(IERC20Upgradeable)3428,t_uint256)": {
            "label": "mapping(contract IERC20Upgradeable => uint256)"
          },
          "t_contract(IERC20Upgradeable)3428": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Future)9893_storage)": {
            "label": "mapping(uint256 => struct Meland1155MELDFuture.ERC20Future)"
          },
          "t_struct(ERC20Future)9893_storage": {
            "label": "struct Meland1155MELDFuture.ERC20Future",
            "members": [
              {
                "label": "token",
                "type": "t_contract(IERC20Upgradeable)3428"
              },
              {
                "label": "unlockAt",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(MelandTier)15146": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "6d5e50f02480fb419d5e52aa04c643b7fe9d2b1c9b3e227850fe54d7b08a97ff": {
      "address": "0x8a6E2cE066c0eb414F4236944217b8E4EF4fcC45",
      "txHash": "0x0ced65c54e0de4372180c1309d1f28456931237d59a296296c83367ca3962c68",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "MelandExchange",
            "label": "foundationWallet",
            "type": "t_address",
            "src": "../project:/contracts/MelandExchange.sol:26"
          },
          {
            "contract": "MelandExchange",
            "label": "officialWallet",
            "type": "t_address",
            "src": "../project:/contracts/MelandExchange.sol:29"
          },
          {
            "contract": "MelandExchange",
            "label": "bidbackWallet",
            "type": "t_address",
            "src": "../project:/contracts/MelandExchange.sol:34"
          },
          {
            "contract": "MelandExchange",
            "label": "ownerCutPerMillion",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandExchange.sol:36"
          },
          {
            "contract": "MelandExchange",
            "label": "limitEveryDayMELD",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandExchange.sol:40"
          },
          {
            "contract": "MelandExchange",
            "label": "_exchangeMELDCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/MelandExchange.sol:42"
          },
          {
            "contract": "MelandExchange",
            "label": "_depositDitaminCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/MelandExchange.sol:43"
          },
          {
            "contract": "MelandExchange",
            "label": "acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3428",
            "src": "../project:/contracts/MelandExchange.sol:45"
          },
          {
            "contract": "MelandExchange",
            "label": "melandMELDFuture",
            "type": "t_contract(Meland1155MELDFuture)10506",
            "src": "../project:/contracts/MelandExchange.sol:47"
          },
          {
            "contract": "MelandExchange",
            "label": "getExchangeMELDIdsByUserAndDay",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))",
            "src": "../project:/contracts/MelandExchange.sol:64"
          },
          {
            "contract": "MelandExchange",
            "label": "getExchangeMELDById",
            "type": "t_mapping(t_uint256,t_struct(ExchangeMELD)12332_storage)",
            "src": "../project:/contracts/MelandExchange.sol:67"
          },
          {
            "contract": "MelandExchange",
            "label": "getDepositDitaminById",
            "type": "t_mapping(t_uint256,t_struct(DepositDitamin)12347_storage)",
            "src": "../project:/contracts/MelandExchange.sol:68"
          },
          {
            "contract": "MelandExchange",
            "label": "lockedByUser",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandExchange.sol:71"
          },
          {
            "contract": "MelandExchange",
            "label": "pendingExchangeIds",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/MelandExchange.sol:74"
          },
          {
            "contract": "MelandExchange",
            "label": "pendingDepositIds",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/MelandExchange.sol:77"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)3951_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3428": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(Meland1155MELDFuture)10506": {
            "label": "contract Meland1155MELDFuture"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))": {
            "label": "mapping(address => mapping(uint256 => uint256[]))"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(ExchangeMELD)12332_storage)": {
            "label": "mapping(uint256 => struct MelandExchange.ExchangeMELD)"
          },
          "t_struct(ExchangeMELD)12332_storage": {
            "label": "struct MelandExchange.ExchangeMELD",
            "members": [
              {
                "label": "exchangedAt",
                "type": "t_uint256"
              },
              {
                "label": "amountOfMELD",
                "type": "t_uint256"
              },
              {
                "label": "beneficiary",
                "type": "t_address"
              },
              {
                "label": "paymentDitamin",
                "type": "t_uint256"
              },
              {
                "label": "paymentAt",
                "type": "t_uint256"
              },
              {
                "label": "failedAt",
                "type": "t_uint256"
              },
              {
                "label": "failedMessage",
                "type": "t_string_storage"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_struct(DepositDitamin)12347_storage)": {
            "label": "mapping(uint256 => struct MelandExchange.DepositDitamin)"
          },
          "t_struct(DepositDitamin)12347_storage": {
            "label": "struct MelandExchange.DepositDitamin",
            "members": [
              {
                "label": "depositedAt",
                "type": "t_uint256"
              },
              {
                "label": "amountOfMELD",
                "type": "t_uint256"
              },
              {
                "label": "beneficiary",
                "type": "t_address"
              },
              {
                "label": "paymentDitamin",
                "type": "t_uint256"
              },
              {
                "label": "paymentAt",
                "type": "t_uint256"
              },
              {
                "label": "failedAt",
                "type": "t_uint256"
              },
              {
                "label": "failedMessage",
                "type": "t_string_storage"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "fa551084ccf59af240625a54dc402c2c80958a28799bcc2acc6a0e9e8e0cfbef": {
      "address": "0xe21d09740806560C60Bd96eB5637FC11AD5A7c87",
      "txHash": "0xfa2352b5295be5dbd60df1ced0224b2d24988c71951dfc2e204e5e7b25753025",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "MelandExchange",
            "label": "foundationWallet",
            "type": "t_address",
            "src": "../project:/contracts/MelandExchange.sol:26"
          },
          {
            "contract": "MelandExchange",
            "label": "officialWallet",
            "type": "t_address",
            "src": "../project:/contracts/MelandExchange.sol:29"
          },
          {
            "contract": "MelandExchange",
            "label": "bidbackWallet",
            "type": "t_address",
            "src": "../project:/contracts/MelandExchange.sol:34"
          },
          {
            "contract": "MelandExchange",
            "label": "ownerCutPerMillion",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandExchange.sol:36"
          },
          {
            "contract": "MelandExchange",
            "label": "limitEveryDayMELD",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandExchange.sol:40"
          },
          {
            "contract": "MelandExchange",
            "label": "_exchangeMELDCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/MelandExchange.sol:42"
          },
          {
            "contract": "MelandExchange",
            "label": "_depositDitaminCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/MelandExchange.sol:43"
          },
          {
            "contract": "MelandExchange",
            "label": "acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3428",
            "src": "../project:/contracts/MelandExchange.sol:45"
          },
          {
            "contract": "MelandExchange",
            "label": "melandMELDFuture",
            "type": "t_contract(Meland1155MELDFuture)10506",
            "src": "../project:/contracts/MelandExchange.sol:47"
          },
          {
            "contract": "MelandExchange",
            "label": "getExchangeMELDIdsByUserAndDay",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))",
            "src": "../project:/contracts/MelandExchange.sol:64"
          },
          {
            "contract": "MelandExchange",
            "label": "getExchangeMELDById",
            "type": "t_mapping(t_uint256,t_struct(ExchangeMELD)12332_storage)",
            "src": "../project:/contracts/MelandExchange.sol:67"
          },
          {
            "contract": "MelandExchange",
            "label": "getDepositDitaminById",
            "type": "t_mapping(t_uint256,t_struct(DepositDitamin)12347_storage)",
            "src": "../project:/contracts/MelandExchange.sol:68"
          },
          {
            "contract": "MelandExchange",
            "label": "lockedByUser",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandExchange.sol:71"
          },
          {
            "contract": "MelandExchange",
            "label": "pendingExchangeIds",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/MelandExchange.sol:74"
          },
          {
            "contract": "MelandExchange",
            "label": "pendingDepositIds",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/MelandExchange.sol:77"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)3951_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3428": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(Meland1155MELDFuture)10506": {
            "label": "contract Meland1155MELDFuture"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))": {
            "label": "mapping(address => mapping(uint256 => uint256[]))"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(ExchangeMELD)12332_storage)": {
            "label": "mapping(uint256 => struct MelandExchange.ExchangeMELD)"
          },
          "t_struct(ExchangeMELD)12332_storage": {
            "label": "struct MelandExchange.ExchangeMELD",
            "members": [
              {
                "label": "exchangedAt",
                "type": "t_uint256"
              },
              {
                "label": "amountOfMELD",
                "type": "t_uint256"
              },
              {
                "label": "beneficiary",
                "type": "t_address"
              },
              {
                "label": "paymentDitamin",
                "type": "t_uint256"
              },
              {
                "label": "paymentAt",
                "type": "t_uint256"
              },
              {
                "label": "failedAt",
                "type": "t_uint256"
              },
              {
                "label": "failedMessage",
                "type": "t_string_storage"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_struct(DepositDitamin)12347_storage)": {
            "label": "mapping(uint256 => struct MelandExchange.DepositDitamin)"
          },
          "t_struct(DepositDitamin)12347_storage": {
            "label": "struct MelandExchange.DepositDitamin",
            "members": [
              {
                "label": "depositedAt",
                "type": "t_uint256"
              },
              {
                "label": "amountOfMELD",
                "type": "t_uint256"
              },
              {
                "label": "beneficiary",
                "type": "t_address"
              },
              {
                "label": "paymentDitamin",
                "type": "t_uint256"
              },
              {
                "label": "paymentAt",
                "type": "t_uint256"
              },
              {
                "label": "failedAt",
                "type": "t_uint256"
              },
              {
                "label": "failedMessage",
                "type": "t_string_storage"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "145ab24429a80c8633b89ee11771456cb526027270c275045ec89d8c7c4f7650": {
      "address": "0x9F29e12Fb4B2fee4350F8BD051B196a826114D3a",
      "txHash": "0x028f4d47045bebbc11756c452097b62d88962cef0cbed182a5dd4055bb25ca19",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "MelandExchange",
            "label": "foundationWallet",
            "type": "t_address",
            "src": "../project:/contracts/MelandExchange.sol:26"
          },
          {
            "contract": "MelandExchange",
            "label": "officialWallet",
            "type": "t_address",
            "src": "../project:/contracts/MelandExchange.sol:29"
          },
          {
            "contract": "MelandExchange",
            "label": "bidbackWallet",
            "type": "t_address",
            "src": "../project:/contracts/MelandExchange.sol:34"
          },
          {
            "contract": "MelandExchange",
            "label": "ownerCutPerMillion",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandExchange.sol:36"
          },
          {
            "contract": "MelandExchange",
            "label": "limitEveryDayMELD",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandExchange.sol:40"
          },
          {
            "contract": "MelandExchange",
            "label": "_exchangeMELDCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/MelandExchange.sol:42"
          },
          {
            "contract": "MelandExchange",
            "label": "_depositDitaminCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/MelandExchange.sol:43"
          },
          {
            "contract": "MelandExchange",
            "label": "acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3428",
            "src": "../project:/contracts/MelandExchange.sol:45"
          },
          {
            "contract": "MelandExchange",
            "label": "melandMELDFuture",
            "type": "t_contract(Meland1155MELDFuture)10495",
            "src": "../project:/contracts/MelandExchange.sol:47"
          },
          {
            "contract": "MelandExchange",
            "label": "getExchangeMELDIdsByUserAndDay",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))",
            "src": "../project:/contracts/MelandExchange.sol:64"
          },
          {
            "contract": "MelandExchange",
            "label": "getExchangeMELDById",
            "type": "t_mapping(t_uint256,t_struct(ExchangeMELD)12321_storage)",
            "src": "../project:/contracts/MelandExchange.sol:67"
          },
          {
            "contract": "MelandExchange",
            "label": "getDepositDitaminById",
            "type": "t_mapping(t_uint256,t_struct(DepositDitamin)12336_storage)",
            "src": "../project:/contracts/MelandExchange.sol:68"
          },
          {
            "contract": "MelandExchange",
            "label": "lockedByUser",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandExchange.sol:71"
          },
          {
            "contract": "MelandExchange",
            "label": "pendingExchangeIds",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/MelandExchange.sol:74"
          },
          {
            "contract": "MelandExchange",
            "label": "pendingDepositIds",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/MelandExchange.sol:77"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)3951_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3428": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(Meland1155MELDFuture)10495": {
            "label": "contract Meland1155MELDFuture"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))": {
            "label": "mapping(address => mapping(uint256 => uint256[]))"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(ExchangeMELD)12321_storage)": {
            "label": "mapping(uint256 => struct MelandExchange.ExchangeMELD)"
          },
          "t_struct(ExchangeMELD)12321_storage": {
            "label": "struct MelandExchange.ExchangeMELD",
            "members": [
              {
                "label": "exchangedAt",
                "type": "t_uint256"
              },
              {
                "label": "amountOfMELD",
                "type": "t_uint256"
              },
              {
                "label": "beneficiary",
                "type": "t_address"
              },
              {
                "label": "paymentDitamin",
                "type": "t_uint256"
              },
              {
                "label": "paymentAt",
                "type": "t_uint256"
              },
              {
                "label": "failedAt",
                "type": "t_uint256"
              },
              {
                "label": "failedMessage",
                "type": "t_string_storage"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_struct(DepositDitamin)12336_storage)": {
            "label": "mapping(uint256 => struct MelandExchange.DepositDitamin)"
          },
          "t_struct(DepositDitamin)12336_storage": {
            "label": "struct MelandExchange.DepositDitamin",
            "members": [
              {
                "label": "depositedAt",
                "type": "t_uint256"
              },
              {
                "label": "amountOfMELD",
                "type": "t_uint256"
              },
              {
                "label": "beneficiary",
                "type": "t_address"
              },
              {
                "label": "paymentDitamin",
                "type": "t_uint256"
              },
              {
                "label": "paymentAt",
                "type": "t_uint256"
              },
              {
                "label": "failedAt",
                "type": "t_uint256"
              },
              {
                "label": "failedMessage",
                "type": "t_string_storage"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "26754c106f6de3cd980db0a465f2987115ebf349e0ff2cd163e8620ef0345553": {
      "address": "0x0399f46a85f61D6DEa8bf10CC71b537804662e37",
      "txHash": "0x3d0280504f6ad4d487ebb93318420491dc2838fca47712ac0d0c4496b16d2177",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)15146",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155MELDFuture",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/Meland1155MELDFuture.sol:30"
          },
          {
            "contract": "Meland1155MELDFuture",
            "label": "totalSupplyByERC20",
            "type": "t_mapping(t_contract(IERC20Upgradeable)3428,t_uint256)",
            "src": "../project:/contracts/Meland1155MELDFuture.sol:45"
          },
          {
            "contract": "Meland1155MELDFuture",
            "label": "futureById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Future)9893_storage)",
            "src": "../project:/contracts/Meland1155MELDFuture.sol:46"
          }
        ],
        "types": {
          "t_struct(Counter)3951_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_contract(IERC20Upgradeable)3428,t_uint256)": {
            "label": "mapping(contract IERC20Upgradeable => uint256)"
          },
          "t_contract(IERC20Upgradeable)3428": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Future)9893_storage)": {
            "label": "mapping(uint256 => struct Meland1155MELDFuture.ERC20Future)"
          },
          "t_struct(ERC20Future)9893_storage": {
            "label": "struct Meland1155MELDFuture.ERC20Future",
            "members": [
              {
                "label": "token",
                "type": "t_contract(IERC20Upgradeable)3428"
              },
              {
                "label": "unlockAt",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(MelandTier)15146": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "c06174b3e7d9964eddad106801cd266ef68cd7fd3ce2aacaa57f8f3503a1207b": {
      "address": "0x793EEd3B17B302dA9eADd40ed8127A7316057BD5",
      "txHash": "0xd5500cbdbf5302197c15ee354a11b14ccf5695a12556063af48ff9e1c8d2c0c1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)15115",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155MELDFuture",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/Meland1155MELDFuture.sol:30"
          },
          {
            "contract": "Meland1155MELDFuture",
            "label": "totalSupplyByERC20",
            "type": "t_mapping(t_contract(IERC20Upgradeable)3428,t_uint256)",
            "src": "../project:/contracts/Meland1155MELDFuture.sol:45"
          },
          {
            "contract": "Meland1155MELDFuture",
            "label": "futureById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Future)9893_storage)",
            "src": "../project:/contracts/Meland1155MELDFuture.sol:46"
          }
        ],
        "types": {
          "t_struct(Counter)3951_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_contract(IERC20Upgradeable)3428,t_uint256)": {
            "label": "mapping(contract IERC20Upgradeable => uint256)"
          },
          "t_contract(IERC20Upgradeable)3428": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Future)9893_storage)": {
            "label": "mapping(uint256 => struct Meland1155MELDFuture.ERC20Future)"
          },
          "t_struct(ERC20Future)9893_storage": {
            "label": "struct Meland1155MELDFuture.ERC20Future",
            "members": [
              {
                "label": "token",
                "type": "t_contract(IERC20Upgradeable)3428"
              },
              {
                "label": "unlockAt",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(MelandTier)15115": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "d6f1a0b31288c342189e013826363142df10e4d1dabd8c9150defe08af011217": {
      "address": "0x44E5B2eBa1a8ee366ac38C021C8Be809604aD622",
      "txHash": "0xafc37503c1f16127739e85d7de6180cba711c60f97453c36bf27d4d823035d17",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)15140",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155MELDFuture",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/Meland1155MELDFuture.sol:30"
          },
          {
            "contract": "Meland1155MELDFuture",
            "label": "totalSupplyByERC20",
            "type": "t_mapping(t_contract(IERC20Upgradeable)3428,t_uint256)",
            "src": "../project:/contracts/Meland1155MELDFuture.sol:45"
          },
          {
            "contract": "Meland1155MELDFuture",
            "label": "futureById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Future)9893_storage)",
            "src": "../project:/contracts/Meland1155MELDFuture.sol:46"
          }
        ],
        "types": {
          "t_struct(Counter)3951_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_contract(IERC20Upgradeable)3428,t_uint256)": {
            "label": "mapping(contract IERC20Upgradeable => uint256)"
          },
          "t_contract(IERC20Upgradeable)3428": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Future)9893_storage)": {
            "label": "mapping(uint256 => struct Meland1155MELDFuture.ERC20Future)"
          },
          "t_struct(ERC20Future)9893_storage": {
            "label": "struct Meland1155MELDFuture.ERC20Future",
            "members": [
              {
                "label": "token",
                "type": "t_contract(IERC20Upgradeable)3428"
              },
              {
                "label": "unlockAt",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(MelandTier)15140": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "c6af6bdd5290118f9bea7d192248b7202d2adc760acc40597db23cd826b83acc": {
      "address": "0xdf847430fB2ECa49C12394D3af61914a93cf0676",
      "txHash": "0x89b13b54083516d484213714d647aaba3b0cb075b5c6fdf4eeabf2ad652c1900",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)15134",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155MELDFuture",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/Meland1155MELDFuture.sol:30"
          },
          {
            "contract": "Meland1155MELDFuture",
            "label": "totalSupplyByERC20",
            "type": "t_mapping(t_contract(IERC20Upgradeable)3428,t_uint256)",
            "src": "../project:/contracts/Meland1155MELDFuture.sol:45"
          },
          {
            "contract": "Meland1155MELDFuture",
            "label": "futureById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Future)9893_storage)",
            "src": "../project:/contracts/Meland1155MELDFuture.sol:46"
          }
        ],
        "types": {
          "t_struct(Counter)3951_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_contract(IERC20Upgradeable)3428,t_uint256)": {
            "label": "mapping(contract IERC20Upgradeable => uint256)"
          },
          "t_contract(IERC20Upgradeable)3428": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Future)9893_storage)": {
            "label": "mapping(uint256 => struct Meland1155MELDFuture.ERC20Future)"
          },
          "t_struct(ERC20Future)9893_storage": {
            "label": "struct Meland1155MELDFuture.ERC20Future",
            "members": [
              {
                "label": "token",
                "type": "t_contract(IERC20Upgradeable)3428"
              },
              {
                "label": "unlockAt",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(MelandTier)15134": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "7f553670765ac3a8466b7253a2d7ffbd8d210fb0a545c8afd46adc35edaa8c85": {
      "address": "0xD9C933F1c29127ED6E43b29aC44fc5578fb57E14",
      "txHash": "0x7b954c0277fd3fc671f386c2fc9bf7b96af43fb174abd07bb768e1fe3b0b2861",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)15125",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155MELDFuture",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/Meland1155MELDFuture.sol:30"
          },
          {
            "contract": "Meland1155MELDFuture",
            "label": "totalSupplyByERC20",
            "type": "t_mapping(t_contract(IERC20Upgradeable)3428,t_uint256)",
            "src": "../project:/contracts/Meland1155MELDFuture.sol:45"
          },
          {
            "contract": "Meland1155MELDFuture",
            "label": "futureById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Future)9893_storage)",
            "src": "../project:/contracts/Meland1155MELDFuture.sol:46"
          }
        ],
        "types": {
          "t_struct(Counter)3951_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_contract(IERC20Upgradeable)3428,t_uint256)": {
            "label": "mapping(contract IERC20Upgradeable => uint256)"
          },
          "t_contract(IERC20Upgradeable)3428": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Future)9893_storage)": {
            "label": "mapping(uint256 => struct Meland1155MELDFuture.ERC20Future)"
          },
          "t_struct(ERC20Future)9893_storage": {
            "label": "struct Meland1155MELDFuture.ERC20Future",
            "members": [
              {
                "label": "token",
                "type": "t_contract(IERC20Upgradeable)3428"
              },
              {
                "label": "unlockAt",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(MelandTier)15125": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "4f25a8583743f0eef963d36f28d8dcfd9cc78fd955a64a1398e6961624b8c543": {
      "address": "0xF4965fa3148083083f7fa8f951AFe5c825eFa92c",
      "txHash": "0xf0914a0e2944b0f3cf83722cba6270fcddf7c3e308ca345dbf659800d1ee18b2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)15124",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155MELDFuture",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/Meland1155MELDFuture.sol:30"
          },
          {
            "contract": "Meland1155MELDFuture",
            "label": "totalSupplyByERC20",
            "type": "t_mapping(t_contract(IERC20Upgradeable)3428,t_uint256)",
            "src": "../project:/contracts/Meland1155MELDFuture.sol:45"
          },
          {
            "contract": "Meland1155MELDFuture",
            "label": "futureById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Future)9893_storage)",
            "src": "../project:/contracts/Meland1155MELDFuture.sol:46"
          }
        ],
        "types": {
          "t_struct(Counter)3951_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_contract(IERC20Upgradeable)3428,t_uint256)": {
            "label": "mapping(contract IERC20Upgradeable => uint256)"
          },
          "t_contract(IERC20Upgradeable)3428": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Future)9893_storage)": {
            "label": "mapping(uint256 => struct Meland1155MELDFuture.ERC20Future)"
          },
          "t_struct(ERC20Future)9893_storage": {
            "label": "struct Meland1155MELDFuture.ERC20Future",
            "members": [
              {
                "label": "token",
                "type": "t_contract(IERC20Upgradeable)3428"
              },
              {
                "label": "unlockAt",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(MelandTier)15124": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "f25997d5995d5f366ac334074f999d9bf22a7aa6b170b477dee75f58f0010f2f": {
      "address": "0x58a9E952B5AFebd5ec274d71504eAbe9ed62aCE1",
      "txHash": "0xaf3df50d3586d41a350b4d9b2a0f39844132183800847ab28c85cd845434d3ca",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)15118",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155MELDFuture",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/Meland1155MELDFuture.sol:30"
          },
          {
            "contract": "Meland1155MELDFuture",
            "label": "totalSupplyByERC20",
            "type": "t_mapping(t_contract(IERC20Upgradeable)3428,t_uint256)",
            "src": "../project:/contracts/Meland1155MELDFuture.sol:45"
          },
          {
            "contract": "Meland1155MELDFuture",
            "label": "futureById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Future)9893_storage)",
            "src": "../project:/contracts/Meland1155MELDFuture.sol:46"
          }
        ],
        "types": {
          "t_struct(Counter)3951_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_contract(IERC20Upgradeable)3428,t_uint256)": {
            "label": "mapping(contract IERC20Upgradeable => uint256)"
          },
          "t_contract(IERC20Upgradeable)3428": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Future)9893_storage)": {
            "label": "mapping(uint256 => struct Meland1155MELDFuture.ERC20Future)"
          },
          "t_struct(ERC20Future)9893_storage": {
            "label": "struct Meland1155MELDFuture.ERC20Future",
            "members": [
              {
                "label": "token",
                "type": "t_contract(IERC20Upgradeable)3428"
              },
              {
                "label": "unlockAt",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(MelandTier)15118": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "26ef345a4490eae3ab892ea405f488c72379e2b9ec2fa8252ab47141656c9e51": {
      "address": "0xBdd73c001ddf7d83c818511156f32F20D47C5277",
      "txHash": "0xed3954079bf19939b6f97579f5a35152ee71356c69fe9fc94780801d4374c66e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)15116",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155MELDFuture",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/Meland1155MELDFuture.sol:30"
          },
          {
            "contract": "Meland1155MELDFuture",
            "label": "totalSupplyByERC20",
            "type": "t_mapping(t_contract(IERC20Upgradeable)3428,t_uint256)",
            "src": "../project:/contracts/Meland1155MELDFuture.sol:45"
          },
          {
            "contract": "Meland1155MELDFuture",
            "label": "futureById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Future)9893_storage)",
            "src": "../project:/contracts/Meland1155MELDFuture.sol:46"
          }
        ],
        "types": {
          "t_struct(Counter)3951_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_contract(IERC20Upgradeable)3428,t_uint256)": {
            "label": "mapping(contract IERC20Upgradeable => uint256)"
          },
          "t_contract(IERC20Upgradeable)3428": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Future)9893_storage)": {
            "label": "mapping(uint256 => struct Meland1155MELDFuture.ERC20Future)"
          },
          "t_struct(ERC20Future)9893_storage": {
            "label": "struct Meland1155MELDFuture.ERC20Future",
            "members": [
              {
                "label": "token",
                "type": "t_contract(IERC20Upgradeable)3428"
              },
              {
                "label": "unlockAt",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(MelandTier)15116": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "4033d36b765015b0e3e01651526a0326c7471a1a52460d85a0f4a8d5b684e95f": {
      "address": "0x79Aa33F040D17d9a52A08082F0D800cc9d354A00",
      "txHash": "0x1b37a5c77756b901f39ff4e52f5645d6ad9158b64d0e550b2e1ab6569d97de7a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)15135",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155MELDFuture",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/Meland1155MELDFuture.sol:30"
          },
          {
            "contract": "Meland1155MELDFuture",
            "label": "totalSupplyByERC20",
            "type": "t_mapping(t_contract(IERC20Upgradeable)3428,t_uint256)",
            "src": "../project:/contracts/Meland1155MELDFuture.sol:45"
          },
          {
            "contract": "Meland1155MELDFuture",
            "label": "futureById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Future)9893_storage)",
            "src": "../project:/contracts/Meland1155MELDFuture.sol:46"
          }
        ],
        "types": {
          "t_struct(Counter)3951_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_contract(IERC20Upgradeable)3428,t_uint256)": {
            "label": "mapping(contract IERC20Upgradeable => uint256)"
          },
          "t_contract(IERC20Upgradeable)3428": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Future)9893_storage)": {
            "label": "mapping(uint256 => struct Meland1155MELDFuture.ERC20Future)"
          },
          "t_struct(ERC20Future)9893_storage": {
            "label": "struct Meland1155MELDFuture.ERC20Future",
            "members": [
              {
                "label": "token",
                "type": "t_contract(IERC20Upgradeable)3428"
              },
              {
                "label": "unlockAt",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(MelandTier)15135": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    }
  }
}
