{
  "manifestVersion": "3.2",
  "proxies": [
    {
      "address": "0x170402A932f366baBd1BF11bF94813FafA323c4B",
      "txHash": "0xdaca010b28478cd319432872741417aa9c0c060b92a1018241f7e96efca74ead",
      "kind": "uups"
    },
    {
      "address": "0x7B5f5A3f675d18d5D33b0b3d7e3a35D3F77d4e28",
      "txHash": "0x6d96e41a586a5a60fc952b7430426940ed3c342c42f6baa646077f284f815912",
      "kind": "uups"
    },
    {
      "address": "0xcc355F6F514b97F06cEa577932D3f2d2295EFd73",
      "txHash": "0x5e3f02f2e7f243046a379f54c2ea0848509034b6bbf3bd77378ac46da3a92c83",
      "kind": "uups"
    },
    {
      "address": "0x7d23e34E676212cEFEB715ee023D15FD2049288b",
      "txHash": "0x63b79d46038471a23be146bd0992315fba4e4ace2c578a92a50177f758608ca4",
      "kind": "uups"
    },
    {
      "address": "0x1A7372C85E1207b8497532aD4147a597172fDF59",
      "txHash": "0x43c19e26e3fad91e651b873d1a629a12524e08adda9e450bd3caa66e720958aa",
      "kind": "uups"
    },
    {
      "address": "0x6A7B9fED27AAAD13A91d56B388d370ac5E485a37",
      "txHash": "0x9c023883b0f380993fed84360b26098b5533a15fb9e49b3db74536729b9f8442",
      "kind": "uups"
    },
    {
      "address": "0x061f636b7beA87C65276fb9ec7119F88d9A4B6E7",
      "txHash": "0x85e0ac4df3db1ee5151788c3104b9e85b903ab48778a64536214f90b8af3293f",
      "kind": "uups"
    },
    {
      "address": "0xEeD19fd5185f484dd67c1a6552d513876F095054",
      "txHash": "0xb483a555a81144f68cf24355c52a684cadd23ff07e66b98baead547e4236b72d",
      "kind": "uups"
    },
    {
      "address": "0xD5718D48cEfA70A9c452D3c82DcB86b71C5D473C",
      "txHash": "0x79e74187af0e3fbd0a7c9417e8a3a41908db493904b58686ab3a1c21f0152335",
      "kind": "uups"
    },
    {
      "address": "0x64c87BCae4AA5dA669d6CBCBD710dC3d020e6A73",
      "txHash": "0xa04087a847da76b77249faf15c22cef9f3cbc214fd92707da06d95708203e66d",
      "kind": "uups"
    },
    {
      "address": "0xd3FD1F88DBf232461569DECc35a0cB57b0a6B427",
      "txHash": "0x7586316df05b3a6eb1897970483e596806a4e6c76e5eb013ae4963614b38e926",
      "kind": "uups"
    }
  ],
  "impls": {
    "55e083f9971387e990a2beddd665b4064491edb4287cd087b96d3b4604e4c7e6": {
      "address": "0x64e694e14cB78a5A49C8c50237C764Fbd39CA3A3",
      "txHash": "0x54f92261315296059630d01ecb04716e6be845167190a536f204a7d501de62d1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "_totalSupply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:26"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:67"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "ef186050ee146e563420f238bf3ab4b7374a3fe7dffb06c464ec63e3965b65be": {
      "address": "0x2B2BD184e2817e83bA945A89Eeac6AC821d53527",
      "txHash": "0x1b3efca9d1311435eafdf7013968e76c33c3c4cd70efe11085a3826cab9c2067",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "foundationWallet",
            "type": "t_address",
            "src": "../project:/contracts/NFTStoreStorage.sol:9"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "officialWallet",
            "type": "t_address",
            "src": "../project:/contracts/NFTStoreStorage.sol:12"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "bidbackWallet",
            "type": "t_address",
            "src": "../project:/contracts/NFTStoreStorage.sol:17"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "ownerCutPerMillion",
            "type": "t_uint256",
            "src": "../project:/contracts/NFTStoreStorage.sol:19"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "itemUploadedMap",
            "type": "t_mapping(t_contract(IMelandStoreItems)6567,t_bool)",
            "src": "../project:/contracts/NFTStoreStorage.sol:21"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "itemSymbolSales",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/NFTStoreStorage.sol:23"
          },
          {
            "contract": "NFTStore",
            "label": "itemIdCounters",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/NFTStore.sol:23"
          }
        ],
        "types": {
          "t_struct(Counter)3951_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_contract(IMelandStoreItems)6567,t_bool)": {
            "label": "mapping(contract IMelandStoreItems => bool)"
          },
          "t_contract(IMelandStoreItems)6567": {
            "label": "contract IMelandStoreItems"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "5221f8747fb3c7c1d6aefed9987f18100fc3b5b60cfd3160f52d741311b54ab7": {
      "address": "0xFD18e29ad0C04a9Ffd16CB7aA4c1e8DB85B0A1cB",
      "txHash": "0xb4520389c2802b47b3c1efc07c48d68759efd366ee7418be57d9423ed6138d0c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)13793",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)15426",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3428",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_string_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155Land",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155Land.sol:26"
          },
          {
            "contract": "Meland1155Land",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155Land.sol:27"
          },
          {
            "contract": "Meland1155Land",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Land.sol:28"
          },
          {
            "contract": "Meland1155Land",
            "label": "ticketlandIds",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155Land.sol:30"
          }
        ],
        "types": {
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)15426": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3428": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)13793": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "48fafa6e90c5729e16c0506553b6adcf81cf99e9b68ae62521bf9f6a8506036f": {
      "address": "0xC4e262631795CD41DEe9D80e9Cb9eb450Fcd59ba",
      "txHash": "0x279f0c9875c607fe1b982bbe59ddb930f63c78c8c92d70779a2c50048f8f49b1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)13793",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)15426",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3428",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_string_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155LandFuture",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/Meland1155LandFuture.sol:27"
          },
          {
            "contract": "Meland1155LandFuture",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155LandFuture.sol:31"
          },
          {
            "contract": "Meland1155LandFuture",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155LandFuture.sol:32"
          },
          {
            "contract": "Meland1155LandFuture",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155LandFuture.sol:33"
          },
          {
            "contract": "Meland1155LandFuture",
            "label": "canBuyListByAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/Meland1155LandFuture.sol:34"
          }
        ],
        "types": {
          "t_struct(Counter)3951_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)15426": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3428": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)13793": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "2d3b82802a314dca81c51c3a3aca89acc05344681041141010322d62c9c76704": {
      "address": "0xF0f6029aDc7928CF06FC58a0457Aa52f3C57c0DC",
      "txHash": "0x304378e0edc5b15eaaef14c00bcb727306fa7d78ecab61410eae8215f676f99b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)13813",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)15455",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3428",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_string_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)15455": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3428": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_contract(MelandTier)13813": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3951_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "511e7cb57633fc1df0cbe3fa0b9afe2a9c3af1c2e038ad1f0758ba699cb26d99": {
      "address": "0xEfeA163DF36f14e9DBaC1eE44d48eD2472f547D4",
      "txHash": "0xbf3556dcd183a7a146fd1f231c4004d466a1ee1c6bdf13c3647130c34f0ec271",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_rewardIdCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:14"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc1155RewardIdCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:15"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc721RewardIdCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:16"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc20RewardIdCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:17"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc721RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC721Reward)13914_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:41"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc20RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Reward)13920_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:42"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc1155RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC1155Reward)13908_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:43"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardById",
            "type": "t_mapping(t_uint256,t_struct(Reward)13898_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:44"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:48"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:52"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:56"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:60"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardTransferedByRewardId",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../project:/contracts/MelandTierStorage.sol:63"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:40"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)3951_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_uint256,t_struct(ERC721Reward)13914_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC721Reward)"
          },
          "t_struct(ERC721Reward)13914_storage": {
            "label": "struct MelandTierStorage.ERC721Reward",
            "members": [
              {
                "label": "erc721",
                "type": "t_contract(IERC721Upgradeable)3656"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC721Upgradeable)3656": {
            "label": "contract IERC721Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Reward)13920_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC20Reward)"
          },
          "t_struct(ERC20Reward)13920_storage": {
            "label": "struct MelandTierStorage.ERC20Reward",
            "members": [
              {
                "label": "erc20",
                "type": "t_contract(IERC20Upgradeable)3428"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3428": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC1155Reward)13908_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC1155Reward)"
          },
          "t_struct(ERC1155Reward)13908_storage": {
            "label": "struct MelandTierStorage.ERC1155Reward",
            "members": [
              {
                "label": "erc1155",
                "type": "t_contract(IERC1155Upgradeable)2527"
              },
              {
                "label": "tokenIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "amounts",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_contract(IERC1155Upgradeable)2527": {
            "label": "contract IERC1155Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(Reward)13898_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.Reward)"
          },
          "t_struct(Reward)13898_storage": {
            "label": "struct MelandTierStorage.Reward",
            "members": [
              {
                "label": "erc1155RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc721RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc20RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "c944e6f1c5888edc6f881ed8e0326f24e128731c98a07d71e0ed8ae07acbc0fd": {
      "address": "0x3a56815aE2a63bc1f9f993022dE14a84c54FA3E1",
      "txHash": "0xc252b90b1f50f08da1da2f239949f8cd5005242809e04a1f3f6e4c49d4335c7e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "NFTFactory",
            "label": "supportNFTs",
            "type": "t_mapping(t_address,t_struct(SupportNFT)14608_storage)",
            "src": "../project:/contracts/NFTFactory.sol:26"
          },
          {
            "contract": "NFTFactory",
            "label": "supportRFCs",
            "type": "t_mapping(t_address,t_struct(RFC)14657_storage)",
            "src": "../project:/contracts/NFTFactory.sol:28"
          }
        ],
        "types": {
          "t_mapping(t_address,t_struct(SupportNFT)14608_storage)": {
            "label": "mapping(address => struct NFTFactory.SupportNFT)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(SupportNFT)14608_storage": {
            "label": "struct NFTFactory.SupportNFT",
            "members": [
              {
                "label": "erc721or1155",
                "type": "t_struct(ERC721Or1155)14602_storage"
              },
              {
                "label": "support",
                "type": "t_bool"
              }
            ]
          },
          "t_struct(ERC721Or1155)14602_storage": {
            "label": "struct NFTFactory.ERC721Or1155",
            "members": [
              {
                "label": "erc1155",
                "type": "t_contract(IERC1155)4774"
              },
              {
                "label": "erc721",
                "type": "t_contract(IERC721)5721"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IERC1155)4774": {
            "label": "contract IERC1155"
          },
          "t_contract(IERC721)5721": {
            "label": "contract IERC721"
          },
          "t_mapping(t_address,t_struct(RFC)14657_storage)": {
            "label": "mapping(address => struct NFTFactory.RFC)"
          },
          "t_struct(RFC)14657_storage": {
            "label": "struct NFTFactory.RFC",
            "members": [
              {
                "label": "proposer",
                "type": "t_address"
              },
              {
                "label": "proposalTime",
                "type": "t_uint256"
              },
              {
                "label": "approved",
                "type": "t_bool"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "da6d61d76643fb2924b5446300f94988e9da2d3cffc4aa4ec2d3bd7c42308cab": {
      "address": "0x4689bF3B171a8cD3efD50D2F5a4a098D232DA66c",
      "txHash": "0x6db15aa0507b2031e3502cdcdd19736d6301fdb16589073b802104e1cc9ef60d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "MarketplaceStorage",
            "label": "acceptedToken",
            "type": "t_contract(IERC20MELD)6495",
            "src": "../project:/contracts/MarketplaceStorage.sol:10"
          },
          {
            "contract": "MarketplaceStorage",
            "label": "foundationWallet",
            "type": "t_address",
            "src": "../project:/contracts/MarketplaceStorage.sol:13"
          },
          {
            "contract": "MarketplaceStorage",
            "label": "officialWallet",
            "type": "t_address",
            "src": "../project:/contracts/MarketplaceStorage.sol:16"
          },
          {
            "contract": "MarketplaceStorage",
            "label": "orderByAssetId",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Order)7834_storage))",
            "src": "../project:/contracts/MarketplaceStorage.sol:44"
          },
          {
            "contract": "MarketplaceStorage",
            "label": "ownerCutPerMillion",
            "type": "t_uint256",
            "src": "../project:/contracts/MarketplaceStorage.sol:47"
          },
          {
            "contract": "MarketplaceStorage",
            "label": "publicationFeeInWei",
            "type": "t_uint256",
            "src": "../project:/contracts/MarketplaceStorage.sol:50"
          }
        ],
        "types": {
          "t_contract(IERC20MELD)6495": {
            "label": "contract IERC20MELD"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Order)7834_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MarketplaceStorage.Order))"
          },
          "t_mapping(t_uint256,t_struct(Order)7834_storage)": {
            "label": "mapping(uint256 => struct MarketplaceStorage.Order)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Order)7834_storage": {
            "label": "struct MarketplaceStorage.Order",
            "members": [
              {
                "label": "id",
                "type": "t_bytes32"
              },
              {
                "label": "seller",
                "type": "t_address"
              },
              {
                "label": "assetId",
                "type": "t_uint256"
              },
              {
                "label": "nft",
                "type": "t_struct(ERC721Or1155)7820_storage"
              },
              {
                "label": "price",
                "type": "t_uint256"
              },
              {
                "label": "expiresAt",
                "type": "t_uint256"
              }
            ]
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(ERC721Or1155)7820_storage": {
            "label": "struct MarketplaceStorage.ERC721Or1155",
            "members": [
              {
                "label": "erc1155",
                "type": "t_contract(IERC1155)4774"
              },
              {
                "label": "erc721",
                "type": "t_contract(IERC721)5721"
              }
            ]
          },
          "t_contract(IERC1155)4774": {
            "label": "contract IERC1155"
          },
          "t_contract(IERC721)5721": {
            "label": "contract IERC721"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "885e803c0f1386bce393ed8adfefbdd183c01933138b62ba8f2e41aada3aea45": {
      "address": "0xe2eD1Da875820bc95187067Be186aA0fCDAa26B8",
      "txHash": "0x2bcd4cf7ffa0dd496ff5df0d03d539db9339334b7c17488d58ee22aa765328c6",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)13809",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)15442",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3428",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_string_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155LandFuture",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/Meland1155LandFuture.sol:27"
          },
          {
            "contract": "Meland1155LandFuture",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155LandFuture.sol:32"
          },
          {
            "contract": "Meland1155LandFuture",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155LandFuture.sol:33"
          },
          {
            "contract": "Meland1155LandFuture",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155LandFuture.sol:34"
          },
          {
            "contract": "Meland1155LandFuture",
            "label": "canBuyListByAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/Meland1155LandFuture.sol:35"
          }
        ],
        "types": {
          "t_struct(Counter)3951_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)15442": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3428": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)13809": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "e1723236c91457599f8bdbbbcd86e3fbed8da7eceed8ace2951719e6376c1dca": {
      "address": "0x81E214DADBD5abBe2d6081e37B2c6cDfbA2443ea",
      "txHash": "0x51d1ae4a220bcd9d0de2f19dc1c5135bc1bd13cf7c8c16a56c35ecb85e1ac5e3",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_rewardIdCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:14"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc1155RewardIdCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:15"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc721RewardIdCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:16"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc20RewardIdCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:17"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc721RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC721Reward)13930_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:41"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc20RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Reward)13936_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:42"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc1155RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC1155Reward)13924_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:43"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardById",
            "type": "t_mapping(t_uint256,t_struct(Reward)13914_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:44"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:48"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:52"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:56"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:60"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardTransferedByRewardId",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../project:/contracts/MelandTierStorage.sol:63"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:40"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)3951_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_uint256,t_struct(ERC721Reward)13930_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC721Reward)"
          },
          "t_struct(ERC721Reward)13930_storage": {
            "label": "struct MelandTierStorage.ERC721Reward",
            "members": [
              {
                "label": "erc721",
                "type": "t_contract(IERC721Upgradeable)3656"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC721Upgradeable)3656": {
            "label": "contract IERC721Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Reward)13936_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC20Reward)"
          },
          "t_struct(ERC20Reward)13936_storage": {
            "label": "struct MelandTierStorage.ERC20Reward",
            "members": [
              {
                "label": "erc20",
                "type": "t_contract(IERC20Upgradeable)3428"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3428": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC1155Reward)13924_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC1155Reward)"
          },
          "t_struct(ERC1155Reward)13924_storage": {
            "label": "struct MelandTierStorage.ERC1155Reward",
            "members": [
              {
                "label": "erc1155",
                "type": "t_contract(IERC1155Upgradeable)2527"
              },
              {
                "label": "tokenIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "amounts",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_contract(IERC1155Upgradeable)2527": {
            "label": "contract IERC1155Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(Reward)13914_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.Reward)"
          },
          "t_struct(Reward)13914_storage": {
            "label": "struct MelandTierStorage.Reward",
            "members": [
              {
                "label": "erc1155RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc721RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc20RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "e932be6b5dd463cf89c1053ab2cb5ec67b5f55610e3ee850f51b0a8d9db023a1": {
      "address": "0xe5B33428e4D4D5293BAfA90F7Ff0b0e156631Eb6",
      "txHash": "0x9fa8c98b2ddaf6ec76f0fe692dd9c1d9a3149935a373881707253d830e81f287",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "MarketplaceStorage",
            "label": "acceptedToken",
            "type": "t_contract(IERC20MELD)6495",
            "src": "../project:/contracts/MarketplaceStorage.sol:10"
          },
          {
            "contract": "MarketplaceStorage",
            "label": "foundationWallet",
            "type": "t_address",
            "src": "../project:/contracts/MarketplaceStorage.sol:13"
          },
          {
            "contract": "MarketplaceStorage",
            "label": "officialWallet",
            "type": "t_address",
            "src": "../project:/contracts/MarketplaceStorage.sol:16"
          },
          {
            "contract": "MarketplaceStorage",
            "label": "orderByAssetId",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Order)7838_storage))",
            "src": "../project:/contracts/MarketplaceStorage.sol:44"
          },
          {
            "contract": "MarketplaceStorage",
            "label": "ownerCutPerMillion",
            "type": "t_uint256",
            "src": "../project:/contracts/MarketplaceStorage.sol:47"
          },
          {
            "contract": "MarketplaceStorage",
            "label": "publicationFeeInWei",
            "type": "t_uint256",
            "src": "../project:/contracts/MarketplaceStorage.sol:50"
          }
        ],
        "types": {
          "t_contract(IERC20MELD)6495": {
            "label": "contract IERC20MELD"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Order)7838_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MarketplaceStorage.Order))"
          },
          "t_mapping(t_uint256,t_struct(Order)7838_storage)": {
            "label": "mapping(uint256 => struct MarketplaceStorage.Order)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Order)7838_storage": {
            "label": "struct MarketplaceStorage.Order",
            "members": [
              {
                "label": "id",
                "type": "t_bytes32"
              },
              {
                "label": "seller",
                "type": "t_address"
              },
              {
                "label": "assetId",
                "type": "t_uint256"
              },
              {
                "label": "nft",
                "type": "t_struct(ERC721Or1155)7824_storage"
              },
              {
                "label": "price",
                "type": "t_uint256"
              },
              {
                "label": "expiresAt",
                "type": "t_uint256"
              }
            ]
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(ERC721Or1155)7824_storage": {
            "label": "struct MarketplaceStorage.ERC721Or1155",
            "members": [
              {
                "label": "erc1155",
                "type": "t_contract(IERC1155)4774"
              },
              {
                "label": "erc721",
                "type": "t_contract(IERC721)5721"
              }
            ]
          },
          "t_contract(IERC1155)4774": {
            "label": "contract IERC1155"
          },
          "t_contract(IERC721)5721": {
            "label": "contract IERC721"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "4033d36b765015b0e3e01651526a0326c7471a1a52460d85a0f4a8d5b684e95f": {
      "address": "0x9fc69BF4aE5F8b3450fb971b5B50bfEB130E261D",
      "txHash": "0xd47044f181ede7ac36a4e0265bd0f84fc3c961901545d86c9b76ca0e52c33e19",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)15135",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155MELDFuture",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/Meland1155MELDFuture.sol:30"
          },
          {
            "contract": "Meland1155MELDFuture",
            "label": "totalSupplyByERC20",
            "type": "t_mapping(t_contract(IERC20Upgradeable)3428,t_uint256)",
            "src": "../project:/contracts/Meland1155MELDFuture.sol:45"
          },
          {
            "contract": "Meland1155MELDFuture",
            "label": "futureById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Future)9893_storage)",
            "src": "../project:/contracts/Meland1155MELDFuture.sol:46"
          }
        ],
        "types": {
          "t_struct(Counter)3951_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_contract(IERC20Upgradeable)3428,t_uint256)": {
            "label": "mapping(contract IERC20Upgradeable => uint256)"
          },
          "t_contract(IERC20Upgradeable)3428": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Future)9893_storage)": {
            "label": "mapping(uint256 => struct Meland1155MELDFuture.ERC20Future)"
          },
          "t_struct(ERC20Future)9893_storage": {
            "label": "struct Meland1155MELDFuture.ERC20Future",
            "members": [
              {
                "label": "token",
                "type": "t_contract(IERC20Upgradeable)3428"
              },
              {
                "label": "unlockAt",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(MelandTier)15135": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "145ab24429a80c8633b89ee11771456cb526027270c275045ec89d8c7c4f7650": {
      "address": "0x07Be1c70B0923b54a9b714133403dE60Bb6346Cf",
      "txHash": "0x16e18ccf0cbb767020e89daaefb93ec09be5847c9d2e89fd3859e1c798f8df98",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "MelandExchange",
            "label": "foundationWallet",
            "type": "t_address",
            "src": "../project:/contracts/MelandExchange.sol:26"
          },
          {
            "contract": "MelandExchange",
            "label": "officialWallet",
            "type": "t_address",
            "src": "../project:/contracts/MelandExchange.sol:29"
          },
          {
            "contract": "MelandExchange",
            "label": "bidbackWallet",
            "type": "t_address",
            "src": "../project:/contracts/MelandExchange.sol:34"
          },
          {
            "contract": "MelandExchange",
            "label": "ownerCutPerMillion",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandExchange.sol:36"
          },
          {
            "contract": "MelandExchange",
            "label": "limitEveryDayMELD",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandExchange.sol:40"
          },
          {
            "contract": "MelandExchange",
            "label": "_exchangeMELDCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/MelandExchange.sol:42"
          },
          {
            "contract": "MelandExchange",
            "label": "_depositDitaminCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/MelandExchange.sol:43"
          },
          {
            "contract": "MelandExchange",
            "label": "acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3428",
            "src": "../project:/contracts/MelandExchange.sol:45"
          },
          {
            "contract": "MelandExchange",
            "label": "melandMELDFuture",
            "type": "t_contract(Meland1155MELDFuture)10495",
            "src": "../project:/contracts/MelandExchange.sol:47"
          },
          {
            "contract": "MelandExchange",
            "label": "getExchangeMELDIdsByUserAndDay",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))",
            "src": "../project:/contracts/MelandExchange.sol:64"
          },
          {
            "contract": "MelandExchange",
            "label": "getExchangeMELDById",
            "type": "t_mapping(t_uint256,t_struct(ExchangeMELD)12321_storage)",
            "src": "../project:/contracts/MelandExchange.sol:67"
          },
          {
            "contract": "MelandExchange",
            "label": "getDepositDitaminById",
            "type": "t_mapping(t_uint256,t_struct(DepositDitamin)12336_storage)",
            "src": "../project:/contracts/MelandExchange.sol:68"
          },
          {
            "contract": "MelandExchange",
            "label": "lockedByUser",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandExchange.sol:71"
          },
          {
            "contract": "MelandExchange",
            "label": "pendingExchangeIds",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/MelandExchange.sol:74"
          },
          {
            "contract": "MelandExchange",
            "label": "pendingDepositIds",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/MelandExchange.sol:77"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)3951_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3428": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(Meland1155MELDFuture)10495": {
            "label": "contract Meland1155MELDFuture"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))": {
            "label": "mapping(address => mapping(uint256 => uint256[]))"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(ExchangeMELD)12321_storage)": {
            "label": "mapping(uint256 => struct MelandExchange.ExchangeMELD)"
          },
          "t_struct(ExchangeMELD)12321_storage": {
            "label": "struct MelandExchange.ExchangeMELD",
            "members": [
              {
                "label": "exchangedAt",
                "type": "t_uint256"
              },
              {
                "label": "amountOfMELD",
                "type": "t_uint256"
              },
              {
                "label": "beneficiary",
                "type": "t_address"
              },
              {
                "label": "paymentDitamin",
                "type": "t_uint256"
              },
              {
                "label": "paymentAt",
                "type": "t_uint256"
              },
              {
                "label": "failedAt",
                "type": "t_uint256"
              },
              {
                "label": "failedMessage",
                "type": "t_string_storage"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_struct(DepositDitamin)12336_storage)": {
            "label": "mapping(uint256 => struct MelandExchange.DepositDitamin)"
          },
          "t_struct(DepositDitamin)12336_storage": {
            "label": "struct MelandExchange.DepositDitamin",
            "members": [
              {
                "label": "depositedAt",
                "type": "t_uint256"
              },
              {
                "label": "amountOfMELD",
                "type": "t_uint256"
              },
              {
                "label": "beneficiary",
                "type": "t_address"
              },
              {
                "label": "paymentDitamin",
                "type": "t_uint256"
              },
              {
                "label": "paymentAt",
                "type": "t_uint256"
              },
              {
                "label": "failedAt",
                "type": "t_uint256"
              },
              {
                "label": "failedMessage",
                "type": "t_string_storage"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "fa551084ccf59af240625a54dc402c2c80958a28799bcc2acc6a0e9e8e0cfbef": {
      "address": "0x1DbB62f1a3c24CB2E8577ce36c96DDb80994b6E6",
      "txHash": "0xdf2ef7d8717d7ced94ec49f3c65061d6551c44f6385b940f49899ca32a072c6e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "MelandExchange",
            "label": "foundationWallet",
            "type": "t_address",
            "src": "../project:/contracts/MelandExchange.sol:26"
          },
          {
            "contract": "MelandExchange",
            "label": "officialWallet",
            "type": "t_address",
            "src": "../project:/contracts/MelandExchange.sol:29"
          },
          {
            "contract": "MelandExchange",
            "label": "bidbackWallet",
            "type": "t_address",
            "src": "../project:/contracts/MelandExchange.sol:34"
          },
          {
            "contract": "MelandExchange",
            "label": "ownerCutPerMillion",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandExchange.sol:36"
          },
          {
            "contract": "MelandExchange",
            "label": "limitEveryDayMELD",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandExchange.sol:40"
          },
          {
            "contract": "MelandExchange",
            "label": "_exchangeMELDCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/MelandExchange.sol:42"
          },
          {
            "contract": "MelandExchange",
            "label": "_depositDitaminCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/MelandExchange.sol:43"
          },
          {
            "contract": "MelandExchange",
            "label": "acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3428",
            "src": "../project:/contracts/MelandExchange.sol:45"
          },
          {
            "contract": "MelandExchange",
            "label": "melandMELDFuture",
            "type": "t_contract(Meland1155MELDFuture)10495",
            "src": "../project:/contracts/MelandExchange.sol:47"
          },
          {
            "contract": "MelandExchange",
            "label": "getExchangeMELDIdsByUserAndDay",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))",
            "src": "../project:/contracts/MelandExchange.sol:64"
          },
          {
            "contract": "MelandExchange",
            "label": "getExchangeMELDById",
            "type": "t_mapping(t_uint256,t_struct(ExchangeMELD)12321_storage)",
            "src": "../project:/contracts/MelandExchange.sol:67"
          },
          {
            "contract": "MelandExchange",
            "label": "getDepositDitaminById",
            "type": "t_mapping(t_uint256,t_struct(DepositDitamin)12336_storage)",
            "src": "../project:/contracts/MelandExchange.sol:68"
          },
          {
            "contract": "MelandExchange",
            "label": "lockedByUser",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandExchange.sol:71"
          },
          {
            "contract": "MelandExchange",
            "label": "pendingExchangeIds",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/MelandExchange.sol:74"
          },
          {
            "contract": "MelandExchange",
            "label": "pendingDepositIds",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/MelandExchange.sol:77"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)3951_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3428": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(Meland1155MELDFuture)10495": {
            "label": "contract Meland1155MELDFuture"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))": {
            "label": "mapping(address => mapping(uint256 => uint256[]))"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(ExchangeMELD)12321_storage)": {
            "label": "mapping(uint256 => struct MelandExchange.ExchangeMELD)"
          },
          "t_struct(ExchangeMELD)12321_storage": {
            "label": "struct MelandExchange.ExchangeMELD",
            "members": [
              {
                "label": "exchangedAt",
                "type": "t_uint256"
              },
              {
                "label": "amountOfMELD",
                "type": "t_uint256"
              },
              {
                "label": "beneficiary",
                "type": "t_address"
              },
              {
                "label": "paymentDitamin",
                "type": "t_uint256"
              },
              {
                "label": "paymentAt",
                "type": "t_uint256"
              },
              {
                "label": "failedAt",
                "type": "t_uint256"
              },
              {
                "label": "failedMessage",
                "type": "t_string_storage"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_struct(DepositDitamin)12336_storage)": {
            "label": "mapping(uint256 => struct MelandExchange.DepositDitamin)"
          },
          "t_struct(DepositDitamin)12336_storage": {
            "label": "struct MelandExchange.DepositDitamin",
            "members": [
              {
                "label": "depositedAt",
                "type": "t_uint256"
              },
              {
                "label": "amountOfMELD",
                "type": "t_uint256"
              },
              {
                "label": "beneficiary",
                "type": "t_address"
              },
              {
                "label": "paymentDitamin",
                "type": "t_uint256"
              },
              {
                "label": "paymentAt",
                "type": "t_uint256"
              },
              {
                "label": "failedAt",
                "type": "t_uint256"
              },
              {
                "label": "failedMessage",
                "type": "t_string_storage"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    }
  }
}
