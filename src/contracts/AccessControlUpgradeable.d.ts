/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import { UnsignedTransaction } from "ethers/utils/transaction";
import { TypedEventDescription, TypedFunctionDescription } from ".";

interface AccessControlUpgradeableInterface extends Interface {
  functions: {
    DEFAULT_ADMIN_ROLE: TypedFunctionDescription<{ encode([]: []): string }>;

    supportsInterface: TypedFunctionDescription<{
      encode([interfaceId]: [Arrayish]): string;
    }>;

    hasRole: TypedFunctionDescription<{
      encode([role, account]: [Arrayish, string]): string;
    }>;

    getRoleAdmin: TypedFunctionDescription<{
      encode([role]: [Arrayish]): string;
    }>;

    grantRole: TypedFunctionDescription<{
      encode([role, account]: [Arrayish, string]): string;
    }>;

    revokeRole: TypedFunctionDescription<{
      encode([role, account]: [Arrayish, string]): string;
    }>;

    renounceRole: TypedFunctionDescription<{
      encode([role, account]: [Arrayish, string]): string;
    }>;
  };

  events: {
    RoleAdminChanged: TypedEventDescription<{
      encodeTopics([role, previousAdminRole, newAdminRole]: [
        Arrayish | null,
        Arrayish | null,
        Arrayish | null
      ]): string[];
    }>;

    RoleGranted: TypedEventDescription<{
      encodeTopics([role, account, sender]: [
        Arrayish | null,
        string | null,
        string | null
      ]): string[];
    }>;

    RoleRevoked: TypedEventDescription<{
      encodeTopics([role, account, sender]: [
        Arrayish | null,
        string | null,
        string | null
      ]): string[];
    }>;
  };
}

export class AccessControlUpgradeable extends Contract {
  connect(
    signerOrProvider: Signer | Provider | string
  ): AccessControlUpgradeable;
  attach(addressOrName: string): AccessControlUpgradeable;
  deployed(): Promise<AccessControlUpgradeable>;

  on(event: EventFilter | string, listener: Listener): AccessControlUpgradeable;
  once(
    event: EventFilter | string,
    listener: Listener
  ): AccessControlUpgradeable;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): AccessControlUpgradeable;
  removeAllListeners(eventName: EventFilter | string): AccessControlUpgradeable;
  removeListener(eventName: any, listener: Listener): AccessControlUpgradeable;

  interface: AccessControlUpgradeableInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: UnsignedTransaction): Promise<string>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: UnsignedTransaction): Promise<string>;

    /**
     * See {IERC165-supportsInterface}.
     */
    supportsInterface(
      interfaceId: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    /**
     * See {IERC165-supportsInterface}.
     */
    "supportsInterface(bytes4)"(
      interfaceId: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: Arrayish,
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    "hasRole(bytes32,address)"(
      role: Arrayish,
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(
      role: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    "getRoleAdmin(bytes32)"(
      role: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    grantRole(
      role: Arrayish,
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    "grantRole(bytes32,address)"(
      role: Arrayish,
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    revokeRole(
      role: Arrayish,
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    "revokeRole(bytes32,address)"(
      role: Arrayish,
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    renounceRole(
      role: Arrayish,
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    "renounceRole(bytes32,address)"(
      role: Arrayish,
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: UnsignedTransaction): Promise<string>;

  "DEFAULT_ADMIN_ROLE()"(overrides?: UnsignedTransaction): Promise<string>;

  /**
   * See {IERC165-supportsInterface}.
   */
  supportsInterface(
    interfaceId: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  /**
   * See {IERC165-supportsInterface}.
   */
  "supportsInterface(bytes4)"(
    interfaceId: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  /**
   * Returns `true` if `account` has been granted `role`.
   */
  hasRole(
    role: Arrayish,
    account: string,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  /**
   * Returns `true` if `account` has been granted `role`.
   */
  "hasRole(bytes32,address)"(
    role: Arrayish,
    account: string,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  /**
   * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
   */
  getRoleAdmin(
    role: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  /**
   * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
   */
  "getRoleAdmin(bytes32)"(
    role: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  /**
   * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
   */
  grantRole(
    role: Arrayish,
    account: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  /**
   * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
   */
  "grantRole(bytes32,address)"(
    role: Arrayish,
    account: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  /**
   * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
   */
  revokeRole(
    role: Arrayish,
    account: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  /**
   * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
   */
  "revokeRole(bytes32,address)"(
    role: Arrayish,
    account: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  /**
   * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
   */
  renounceRole(
    role: Arrayish,
    account: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  /**
   * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
   */
  "renounceRole(bytes32,address)"(
    role: Arrayish,
    account: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  filters: {
    RoleAdminChanged(
      role: Arrayish | null,
      previousAdminRole: Arrayish | null,
      newAdminRole: Arrayish | null
    ): EventFilter;

    RoleGranted(
      role: Arrayish | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    RoleRevoked(
      role: Arrayish | null,
      account: string | null,
      sender: string | null
    ): EventFilter;
  };

  estimate: {
    DEFAULT_ADMIN_ROLE(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    /**
     * See {IERC165-supportsInterface}.
     */
    supportsInterface(
      interfaceId: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * See {IERC165-supportsInterface}.
     */
    "supportsInterface(bytes4)"(
      interfaceId: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: Arrayish,
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    "hasRole(bytes32,address)"(
      role: Arrayish,
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(
      role: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    "getRoleAdmin(bytes32)"(
      role: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    grantRole(
      role: Arrayish,
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    "grantRole(bytes32,address)"(
      role: Arrayish,
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    revokeRole(
      role: Arrayish,
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    "revokeRole(bytes32,address)"(
      role: Arrayish,
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    renounceRole(
      role: Arrayish,
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    "renounceRole(bytes32,address)"(
      role: Arrayish,
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;
  };
}
