/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import { UnsignedTransaction } from "ethers/utils/transaction";
import { TypedEventDescription, TypedFunctionDescription } from ".";

interface IBeaconUpgradeableInterface extends Interface {
  functions: {
    implementation: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {};
}

export class IBeaconUpgradeable extends Contract {
  connect(signerOrProvider: Signer | Provider | string): IBeaconUpgradeable;
  attach(addressOrName: string): IBeaconUpgradeable;
  deployed(): Promise<IBeaconUpgradeable>;

  on(event: EventFilter | string, listener: Listener): IBeaconUpgradeable;
  once(event: EventFilter | string, listener: Listener): IBeaconUpgradeable;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): IBeaconUpgradeable;
  removeAllListeners(eventName: EventFilter | string): IBeaconUpgradeable;
  removeListener(eventName: any, listener: Listener): IBeaconUpgradeable;

  interface: IBeaconUpgradeableInterface;

  functions: {
    /**
     * Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract.
     */
    implementation(overrides?: UnsignedTransaction): Promise<string>;

    /**
     * Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract.
     */
    "implementation()"(overrides?: UnsignedTransaction): Promise<string>;
  };

  /**
   * Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract.
   */
  implementation(overrides?: UnsignedTransaction): Promise<string>;

  /**
   * Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract.
   */
  "implementation()"(overrides?: UnsignedTransaction): Promise<string>;

  filters: {};

  estimate: {
    /**
     * Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract.
     */
    implementation(overrides?: UnsignedTransaction): Promise<BigNumber>;

    /**
     * Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract.
     */
    "implementation()"(overrides?: UnsignedTransaction): Promise<BigNumber>;
  };
}
