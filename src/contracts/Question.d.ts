/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import { UnsignedTransaction } from "ethers/utils/transaction";
import { TypedEventDescription, TypedFunctionDescription } from ".";

interface QuestionInterface extends Interface {
  functions: {
    AUDIT_ROLE: TypedFunctionDescription<{ encode([]: []): string }>;

    DEFAULT_ADMIN_ROLE: TypedFunctionDescription<{ encode([]: []): string }>;

    MINTER_ROLE: TypedFunctionDescription<{ encode([]: []): string }>;

    UPGRADER_ROLE: TypedFunctionDescription<{ encode([]: []): string }>;

    approve: TypedFunctionDescription<{
      encode([to, tokenId]: [string, BigNumberish]): string;
    }>;

    balanceOf: TypedFunctionDescription<{ encode([owner]: [string]): string }>;

    getApproved: TypedFunctionDescription<{
      encode([tokenId]: [BigNumberish]): string;
    }>;

    getRoleAdmin: TypedFunctionDescription<{
      encode([role]: [Arrayish]): string;
    }>;

    grantRole: TypedFunctionDescription<{
      encode([role, account]: [Arrayish, string]): string;
    }>;

    hasRole: TypedFunctionDescription<{
      encode([role, account]: [Arrayish, string]): string;
    }>;

    isApprovedForAll: TypedFunctionDescription<{
      encode([owner, operator]: [string, string]): string;
    }>;

    name: TypedFunctionDescription<{ encode([]: []): string }>;

    ownerOf: TypedFunctionDescription<{
      encode([tokenId]: [BigNumberish]): string;
    }>;

    renounceRole: TypedFunctionDescription<{
      encode([role, account]: [Arrayish, string]): string;
    }>;

    revokeRole: TypedFunctionDescription<{
      encode([role, account]: [Arrayish, string]): string;
    }>;

    safeTransferFrom: TypedFunctionDescription<{
      encode([from, to, tokenId]: [string, string, BigNumberish]): string;
    }>;

    setApprovalForAll: TypedFunctionDescription<{
      encode([operator, approved]: [string, boolean]): string;
    }>;

    symbol: TypedFunctionDescription<{ encode([]: []): string }>;

    tokenURI: TypedFunctionDescription<{
      encode([tokenId]: [BigNumberish]): string;
    }>;

    transferFrom: TypedFunctionDescription<{
      encode([from, to, tokenId]: [string, string, BigNumberish]): string;
    }>;

    upgradeTo: TypedFunctionDescription<{
      encode([newImplementation]: [string]): string;
    }>;

    upgradeToAndCall: TypedFunctionDescription<{
      encode([newImplementation, data]: [string, Arrayish]): string;
    }>;

    initialize: TypedFunctionDescription<{
      encode([_MELDAddress]: [string]): string;
    }>;

    safeMintOnlyChoice: TypedFunctionDescription<{
      encode([
        _title,
        _option1,
        _option2,
        _option3,
        _option4,
        answerIndex,
        to,
      ]: [
        string,
        string,
        string,
        string,
        string,
        BigNumberish,
        string
      ]): string;
    }>;

    audit: TypedFunctionDescription<{ encode([]: []): string }>;

    detail: TypedFunctionDescription<{ encode([]: []): string }>;

    safeMint: TypedFunctionDescription<{ encode([to]: [string]): string }>;

    supportsInterface: TypedFunctionDescription<{
      encode([interfaceId]: [Arrayish]): string;
    }>;
  };

  events: {
    AdminChanged: TypedEventDescription<{
      encodeTopics([previousAdmin, newAdmin]: [null, null]): string[];
    }>;

    Approval: TypedEventDescription<{
      encodeTopics([owner, approved, tokenId]: [
        string | null,
        string | null,
        BigNumberish | null
      ]): string[];
    }>;

    ApprovalForAll: TypedEventDescription<{
      encodeTopics([owner, operator, approved]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    BeaconUpgraded: TypedEventDescription<{
      encodeTopics([beacon]: [string | null]): string[];
    }>;

    RoleAdminChanged: TypedEventDescription<{
      encodeTopics([role, previousAdminRole, newAdminRole]: [
        Arrayish | null,
        Arrayish | null,
        Arrayish | null
      ]): string[];
    }>;

    RoleGranted: TypedEventDescription<{
      encodeTopics([role, account, sender]: [
        Arrayish | null,
        string | null,
        string | null
      ]): string[];
    }>;

    RoleRevoked: TypedEventDescription<{
      encodeTopics([role, account, sender]: [
        Arrayish | null,
        string | null,
        string | null
      ]): string[];
    }>;

    Transfer: TypedEventDescription<{
      encodeTopics([from, to, tokenId]: [
        string | null,
        string | null,
        BigNumberish | null
      ]): string[];
    }>;

    Upgraded: TypedEventDescription<{
      encodeTopics([implementation]: [string | null]): string[];
    }>;
  };
}

export class Question extends Contract {
  connect(signerOrProvider: Signer | Provider | string): Question;
  attach(addressOrName: string): Question;
  deployed(): Promise<Question>;

  on(event: EventFilter | string, listener: Listener): Question;
  once(event: EventFilter | string, listener: Listener): Question;
  addListener(eventName: EventFilter | string, listener: Listener): Question;
  removeAllListeners(eventName: EventFilter | string): Question;
  removeListener(eventName: any, listener: Listener): Question;

  interface: QuestionInterface;

  functions: {
    AUDIT_ROLE(overrides?: UnsignedTransaction): Promise<string>;

    "AUDIT_ROLE()"(overrides?: UnsignedTransaction): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: UnsignedTransaction): Promise<string>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: UnsignedTransaction): Promise<string>;

    MINTER_ROLE(overrides?: UnsignedTransaction): Promise<string>;

    "MINTER_ROLE()"(overrides?: UnsignedTransaction): Promise<string>;

    UPGRADER_ROLE(overrides?: UnsignedTransaction): Promise<string>;

    "UPGRADER_ROLE()"(overrides?: UnsignedTransaction): Promise<string>;

    /**
     * See {IERC721-approve}.
     */
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    /**
     * See {IERC721-approve}.
     */
    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    /**
     * See {IERC721-balanceOf}.
     */
    balanceOf(
      owner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * See {IERC721-balanceOf}.
     */
    "balanceOf(address)"(
      owner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * See {IERC721-getApproved}.
     */
    getApproved(
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    /**
     * See {IERC721-getApproved}.
     */
    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(
      role: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    "getRoleAdmin(bytes32)"(
      role: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    grantRole(
      role: Arrayish,
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    "grantRole(bytes32,address)"(
      role: Arrayish,
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: Arrayish,
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    "hasRole(bytes32,address)"(
      role: Arrayish,
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    /**
     * See {IERC721-isApprovedForAll}.
     */
    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    /**
     * See {IERC721-isApprovedForAll}.
     */
    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    /**
     * See {IERC721Metadata-name}.
     */
    name(overrides?: UnsignedTransaction): Promise<string>;

    /**
     * See {IERC721Metadata-name}.
     */
    "name()"(overrides?: UnsignedTransaction): Promise<string>;

    /**
     * See {IERC721-ownerOf}.
     */
    ownerOf(
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    /**
     * See {IERC721-ownerOf}.
     */
    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    renounceRole(
      role: Arrayish,
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    "renounceRole(bytes32,address)"(
      role: Arrayish,
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    revokeRole(
      role: Arrayish,
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    "revokeRole(bytes32,address)"(
      role: Arrayish,
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    /**
     * See {IERC721-safeTransferFrom}.
     */
    safeTransferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    /**
     * See {IERC721-safeTransferFrom}.
     */
    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    /**
     * See {IERC721-safeTransferFrom}.
     */
    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    /**
     * See {IERC721-setApprovalForAll}.
     */
    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    /**
     * See {IERC721-setApprovalForAll}.
     */
    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    /**
     * See {IERC721Metadata-symbol}.
     */
    symbol(overrides?: UnsignedTransaction): Promise<string>;

    /**
     * See {IERC721Metadata-symbol}.
     */
    "symbol()"(overrides?: UnsignedTransaction): Promise<string>;

    /**
     * See {IERC721Metadata-tokenURI}.
     */
    tokenURI(
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    /**
     * See {IERC721Metadata-tokenURI}.
     */
    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    /**
     * See {IERC721-transferFrom}.
     */
    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    /**
     * See {IERC721-transferFrom}.
     */
    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    /**
     * Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.
     */
    upgradeTo(
      newImplementation: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    /**
     * Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.
     */
    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    /**
     * Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.
     */
    upgradeToAndCall(
      newImplementation: string,
      data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    /**
     * Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.
     */
    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    initialize(
      _MELDAddress: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      _MELDAddress: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    /**
     * 构造单选题. title 题干. option1. option2. option3. option4. answer. 构造的题目都将进入unready区域. 当审批团完成审批后. 才会进入 ready 区域给到用户答题.
     */
    safeMintOnlyChoice(
      _title: string,
      _option1: string,
      _option2: string,
      _option3: string,
      _option4: string,
      answerIndex: BigNumberish,
      to: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    /**
     * 构造单选题. title 题干. option1. option2. option3. option4. answer. 构造的题目都将进入unready区域. 当审批团完成审批后. 才会进入 ready 区域给到用户答题.
     */
    "safeMintOnlyChoice(string,string,string,string,string,uint8,address)"(
      _title: string,
      _option1: string,
      _option2: string,
      _option3: string,
      _option4: string,
      answerIndex: BigNumberish,
      to: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    audit(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

    "audit()"(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

    detail(overrides?: UnsignedTransaction): Promise<void>;

    "detail()"(overrides?: UnsignedTransaction): Promise<void>;

    safeMint(
      to: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "safeMint(address)"(
      to: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;
  };

  AUDIT_ROLE(overrides?: UnsignedTransaction): Promise<string>;

  "AUDIT_ROLE()"(overrides?: UnsignedTransaction): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: UnsignedTransaction): Promise<string>;

  "DEFAULT_ADMIN_ROLE()"(overrides?: UnsignedTransaction): Promise<string>;

  MINTER_ROLE(overrides?: UnsignedTransaction): Promise<string>;

  "MINTER_ROLE()"(overrides?: UnsignedTransaction): Promise<string>;

  UPGRADER_ROLE(overrides?: UnsignedTransaction): Promise<string>;

  "UPGRADER_ROLE()"(overrides?: UnsignedTransaction): Promise<string>;

  /**
   * See {IERC721-approve}.
   */
  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  /**
   * See {IERC721-approve}.
   */
  "approve(address,uint256)"(
    to: string,
    tokenId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  /**
   * See {IERC721-balanceOf}.
   */
  balanceOf(owner: string, overrides?: UnsignedTransaction): Promise<BigNumber>;

  /**
   * See {IERC721-balanceOf}.
   */
  "balanceOf(address)"(
    owner: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  /**
   * See {IERC721-getApproved}.
   */
  getApproved(
    tokenId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  /**
   * See {IERC721-getApproved}.
   */
  "getApproved(uint256)"(
    tokenId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  /**
   * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
   */
  getRoleAdmin(
    role: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  /**
   * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
   */
  "getRoleAdmin(bytes32)"(
    role: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  /**
   * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
   */
  grantRole(
    role: Arrayish,
    account: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  /**
   * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
   */
  "grantRole(bytes32,address)"(
    role: Arrayish,
    account: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  /**
   * Returns `true` if `account` has been granted `role`.
   */
  hasRole(
    role: Arrayish,
    account: string,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  /**
   * Returns `true` if `account` has been granted `role`.
   */
  "hasRole(bytes32,address)"(
    role: Arrayish,
    account: string,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  /**
   * See {IERC721-isApprovedForAll}.
   */
  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  /**
   * See {IERC721-isApprovedForAll}.
   */
  "isApprovedForAll(address,address)"(
    owner: string,
    operator: string,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  /**
   * See {IERC721Metadata-name}.
   */
  name(overrides?: UnsignedTransaction): Promise<string>;

  /**
   * See {IERC721Metadata-name}.
   */
  "name()"(overrides?: UnsignedTransaction): Promise<string>;

  /**
   * See {IERC721-ownerOf}.
   */
  ownerOf(
    tokenId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  /**
   * See {IERC721-ownerOf}.
   */
  "ownerOf(uint256)"(
    tokenId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  /**
   * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
   */
  renounceRole(
    role: Arrayish,
    account: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  /**
   * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
   */
  "renounceRole(bytes32,address)"(
    role: Arrayish,
    account: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  /**
   * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
   */
  revokeRole(
    role: Arrayish,
    account: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  /**
   * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
   */
  "revokeRole(bytes32,address)"(
    role: Arrayish,
    account: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  /**
   * See {IERC721-safeTransferFrom}.
   */
  safeTransferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  /**
   * See {IERC721-safeTransferFrom}.
   */
  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  /**
   * See {IERC721-safeTransferFrom}.
   */
  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  /**
   * See {IERC721-setApprovalForAll}.
   */
  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  /**
   * See {IERC721-setApprovalForAll}.
   */
  "setApprovalForAll(address,bool)"(
    operator: string,
    approved: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  /**
   * See {IERC721Metadata-symbol}.
   */
  symbol(overrides?: UnsignedTransaction): Promise<string>;

  /**
   * See {IERC721Metadata-symbol}.
   */
  "symbol()"(overrides?: UnsignedTransaction): Promise<string>;

  /**
   * See {IERC721Metadata-tokenURI}.
   */
  tokenURI(
    tokenId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  /**
   * See {IERC721Metadata-tokenURI}.
   */
  "tokenURI(uint256)"(
    tokenId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  /**
   * See {IERC721-transferFrom}.
   */
  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  /**
   * See {IERC721-transferFrom}.
   */
  "transferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  /**
   * Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.
   */
  upgradeTo(
    newImplementation: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  /**
   * Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.
   */
  "upgradeTo(address)"(
    newImplementation: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  /**
   * Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.
   */
  upgradeToAndCall(
    newImplementation: string,
    data: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  /**
   * Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.
   */
  "upgradeToAndCall(address,bytes)"(
    newImplementation: string,
    data: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  initialize(
    _MELDAddress: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    _MELDAddress: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  /**
   * 构造单选题. title 题干. option1. option2. option3. option4. answer. 构造的题目都将进入unready区域. 当审批团完成审批后. 才会进入 ready 区域给到用户答题.
   */
  safeMintOnlyChoice(
    _title: string,
    _option1: string,
    _option2: string,
    _option3: string,
    _option4: string,
    answerIndex: BigNumberish,
    to: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  /**
   * 构造单选题. title 题干. option1. option2. option3. option4. answer. 构造的题目都将进入unready区域. 当审批团完成审批后. 才会进入 ready 区域给到用户答题.
   */
  "safeMintOnlyChoice(string,string,string,string,string,uint8,address)"(
    _title: string,
    _option1: string,
    _option2: string,
    _option3: string,
    _option4: string,
    answerIndex: BigNumberish,
    to: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  audit(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  "audit()"(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  detail(overrides?: UnsignedTransaction): Promise<void>;

  "detail()"(overrides?: UnsignedTransaction): Promise<void>;

  safeMint(
    to: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "safeMint(address)"(
    to: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  filters: {
    AdminChanged(previousAdmin: null, newAdmin: null): EventFilter;

    Approval(
      owner: string | null,
      approved: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;

    ApprovalForAll(
      owner: string | null,
      operator: string | null,
      approved: null
    ): EventFilter;

    BeaconUpgraded(beacon: string | null): EventFilter;

    RoleAdminChanged(
      role: Arrayish | null,
      previousAdminRole: Arrayish | null,
      newAdminRole: Arrayish | null
    ): EventFilter;

    RoleGranted(
      role: Arrayish | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    RoleRevoked(
      role: Arrayish | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    Transfer(
      from: string | null,
      to: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;

    Upgraded(implementation: string | null): EventFilter;
  };

  estimate: {
    AUDIT_ROLE(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "AUDIT_ROLE()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    MINTER_ROLE(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "MINTER_ROLE()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    UPGRADER_ROLE(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "UPGRADER_ROLE()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    /**
     * See {IERC721-approve}.
     */
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * See {IERC721-approve}.
     */
    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * See {IERC721-balanceOf}.
     */
    balanceOf(
      owner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * See {IERC721-balanceOf}.
     */
    "balanceOf(address)"(
      owner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * See {IERC721-getApproved}.
     */
    getApproved(
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * See {IERC721-getApproved}.
     */
    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(
      role: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    "getRoleAdmin(bytes32)"(
      role: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    grantRole(
      role: Arrayish,
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    "grantRole(bytes32,address)"(
      role: Arrayish,
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: Arrayish,
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    "hasRole(bytes32,address)"(
      role: Arrayish,
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * See {IERC721-isApprovedForAll}.
     */
    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * See {IERC721-isApprovedForAll}.
     */
    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * See {IERC721Metadata-name}.
     */
    name(overrides?: UnsignedTransaction): Promise<BigNumber>;

    /**
     * See {IERC721Metadata-name}.
     */
    "name()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    /**
     * See {IERC721-ownerOf}.
     */
    ownerOf(
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * See {IERC721-ownerOf}.
     */
    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    renounceRole(
      role: Arrayish,
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    "renounceRole(bytes32,address)"(
      role: Arrayish,
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    revokeRole(
      role: Arrayish,
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    "revokeRole(bytes32,address)"(
      role: Arrayish,
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * See {IERC721-safeTransferFrom}.
     */
    safeTransferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * See {IERC721-safeTransferFrom}.
     */
    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * See {IERC721-safeTransferFrom}.
     */
    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * See {IERC721-setApprovalForAll}.
     */
    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * See {IERC721-setApprovalForAll}.
     */
    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * See {IERC721Metadata-symbol}.
     */
    symbol(overrides?: UnsignedTransaction): Promise<BigNumber>;

    /**
     * See {IERC721Metadata-symbol}.
     */
    "symbol()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    /**
     * See {IERC721Metadata-tokenURI}.
     */
    tokenURI(
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * See {IERC721Metadata-tokenURI}.
     */
    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * See {IERC721-transferFrom}.
     */
    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * See {IERC721-transferFrom}.
     */
    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.
     */
    upgradeTo(
      newImplementation: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.
     */
    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.
     */
    upgradeToAndCall(
      newImplementation: string,
      data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.
     */
    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    initialize(
      _MELDAddress: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "initialize(address)"(
      _MELDAddress: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * 构造单选题. title 题干. option1. option2. option3. option4. answer. 构造的题目都将进入unready区域. 当审批团完成审批后. 才会进入 ready 区域给到用户答题.
     */
    safeMintOnlyChoice(
      _title: string,
      _option1: string,
      _option2: string,
      _option3: string,
      _option4: string,
      answerIndex: BigNumberish,
      to: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * 构造单选题. title 题干. option1. option2. option3. option4. answer. 构造的题目都将进入unready区域. 当审批团完成审批后. 才会进入 ready 区域给到用户答题.
     */
    "safeMintOnlyChoice(string,string,string,string,string,uint8,address)"(
      _title: string,
      _option1: string,
      _option2: string,
      _option3: string,
      _option4: string,
      answerIndex: BigNumberish,
      to: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    audit(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "audit()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    detail(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "detail()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    safeMint(to: string, overrides?: UnsignedTransaction): Promise<BigNumber>;

    "safeMint(address)"(
      to: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;
  };
}
