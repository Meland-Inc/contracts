{
  "manifestVersion": "3.2",
  "proxies": [
    {
      "address": "0xE7b99fa5D07008890A7d34B9f9D564bfb24d51B8",
      "txHash": "0xce48404fbd08bb356e4d150fab4229aa39f508b03f5b538093b5d7c94c8b0315",
      "kind": "uups"
    },
    {
      "address": "0xb6C1cDc3E38783fE22e92099dcb402bc26B5451b",
      "txHash": "0x64b32062d11bec96523e5169dec069c226d30c9320dff5776a1f8f4b0e69f906",
      "kind": "uups"
    },
    {
      "address": "0x42e9FfBF89cebeb617Ab5f9Cef64E8d25Ed0C25d",
      "txHash": "0x6e1d64dfa20046f2bc4db862be464119e42ffdf0bc80f6f0dd71ff3c7e9d09b3",
      "kind": "uups"
    },
    {
      "address": "0xB601afC509a6ff3E67062BaC0F9E4CbE6F8B973D",
      "txHash": "0x8ede745136534339a98de910ffd7ded1d52ab0f9b4d6825e7104d5e10d0cb587",
      "kind": "uups"
    },
    {
      "address": "0x31fdD2149087b222026F5EEB66647D9BCc78efe3",
      "txHash": "0xecd5a9142ee3c74562aac77399252c83ad83c411d9937a1dd34cfd611f5b6ed2",
      "kind": "uups"
    },
    {
      "address": "0x58A72ECab781B8D2DC317db3742665A818d4C77e",
      "txHash": "0x783a1503c2624d045e03d5db964b8e813df0373bdd8f4c1b4f2a5cc9cd7e5be6",
      "kind": "uups"
    },
    {
      "address": "0x90620D1a6B2B0ea4715B48338d34613CF272E7a8",
      "txHash": "0x1152e838efedd60ca2381c84ec4f5a38eed7918893134ce247695d92fc49dbbf",
      "kind": "uups"
    },
    {
      "address": "0xd6D713cE5F53CEd59f63dFe94E50DE0a79280639",
      "txHash": "0x85040e1d2bbd52c81a0507aee8358f2124a0b85d0ccb0dd53c96040ef71e0b40",
      "kind": "uups"
    },
    {
      "address": "0xF536d333aaE5B288dE7f31E52774940015C7D778",
      "txHash": "0x53a0aeb3c1b71cf7c87096197a1a8e352bc0c999f3f67d29a7ec84f91d0ed47b",
      "kind": "uups"
    },
    {
      "address": "0x048927c437a3b6c7BF06940485DCe5eb7f51f955",
      "txHash": "0xa522a3dfaa4524e8369efdb59be4a6f72560faabd79316a8d180ec840435920c",
      "kind": "uups"
    },
    {
      "address": "0xAB251f8DC79Dde6Ee83269dD63f4A0A3d39013a9",
      "txHash": "0xc88538bc17390b464e9dc5b9a2bbb3779e5413f11658cfe8f6ab3bff564aefcc",
      "kind": "uups"
    },
    {
      "address": "0xB6980331c7720a6C4395E5Ca89048FB656fd551F",
      "txHash": "0xac68c723d55530804f20d3761a77650d2db657047d15bd5244969d6ca75a8c7f",
      "kind": "uups"
    },
    {
      "address": "0x4665B2453F0961d7D0b19136e55b6E4FDb4Bc476",
      "txHash": "0x16012275fdbce81cf69424d03123a5e7bb8e7f5c19ed0ce609af1b7317cd02aa",
      "kind": "uups"
    },
    {
      "address": "0x98f4Ce8aFC30dc56638f7EDBb9BaE6b834b914F9",
      "txHash": "0xf205ccddfcbef6d663e787879204b4388be0bca6a7b935a4979ca4af07c1ebab",
      "kind": "uups"
    },
    {
      "address": "0x4A61c7AC092b98f9cD7A1E9f8c054e1D866d3642",
      "txHash": "0x03251665d9a6674e9d84052097a83cc902ca59abd257fcee5ce7f74c85e12a6b",
      "kind": "uups"
    },
    {
      "address": "0x930F04A02e3946311D8B6ad74f6067B68af4C773",
      "txHash": "0xdd4b83700eba425c822fe25c7ce32f5b75574e68ee699c19916609e76a9fc249",
      "kind": "uups"
    },
    {
      "address": "0x8d84Dc56659a15d8A8B4EfB600d0014046caFA2d",
      "txHash": "0x188bb02983706086316a4d60de02bf0bcf41379bbeb7dd677adaf8786ddf39d3",
      "kind": "uups"
    },
    {
      "address": "0x6e48F31f1D4dB84f9c1bcA5BAe2fb83c183102db",
      "txHash": "0x57ddda5831511c7c2afbda9e80a9a54bf1800e435d65140aa1e51d6866785ec3",
      "kind": "uups"
    },
    {
      "address": "0x8E6e62a84B81A1B2B6ec161183b51EC97751A785",
      "txHash": "0x759b0acec6a45ca36062445d41a43a1cd11e7f0762a4bd90c4c36c9ffb35bf70",
      "kind": "uups"
    },
    {
      "address": "0x041d5CE6ed885dcd9729C95D70336731ca7687A7",
      "txHash": "0x631d65c15c6657334ab5bd6c126821d8db4001b2d5ec72e13e9f92a75c5f7ebb",
      "kind": "uups"
    },
    {
      "address": "0x5d63e9Ede241B3900aF941A2a95432b38ac5b22B",
      "txHash": "0x3f71f07e15b81572f914cfac26fdcb392a39f675f12e6f65884d29cca9b5d7a9",
      "kind": "uups"
    },
    {
      "address": "0x1896eB7D986d3A2Df419D54Fe8E99c6689992647",
      "txHash": "0xe6d33a5860c674cbec990844cea40316528a7fd1261d904b989354cb84efadc4",
      "kind": "uups"
    },
    {
      "address": "0x22a0FA166eDC1B0486870deBCc93e7c0DD2baC98",
      "txHash": "0x556fb97daf3a17263b51f9ec97abb131b17c40aecc2350db91e377bcdfd9e97b",
      "kind": "uups"
    },
    {
      "address": "0xd4703c6F47BBb665B9E315956969A23F5734cEd8",
      "txHash": "0x63c53bd4181a257951cd3cc14ae38f02fd2752c580cddef615084d1cb1f890ef",
      "kind": "uups"
    },
    {
      "address": "0xA29810C6b80F389133D6F1dE7FB5d2E01464B3a5",
      "txHash": "0xc67476681f9aa4db23e2da4b55c0a49f410d23f34a7a84c9a3a4efc1a410221e",
      "kind": "uups"
    },
    {
      "address": "0x839E4A71Bdb8f3588059974bE7Ab65964C413d31",
      "txHash": "0xfbea9f1e38231555b06b721ea7694e81221e46fcba8eef866311708076842279",
      "kind": "uups"
    },
    {
      "address": "0xBC70a27c097a9F063b08F4C3C21d7C71dBed17ee",
      "txHash": "0x2343b69984ca363d9190174f73a4805d670cbdc613efdaab59327068647c520a",
      "kind": "uups"
    },
    {
      "address": "0xdd3f45f5a4840B4eA890a411eC29D3F1F630a70B",
      "txHash": "0x5e271dbf8fde37b5b9ee7f8fdd3d793b48ed9d2e893b3206944efda5619e530f",
      "kind": "uups"
    },
    {
      "address": "0x953fEe0ed2cEB5718eCbFf854C7655659e28F7Dc",
      "txHash": "0xe322885d153ed2c671d5c552279666b7b6a130f6506cad441e34339ae2e33388",
      "kind": "uups"
    },
    {
      "address": "0x3E4bAAaCB314a1d76aF506D5eB688e1940396Dad",
      "txHash": "0xa59c74bf31945b21423cf4b18193eb2b9eea162a1ae480bbba56e52a6f2c55db",
      "kind": "uups"
    },
    {
      "address": "0xA04fC29C1d6be4739894444d7E51B78722132E7B",
      "txHash": "0x117672722725ca75d266049f9657e042dd88e2fad0529216714662f36fae4c42",
      "kind": "uups"
    },
    {
      "address": "0x443F156B80Fe6dB5349BD5ea32b09B40E6369a04",
      "txHash": "0x0acc900e3bfa273ee7daf15781654d92b8e2303d664520aedf1a6fc8191e9285",
      "kind": "uups"
    },
    {
      "address": "0xbDBd5ce243C4FaA1326a055663637Bc016373A5b",
      "txHash": "0xff62543a21e121e79bfa082bdd901082892fabc5655b2a17b8d35ec55d62350f",
      "kind": "uups"
    },
    {
      "address": "0x1e2a0F31FEd5967c7549841Ee2297C8A80C3433e",
      "txHash": "0x230f1db291f9b2ad345b5d270f34ec8746b71664e58c20b179a968ceadc51d18",
      "kind": "uups"
    },
    {
      "address": "0x747194A3AbEc834fAC2089c95AE2568b968474e6",
      "txHash": "0x5264f2534ab68b47805612ec02b44cfaddbe57327a8fd1ad3c1183bf5c5f5ebc",
      "kind": "uups"
    },
    {
      "address": "0xE82cA0578492Ce61fBfc7edB5e22Ef6A72BF0860",
      "txHash": "0x16f0b45905bde813909074131cf98fdb32eda8cb687b428a4d0f6c3fdf6aed73",
      "kind": "uups"
    },
    {
      "address": "0x83d7D23a7b6FB82df2831EeB13E8ff11D237bF76",
      "txHash": "0x2d268ea6b24dc0532e94a40ffd08115ea729ce0d5971e06c1b0f0a2679a6f667",
      "kind": "uups"
    },
    {
      "address": "0x819667096E5DaE7935145401E62a217bA11A2836",
      "txHash": "0x3ce8dc489d4fa9047a5084d83dfff820bb216f9b2d1175237b8b234bd6c40999",
      "kind": "uups"
    },
    {
      "address": "0xA1ee4d21b469A2f4131639923F65ac5bc592EB7D",
      "txHash": "0x622d5ed183353397511b52985908143b773dcf9c5b8199c4ef0faf71f071a178",
      "kind": "uups"
    },
    {
      "address": "0x40aa7b98eD926B7B26648EF5aAfb4b0088C11C3F",
      "txHash": "0x0cec5ba15866408923e25f8d0bfa0f7907212550be3569150cbee42a83acff88",
      "kind": "uups"
    },
    {
      "address": "0x840d87BF609978f0AeEE578FB5039227F11319eC",
      "txHash": "0xafb08b52112a5f436f9d71aa5102b93d05e84ee5d3d8e443451f8a0096ba0707",
      "kind": "uups"
    },
    {
      "address": "0x604348A1C08C82b40fA614021075263885B6cc2B",
      "txHash": "0x0e4980c7f4e954b8bbc8b0aebeb433d6945c0fd9c96cd39c33462499029bbf86",
      "kind": "uups"
    },
    {
      "address": "0xDE79C13367790d9cc7d06F8557b38b90a043290f",
      "txHash": "0xbf961237205edd2077d9c33f64e8e37f00e5d4bd7723d3a01db8db00baebca19",
      "kind": "uups"
    },
    {
      "address": "0x58D9Dc7eD2c02dDf38016b84416F40d56d4cC565",
      "txHash": "0x231ef8e1e79848d16076240c8acadae4cf84c0d33a127d270a11b795f004a654",
      "kind": "uups"
    },
    {
      "address": "0xBFf67Cc5F5159A623C675d5c16007630BE24369b",
      "txHash": "0x4c50eb0b55f465d4fe262cc4b600002f68be5d3571ffc4c0bd1c2ad151980685",
      "kind": "uups"
    },
    {
      "address": "0x0Af017CC2a35Cb46f759ff639137C549500BEdC7",
      "txHash": "0xec1cd360f6efbf520c56a9c0ed011da8e1edd33872b950f5ea39bae3feef0f81",
      "kind": "uups"
    },
    {
      "address": "0x3B374062eC84639495875FfE5297E6B302D28404",
      "txHash": "0x7a7fdd588c2861904808bdab0798035ed37bc0d274c71cde6a3a1907d4c97500",
      "kind": "uups"
    },
    {
      "address": "0x0B50D432cFCdaf802a2A995788C6D086CcdfaD6d",
      "txHash": "0x05ef2f4554f00ed70da219781338057ecdcde9c3b0e7c2d036b6a1fbc6013fc2",
      "kind": "uups"
    },
    {
      "address": "0x3C58d54014728046A8a2eA65229E9b8527ec1a26",
      "txHash": "0x776220e485d7b499d98bf3520a31e562cc5ee93f0831859f5d00607787917950",
      "kind": "uups"
    },
    {
      "address": "0xaFE0db7D983283cc8f0FaceA98c99c6F7Bfd8daf",
      "txHash": "0xdda4dd9fb0990bd0a1ea2cdbb1e8c5c877cefc726b1e021587264fe66140832a",
      "kind": "uups"
    },
    {
      "address": "0x8Ee5eD966466D67248D348933c96240543C57432",
      "txHash": "0xc9915e87d8c5a0c77c232d34c5abccdf0223738dbd4c3e8d772d101578b084ab",
      "kind": "uups"
    },
    {
      "address": "0x9c6876b06132eb3f3B806863B5aF17B4313330E9",
      "txHash": "0xb5fe1eac4e6ed7da8e2d8a49c6bbe07bbad5d857f5b501e9c1662c14cf092d51",
      "kind": "uups"
    },
    {
      "address": "0xEA572d1E786209546Bb56040EBa7D4B6e4F77f78",
      "txHash": "0x8bd693b4d4d5900409d335212e7518cb54f81504b4a2c856bd19a01307aa01af",
      "kind": "uups"
    },
    {
      "address": "0x67e5395195b016e2f239D307A7629127ccB2B4Fc",
      "txHash": "0x98b55ae8836da3b0ae45cc0f9eb1eae19166c7c35f584a59960863f34da9897d",
      "kind": "uups"
    },
    {
      "address": "0x362A4B61169aFa202A1237A135eBD3eBd35e7644",
      "txHash": "0xeb7a52c0c56ad822a4fc4469597373750dd0f699723771e5b1e69e614e8622c9",
      "kind": "uups"
    },
    {
      "address": "0x5aB59bF7Fdce70A5BAe25d430D795B312ED5fBD3",
      "txHash": "0x001221ac376ba3c48a24ff7bf4839f42abb5665b9125acad913f8d430d3000af",
      "kind": "uups"
    },
    {
      "address": "0x94D611D0328542A4dd8D1010f2c05D5D1F2473B1",
      "txHash": "0x259db8c85346707890bb0d057a81da081466f0befb2e36c115ccdb3bcdd877d2",
      "kind": "uups"
    },
    {
      "address": "0xFEd52577ed97C36744BF0d55878c046b3804A696",
      "txHash": "0x7525486f698421b64953e8a5f97dfe3dc084c271fd5751cf30b11583328f4a18",
      "kind": "uups"
    },
    {
      "address": "0x3687EE6B6132Ff0AB65527948DF29e9066d799E2",
      "txHash": "0x60537de0f5516f348c0459b36359d176c4c78f8e2902492fe1bb7a9ee6b3c515",
      "kind": "uups"
    },
    {
      "address": "0x76bBd2391AdeCC83CA7dE9a2505292C31576259B",
      "txHash": "0x965418b4e42385b1ac5f89da9648b6a0bcc695bade352aed8a696b95820e8486",
      "kind": "uups"
    },
    {
      "address": "0x852C28448399063a0dFeCaBfcbc07d4561c02ce6",
      "txHash": "0x53f1b4b269d79d9cecb979b92b7b9951d1706aa4afec41bedf6d05fdcbec6195",
      "kind": "uups"
    },
    {
      "address": "0xb518Ac8BA092AC34633623798520Ca2cbC11D68F",
      "txHash": "0x362726e4cf426534bda03ea909edc5734eec9e4331bdc316cf33d97cf4339a97",
      "kind": "uups"
    },
    {
      "address": "0x947eA77D49b3B6Eb3B0004E480c98bD0aD739a0c",
      "txHash": "0x9b7dfcd1aca9a9c4db3915a9ae0fa5f258370f17376305b3842d8544f5ad00a7",
      "kind": "uups"
    },
    {
      "address": "0xD964264675C894fFc0Ac254c74968b227a7a31fe",
      "txHash": "0x35c9a296e35ed13cb38c766b94b5c7257b47c0d03ced66c1df7bcd022eb25e9e",
      "kind": "uups"
    },
    {
      "address": "0x39F9b97F39FadC441d87FAdaab1F3cC1Ece059E6",
      "txHash": "0x28f68357c5f24348e6bbf1e9f5c7c67f9aa4d7f05a5f06d82e6670e24a33bc8d",
      "kind": "uups"
    },
    {
      "address": "0x7D1B61442e0A54AD319eD60f054186FaB9280DE2",
      "txHash": "0x4f3267dfa8709b2722865a84e3e4fde2d06ba2a0dfabae8fbe40ab6a288820d8",
      "kind": "uups"
    },
    {
      "address": "0xc73Be343F4bE06d0151EC938CbbfC13fc5EAf153",
      "txHash": "0x0464e755db2d9428de2c3abd586019990bede7aec67aa762992f8be99af595dd",
      "kind": "uups"
    },
    {
      "address": "0x20E2a646fbd7347A4EbE4C0e2A28DEFFcc2BC1F9",
      "txHash": "0x03e89ea16587ebae256dea79e188e4014c06b9b978d0c19c2ec323eeed55ac73",
      "kind": "uups"
    },
    {
      "address": "0x835E34D1B055fC35D8dD0BDdA61C4b53e1E60889",
      "txHash": "0x019365d6a8e3b21b37d2a09c5dda7d1497139b7fdc2e80d4d8f1cb942c61bedf",
      "kind": "uups"
    },
    {
      "address": "0x9bE8b2DdF9D33660314E03710D8A2f4f45e1cFE9",
      "txHash": "0x45773cafdf3d440920a71d351def7080b1dc10b88c7b8548e40ac8e34317ea2f",
      "kind": "uups"
    },
    {
      "address": "0x0C91e65fCA083BE264B1f6a2fBA5E2D126B0AA5a",
      "txHash": "0x282d8d0ee3ea8945d383f06109e50abd9542f01015d962215b96a032c945aaa7",
      "kind": "uups"
    },
    {
      "address": "0x1e02bAf663Db99C9260C669cf553911e382C2CA9",
      "txHash": "0x93a381618c4815a19df7477eb9abfdac96f78370283fc0297eb9e3009877aa7d",
      "kind": "uups"
    },
    {
      "address": "0x57e5ec9c023173121aA3166b4EDD415B09a15F99",
      "txHash": "0x81aad82c5e2ed1172d44a330b128a14826e8a6e202050d708e1fdf5c14725f73",
      "kind": "uups"
    },
    {
      "address": "0xDBB2b53D6Dbe8002715B050570f0A859Ec0a1f91",
      "txHash": "0x71e89cfd59a32e19de27433e1c916e69abedda83d61623f8e2c62da159a3ce11",
      "kind": "uups"
    },
    {
      "address": "0xc9004ecD4cc5beEa93425BFA19FbE38D6f924F92",
      "txHash": "0x7cab724eeb3bd4f9e1620d792ec56c8e623608f121e717b266f53648a77bccb9",
      "kind": "uups"
    },
    {
      "address": "0xE8D75e697474583b4E7fBE107D74C4f5456187Ba",
      "txHash": "0x7a4fa4669bd9c727c7f57b5bb7760edaf457373646e94c9c69b203200dcd6063",
      "kind": "uups"
    },
    {
      "address": "0x0C4688f0867a7D0a0cfa1D419b4939F5c0ad30C8",
      "txHash": "0x48566734d484de116ed76945794b6e08a76018d7826436e961a1ea1d086202f2",
      "kind": "uups"
    },
    {
      "address": "0x1B6A1297b008f28E555BcB4Ed1b53A3A7644709a",
      "txHash": "0x2ea722df845e1ffb14b228cf495c2b71b7499e4866b328a703131d1431603053",
      "kind": "uups"
    },
    {
      "address": "0xA65e3f9daFA410b77447145b842E1E37f7F7B5cD",
      "txHash": "0x70131da7d767b20de1834862b37d62910869c68593f73d45351650e50c924322",
      "kind": "uups"
    },
    {
      "address": "0xDCF071FA20668F3C2e515d22EBb5b2bfBEF87cF3",
      "txHash": "0x636b5dd68b998866fdc6735eccb0e8c9a81a92b64d9688f8acec82231ce97262",
      "kind": "uups"
    },
    {
      "address": "0x839F84E10218Bf498447C320999929D8270702A9",
      "txHash": "0xbf0e95b6e141f90d866e574dd3d9a7422fae2be00ff9087c8457e54c6c825678",
      "kind": "uups"
    },
    {
      "address": "0xA27d2b5f34c1218a433ae81837471342992CE313",
      "txHash": "0x67237401829f755062986726a1e956aa7e718798ea09e99295fbb15e1003c9c5",
      "kind": "uups"
    },
    {
      "address": "0x318f97b614c1d1215CFb94d177140B8b3406A7d3",
      "txHash": "0x06228de292df674b81d647758e7bdbadc8e21a585a4ab81328829d5857faecc7",
      "kind": "uups"
    },
    {
      "address": "0xeB8DCAA09860eD72ED3bd1e2D1B7cDE660c27fdD",
      "txHash": "0x74782b0b6d72a4b5cdd7de8a9ff37eeff4cd953f322592c981554fec3de1d41e",
      "kind": "uups"
    },
    {
      "address": "0x796EE9387cDff8EaD4C58202fA29547A0B9e41CD",
      "txHash": "0x3e4d7c0d41870a5da28f06f6e1043968ec9381def1f7edc41f3a27ea4801d03d",
      "kind": "uups"
    },
    {
      "address": "0xb58fA6AE197f32ad21C72Ac80643622Da01dEBcA",
      "txHash": "0x52a294923265c293d02b6a3571ce6f1cc331e87be3c32b82833860154d738618",
      "kind": "uups"
    },
    {
      "address": "0x6EB4E67FDfB09347dabbcD92Cf36DeAd3323C8a8",
      "txHash": "0xfe90621aca54ea726abd0ce32879bab69b5d483c44e752eba26d0690583d3d0e",
      "kind": "uups"
    },
    {
      "address": "0x432Ba28AA1f573733cE75B437B3B76A4d03B9015",
      "txHash": "0xefc5e26e6a62458ecc6a63923b4f3931f92c5c3160b8a537850170ea969a1331",
      "kind": "uups"
    },
    {
      "address": "0xc6839b501420e327145d9341e53367810287D978",
      "txHash": "0xf959e76df7e5ce72431acfe714d924bf9d7fbecdd9c259d3486362fc52a13bf2",
      "kind": "uups"
    },
    {
      "address": "0x8C31a8B566d635E8626A8a0E47f86AbAA4372cac",
      "txHash": "0x854cd9673a60a4ee3921ca9457301fee4fe998f529ea83515a2bfb0c782582ab",
      "kind": "uups"
    },
    {
      "address": "0x6229d73125875fbE83fDe461af9F5c3C8a2E8Ac9",
      "txHash": "0x6638feb672c12e07352a47e9f3bca935ddbaa4d428f4a27aa941e7b77aac6177",
      "kind": "uups"
    },
    {
      "address": "0x7105DD63586727763420e4eFac70aaB73723676A",
      "txHash": "0x1748fd96b806274c1775c7d9f630072c34b10b9d7a0aa4653830a027b4894891",
      "kind": "uups"
    },
    {
      "address": "0xAa588d3737B611baFD7bD713445b314BD453a5C8",
      "txHash": "0xf89dc6027ee11dc6cc06157e4ef25f651e6df97b0e2266e3f9058a37af7c57fd",
      "kind": "uups"
    },
    {
      "address": "0xdDA6327139485221633A1FcD65f4aC932E60A2e1",
      "txHash": "0x96b989638616b0db0d6f55eb12a6cfe2eeed2563f6a087796bcf6ef44b20284f",
      "kind": "uups"
    },
    {
      "address": "0xEcFcaB0A285d3380E488A39B4BB21e777f8A4EaC",
      "txHash": "0x34d4b2f7bf385d023b6b28cdc6bbb766ba7a923b5cfa1ae31f4e8ec0f2f2ec2e",
      "kind": "uups"
    },
    {
      "address": "0x4e71920b7330515faf5EA0c690f1aD06a85fB60c",
      "txHash": "0x5b9331d745bdb6176789a760fe6e08528b56e2e9ec3bd8f4ad8aecf8794965a9",
      "kind": "uups"
    },
    {
      "address": "0xf32Ea28057f6B423FaE717e0b5866e6a8008f33c",
      "txHash": "0xef1dae4d989e68592a869d681fd05895de41838e9ce0756a6855865320fd5174",
      "kind": "uups"
    },
    {
      "address": "0x910ddEdFA3c002922919a3BA57f521dc1282a15D",
      "txHash": "0x0b6f48b2a751fdbd73400652337de1afddbfa68ede931701cf3c05ad161f933b",
      "kind": "uups"
    },
    {
      "address": "0x593DAB2ab9350a0D34f8C809015A8211122C9d2A",
      "txHash": "0x7d87965f7e5afb02d52ae9ec7d531a7333fc53a2ed6419b102dc45885bfee291",
      "kind": "uups"
    },
    {
      "address": "0x0f1cBF4B67E8259b675Cb66bf6a7DfBcFDAC97d9",
      "txHash": "0x0714495c540a1e2df56047fb258e7ec01d9401cef00df3475bac136fd9e63ebe",
      "kind": "uups"
    },
    {
      "address": "0xc65B0a8b5C1A6491e0a64A8970D0f1FBcBd69E99",
      "txHash": "0x4008f936e8b3ea0122958acc3f418720781851d4978aa835c701e93eabaf76a6",
      "kind": "uups"
    },
    {
      "address": "0xeB0efE19Ab437044887f44F1300CA860cFd63e22",
      "txHash": "0x67622763c4cfdf633a085c0391befec5a1900ebfcd6c87747089b87688e1bff4",
      "kind": "uups"
    },
    {
      "address": "0x6171971f1529D03B2cA891d9363577ad96fB153c",
      "txHash": "0x6a8dafa441bd5dcd1b575b8a3e693508c42ffa0aeb9a3558c9c389df0c1c50e6",
      "kind": "uups"
    },
    {
      "address": "0x306db3cB55c84bd6C82ac76524d6CC4E33ecd006",
      "txHash": "0x3a80cd5b4ff8a3789f8159ec759fe56fbb33eb9409aac2957e9377823d4313d1",
      "kind": "uups"
    },
    {
      "address": "0xdBB7f0E14E18F37021930e55b286cce6f32763C3",
      "txHash": "0x6adf1d96fd68dd174e8b8dd91bc8e0516a9b09ab7517f3a5e92e3e2dff3fd256",
      "kind": "uups"
    },
    {
      "address": "0xf25186B5081Ff5cE73482AD761DB0eB0d25abfBF",
      "txHash": "0x223cb97db456e6dd43f630bf8cc5e7af6d92c9a63b7e7322b35ff43ee9a8d777",
      "kind": "uups"
    },
    {
      "address": "0x2C2B9C9a4a25e24B174f26114e8926a9f2128FE4",
      "txHash": "0xcbd8f3a902d838170d6e4cf48b149280b44ea5005ef04ce3ae47f822a8f42685",
      "kind": "uups"
    },
    {
      "address": "0xf4D5E48E07f829958Fe330Cc43757131222C1E3d",
      "txHash": "0x41c0bc5462fbded5a3f581fc43b64fcaae3b59cdbff9a5a1bc99850c3bf438e6",
      "kind": "uups"
    },
    {
      "address": "0x513217E7c2E24C417B14263F3d85AbBDDE75E68C",
      "txHash": "0x05dcf5a5cad83b9e802453d3cf85b8a37561bebff05ba22b4dea5f9882dcfd46",
      "kind": "uups"
    },
    {
      "address": "0xd987c27CD87876332357E287f66EFE22f803bb45",
      "txHash": "0x709a3b21c015ce81023bb0c14d167e7207024254b3ecc8c3b56f1ece16e9887d",
      "kind": "uups"
    },
    {
      "address": "0x46418f40202bB0F15f706318bd743875971d672b",
      "txHash": "0x1dfa656f0720633af51b2f7fe7a7f674081fef076fd3e3141e2a8e33bd40646e",
      "kind": "uups"
    },
    {
      "address": "0xBbC9F4E2e44af5D3142ecAb6453D7C5692256C53",
      "txHash": "0xfcef5c8a56745c845be658b55bc255a58ebe317e5c07b2a63aff1004160076e7",
      "kind": "uups"
    },
    {
      "address": "0x30BD2644974B6EEE94dA5b46421303Fed7F58660",
      "txHash": "0x87f4e64192502d58fff786e6e5ed0ad7c2a36706258da1a70796f4627945356a",
      "kind": "uups"
    },
    {
      "address": "0xeCe2999E2625ffD2F9646b64422047097A5339cC",
      "txHash": "0x888b0c3e6cf51606ff5e9f78c650ca2c87932241ec29946dffead1b160b026ec",
      "kind": "uups"
    },
    {
      "address": "0x74EB1AdebFe25bDF8c2C533F6F55266D322bDA80",
      "txHash": "0x16179765234a0abc883e1c20a82b098353183cf67825843f502cab9223a8a51b",
      "kind": "uups"
    },
    {
      "address": "0xfEf37fB4e2c72939FBEC7760F5a4DEcC9c57953e",
      "txHash": "0x744b4d8ec8c1b86a29fd58204c97930d1b1964331bcbd4e8bdbf689975460e5d",
      "kind": "uups"
    },
    {
      "address": "0x58D207B5e1a7E5B9FD850172410775a0c7C41229",
      "txHash": "0x043542928d485c483e6c66ce6415da3874fb356cd88fda7fe1db1982f823bd75",
      "kind": "uups"
    },
    {
      "address": "0x9f49176F534392e0743fE8286626dF2C02b822dE",
      "txHash": "0xf658daad29054da91f8dd516e5dcd32f90c9acfce000686e5dc6a1952db68def",
      "kind": "uups"
    },
    {
      "address": "0x93266D014751F3E59BEbd4e825052E7e82c26b50",
      "txHash": "0xd7679d869a61ccddba24ff5955c0032977064995bfe432b2d82916814668fde8",
      "kind": "uups"
    },
    {
      "address": "0x609D914dECcAc60f82426961FCDa80B435fac47B",
      "txHash": "0xff0eac01f5c3f0c7c656f09ac25f72282281c1c08946eb0626cba0add2319c02",
      "kind": "uups"
    },
    {
      "address": "0xeb15ac8b96dd6DDCcf6debb46A71AF177880deb9",
      "txHash": "0x321d827adec7128dbfc3821e68f2c11f36899ece46fd82c33df03118ce6cf684",
      "kind": "uups"
    },
    {
      "address": "0xF5BAD36b60f7E356321Cb069729fca7B4f93A41B",
      "txHash": "0x8cc025153616726d9f9e44dd4189e1ebd90ceddfe5bd182c9241a2624792a1f4",
      "kind": "uups"
    },
    {
      "address": "0xacCd0Cd3Ec09f26B0654Cd73A4fDE77dFB83eAD3",
      "txHash": "0x45e462d6d06c4361449edfe3515d79a35fe84cb87508ba75db37a01da001a5ec",
      "kind": "uups"
    },
    {
      "address": "0x785407fb27d6d8359d7B6A5E248945E935e8478c",
      "txHash": "0x34c801077ef54ddb4438b61d1b032dc09a7f20329345e8cf276992e89860092f",
      "kind": "uups"
    },
    {
      "address": "0xa62Dbc634842eD2315C25b2Ee4312C1361787FD5",
      "txHash": "0xa5da44e2cb392e534238f11294b106c1f3ab51ee67c66e7882bb7c9cd95e35a2",
      "kind": "uups"
    },
    {
      "address": "0x51EbE8Ef8ac2B0CACE5b7b3a5b3c9Ff020651426",
      "txHash": "0x3821f58ec11359e9b5f77ae70688b5e88154e16fd76197f9e1a2e8f9457227b9",
      "kind": "uups"
    },
    {
      "address": "0x1ddBa5D6166940fCb3B33A93A16D04831903D39F",
      "txHash": "0x6b74fa435268bcb4ddc36e1b70a8014219920290b9ad803b62131048344b6912",
      "kind": "uups"
    },
    {
      "address": "0xb79300384F0766Cc162A90E3662f9A2f4eC340A6",
      "txHash": "0x08853db6f72d7edcc5c51a7459de29d60219ead7416502f43558b7ec8e242b5f",
      "kind": "uups"
    },
    {
      "address": "0x7F65D05BAF558f7D3A903383be38E309e3bd34Fc",
      "txHash": "0xaeab153046d8a66537353c711ebb920ae794019031a23d823ae5d4eec6558851",
      "kind": "uups"
    },
    {
      "address": "0xE9E151fA8f320C366d82F165c04C0De45e73Eb0e",
      "txHash": "0x4bbc8b5cdf1a78b189d5e53755613fe02435ec31c7d403f15b7b453e079556ca",
      "kind": "uups"
    },
    {
      "address": "0x4Fdd6683261F1E4c80d8476952DAca060E8D9B74",
      "txHash": "0x96adba37c5e70a248bad51a004626e90544b787f9b05c2fba44b720ca55ab38a",
      "kind": "uups"
    },
    {
      "address": "0x54e577a4e86a817A8Ceca3710f2De5eC15f509FB",
      "txHash": "0x92b4432a8b6a9fbd2a2e276545c300fb1e4d79c1b750b1734c6cded0bbb26581",
      "kind": "uups"
    },
    {
      "address": "0x605F2f49935CfA548B8989446263863ddd0b2c5f",
      "txHash": "0x7d4b522e1d2565f180c09b56ef6db9c617ab3473baa03abd8b54a81ce14fd2bf",
      "kind": "uups"
    },
    {
      "address": "0x69A92f31C5b8877778f884E83e5d0B58bA3CcE6d",
      "txHash": "0x7f709e2cdfd01209889c0b9834578555b6b55ee1de2038df2e90aaf338e3b44e",
      "kind": "uups"
    },
    {
      "address": "0x0B851Db98E06c2325E3b14B970Ea7d3d85Dd239b",
      "txHash": "0x35da9c046a114f236b67e323a3f498cd534bfaedc694bd409e7fda5c407bb834",
      "kind": "uups"
    },
    {
      "address": "0x0912c1Ce24280B4eB51E15875dE73Ce4000079b4",
      "txHash": "0x0489daf6e394649bb8ccc2614fb45e291f7c0923d87b703b76f407b88181ec69",
      "kind": "uups"
    },
    {
      "address": "0xD03C6FB9AEc5FBC75C4A4dF25B1417F729816D76",
      "txHash": "0x328e4cbca8cd1f4c8f99d3d29ca3ccd1dab04868b9212342f29f287653430b39",
      "kind": "uups"
    },
    {
      "address": "0x88778C41b6A7332B34D7b084C7738851f76fed51",
      "txHash": "0x864b0265b684767fd8729bc2f24a72378d99c73359be54ccb896fbee90f39ed7",
      "kind": "uups"
    },
    {
      "address": "0xABcBB0aE0b2048BAB38Bfca7c095716Ad6C0f882",
      "txHash": "0x6ad2f1afd5bc841a6fdb1e4a94f9adfa20eb6140d5f3168b3f4aba84d5bd45ec",
      "kind": "uups"
    },
    {
      "address": "0xFdBAc436714c9905F11E1B97B9839aFd3B798bF9",
      "txHash": "0x10fd2f5742bc7bf96349d8b2bff50471de65dae6142e69c8fec5657c43c4fb87",
      "kind": "uups"
    },
    {
      "address": "0xDbC5ecb242dbF22cE637694864d7DD655f034303",
      "txHash": "0x46eb6b83a4ef73d188d27a1527e129eaa246d35d5477e4efb0dd11959291caa0",
      "kind": "uups"
    },
    {
      "address": "0xA97d84A87f7A2633C556aCAE9fC1923A0eC8712B",
      "txHash": "0x0a1f93c1f09bb1cccf5e9363574ae4aaed87f8ef9d2bf7207dba10c394325675",
      "kind": "uups"
    },
    {
      "address": "0x11FdD6042CA03c17d84acddd38B64F73c5A5BB18",
      "txHash": "0x9df2674e089dbd91e70c5b51f9ad221bb01d0248e45881ab667766c04472af74",
      "kind": "uups"
    },
    {
      "address": "0x342C139BE7ec09e17246CfFa8CBc21F8CAdc995e",
      "txHash": "0x32c350ecc474e7572dd215d3472246a95f1c004aee026ede707cfdc2b40902b7",
      "kind": "uups"
    },
    {
      "address": "0xdCcC03d96C16B8876Fa3048A764B1782eF0080c7",
      "txHash": "0x7a682afd0b91242a87c1fcb71e50654ef5ad5da512cb7fd27dfef6ea225f8d85",
      "kind": "uups"
    },
    {
      "address": "0xE7E5d679eB1462977c465f3Ba2ED04cD2b301272",
      "txHash": "0xdbe7f7e37b3bda8c753f89b655379c31995914e63559f80d75ec760f3db91c38",
      "kind": "uups"
    },
    {
      "address": "0x16c06bB3D71165e9D7260FD4805d07f60BAbF9c3",
      "txHash": "0x66620d6cc40e8d09d27801c586bdbabbef5171c4b4132cf879077782e243b8f1",
      "kind": "uups"
    },
    {
      "address": "0x2E1837F4E925598D00B5225Eb6cC1F17b67071e8",
      "txHash": "0x455b8aaeb5b5e0f1ba416a743aeb0f4c64b945417efcec97c8c7db8016f3f3a3",
      "kind": "uups"
    },
    {
      "address": "0x9bB765C490e4e97d0bd497832D2AC3B1E8Ef6477",
      "txHash": "0xbe037ea83987caf62fc042f59769297fef8704a97f5f8282e01172197d4458a3",
      "kind": "uups"
    },
    {
      "address": "0x9662441ca20cF39C4233D79a8355799350d28e5c",
      "txHash": "0x19d60036c70df5bd62262ca557183d8b178678faaf9d07c4ac818d2bea996181",
      "kind": "uups"
    },
    {
      "address": "0xD25a8bb20EcfBaB664EEaF48053B158eFEDDF827",
      "txHash": "0xc18f174e1da4c85d9b0a6c07f0da67b68966d897fa60827a167429e265ae49d5",
      "kind": "uups"
    },
    {
      "address": "0x3fF1643323C7057543ce67b27Bca757c2a2B41FF",
      "txHash": "0x78f66d968bf39280764e8fbb7846c21ed5df099e4e122ea7023d3a13adfd7b98",
      "kind": "uups"
    },
    {
      "address": "0x1D0B4BC5F6730Ac3f41C6450D23Ba9E2154D13Df",
      "txHash": "0x00835e2a060f198a1d2a3373a250a5f4887786c3310b4ebfcbb0344c60d9fba6",
      "kind": "uups"
    },
    {
      "address": "0xC5693a990B27654c3C5b2113080E3fAc7dEc5eCe",
      "txHash": "0x48f3861cd90e0bc28dd231233ad0cc6f08619d0909a25e75e0a13e07c343854f",
      "kind": "uups"
    },
    {
      "address": "0x8Ca2Dce396db5F47213CD2576C1fF7C039456371",
      "txHash": "0xf7ad41dcc7c8d4223c6b78fd07e725a42f3effecec6f13d873ea09808d0f64f2",
      "kind": "uups"
    },
    {
      "address": "0x65F976A6C63376e1ea025b12c89b38d1E2A221Db",
      "txHash": "0x107e507a2475270700be88afa3c6f84cb22754e6c34e57d58a40702fa4de6e07",
      "kind": "uups"
    },
    {
      "address": "0xFF947834B36a5986f1763C58961E45CB028106d5",
      "txHash": "0xe9a065e7344ac851522bd3257855c49a4e2b16bdfd839fc73c8a354dcc9164a3",
      "kind": "uups"
    },
    {
      "address": "0x5B89294D77C6ED73f01c6a761FDa28b62AF41F68",
      "txHash": "0x1cedbe0c367ce4e82fb80914fa9d121886167a07f8ba56d329e25c80e44de7d3",
      "kind": "uups"
    },
    {
      "address": "0x7C4a0a8aD65C3923C499b4B46af19327a545562a",
      "txHash": "0xada94cc22e4ec99bd145583e51791afe8e51c90f4801cbf5945849d3719a5e10",
      "kind": "uups"
    },
    {
      "address": "0xF3a47B70a2f15a901821Ec79F91955680B33CC05",
      "txHash": "0x4d04e34a82c875372a7a36ed342c39146a4adc2c229b77d3899633ea4b641735",
      "kind": "uups"
    },
    {
      "address": "0x46fb8b92C97B2731Df3a78951695D81fbad2d4Db",
      "txHash": "0xbbd3c4a80e0d7fc875a4ea361ed73def4b819d11baf7a4ba4ba1cbe1af5cae26",
      "kind": "uups"
    },
    {
      "address": "0x561454780ba686341d76d2373929A081B4E5E473",
      "txHash": "0xfbc9c79e135912087a7acea05c03a4d2ac7eff93edb93091beb94d8d1e443318",
      "kind": "uups"
    },
    {
      "address": "0x04Eb542D06d722Ee24938726f87f1eB1c2513Bbf",
      "txHash": "0x406ddf41b8a67b2d1323d81c9be683c13f7036cfd76da7cd4ca561b70c9a02f7",
      "kind": "uups"
    },
    {
      "address": "0xbFf1F102C376954b6bfeD99fAC2D811a8A3175B7",
      "txHash": "0x936105f616d8162c5820560ba8d4873470ef97ff75a68ef70b0233c024618d76",
      "kind": "uups"
    },
    {
      "address": "0xE0C0526e9470A75771F5bC7048b706bf85D5b6bf",
      "txHash": "0x0a17ec9ef28408a57e7d96d44c944c03a06b3536d41324160edf82c4ff8ae973",
      "kind": "uups"
    },
    {
      "address": "0xD60Ec472aa38A062A13789F628835eb58E51b924",
      "txHash": "0x0051c4f751dff9e344455c5c03e850d047e10a873f5cea8ee9b0264219dc6650",
      "kind": "uups"
    },
    {
      "address": "0x9Dc141903922A79791163D73c820562F00955Eb2",
      "txHash": "0xa63bc945ce2f3956db07b31ccba296810835ad99b43fa33cbf94896495b117ca",
      "kind": "uups"
    },
    {
      "address": "0xA72069F72Da2a964CA11b9e59b532736c6f66561",
      "txHash": "0x31907092fe15d967a2fb8468cae7d2c890b7181ebc417da6f3562cf572cab497",
      "kind": "uups"
    },
    {
      "address": "0xAa31CB82FD7Db35E2E1559Ec645db55f9B12E06A",
      "txHash": "0xe52a92fcb1ec4c6bfcea785decef5eb16bfd909ebb4223d96ea8fd35ce32d410",
      "kind": "uups"
    },
    {
      "address": "0xDa61e7C861C08Ef32577eae73580D2837129119f",
      "txHash": "0xda60989dac13d7d74311439506c7f49196f073a81aa613bbc18eb51360be42e5",
      "kind": "uups"
    },
    {
      "address": "0x41F1f50030055Ab4e5e9F8EA4d618CDf832800bc",
      "txHash": "0x0c706b56288a9039cda21bf3741f9b77d1b37b8c56bc51daf9fea346654f32ff",
      "kind": "uups"
    },
    {
      "address": "0x82D708da5A8Fe2e9D63ec1276bd23127cC162256",
      "txHash": "0x8af84691f9a0adc2b9e609a64c869f2dc7ed21dd21e99a8e9398b83172746aba",
      "kind": "uups"
    },
    {
      "address": "0x173843282Db1f8782a7c622Cb3a681e9634B8217",
      "txHash": "0x39af432b05a80fa31cb94650a82290bc30650bf69c3c3f75367938e7002a1156",
      "kind": "uups"
    },
    {
      "address": "0x157603f307CD769eE03C8E24b96261D5F55257FF",
      "txHash": "0x5339236e4083868998e284d28b23b4d627dd4224335f70232d4dfa47183ecf03",
      "kind": "uups"
    },
    {
      "address": "0x2D2c3eca03F31821FD4d11A081c27655875867d4",
      "txHash": "0x53ce26617d3f5b4f1a21911300eca6b73f282a9e4a2710672ffffe82b7587609",
      "kind": "uups"
    },
    {
      "address": "0xa10044a6684D7580b860F883DdE1ef2EDABb9C5A",
      "txHash": "0xd1eadcc39e2f6fa4efbdd6cc347d7e5317545cd29ae38052ab058ae7f849c74d",
      "kind": "uups"
    },
    {
      "address": "0x468489265A5D929ea74bD8EEeBdb4bD1F5026F03",
      "txHash": "0x83104eb248e31317451cb86349c5731efdd546063865ab8eecfa7837bb2cdb24",
      "kind": "uups"
    },
    {
      "address": "0x72da9AaD9c16940eCE4b0b8B788e46a20b943aab",
      "txHash": "0x80cf9c564f033c77e885d8a925362a543c6867e454eb9f0433bb73a19084b7dd",
      "kind": "uups"
    },
    {
      "address": "0x3e28A43BFA8Ac567C8dB7E3cE3bC443D8673FBA6",
      "txHash": "0xef99463b539746f626ac33b146a34887c012fce64f026eeb2670795efe5eb314",
      "kind": "uups"
    },
    {
      "address": "0x42054fdBab6A54Fca36d99e32268f220666dB0DE",
      "txHash": "0x5f154026b4b6c15fd341ba26047002cacb70e1f2dc8b4344cc6bc64d35365569",
      "kind": "uups"
    },
    {
      "address": "0x071135793A7090a3d26aCA450A51e7a405e9271b",
      "txHash": "0x64e4e0052042b487f5ac6ba03dc22779474e0679c7a953a8fbc7295e57a6ec37",
      "kind": "uups"
    },
    {
      "address": "0xA7Aa4bA6E02b8a308A845128532c3ab58A87BdBC",
      "txHash": "0xbe9e1479d6412a99d0c786095daa7f59251e4b84b902300e2c3fba3b51e3add3",
      "kind": "uups"
    },
    {
      "address": "0x7acA0Bc2770c900489D0cdAA5b79cd173344B0B5",
      "txHash": "0xbed5cc247f762f351b71b0982ed12a46f54e13452e8ad9eef1722d7488d417b4",
      "kind": "uups"
    },
    {
      "address": "0xeC13490d2D0D33E536F9e2a157De1B9c756FCEB6",
      "txHash": "0x04bf03ff85893d1378cd1205b08d0ff1af91bc8a1eca4dfbd40d71d984ae8b81",
      "kind": "uups"
    },
    {
      "address": "0x28a6bB3a3eBe200673f98300d99997815e13bB6a",
      "txHash": "0xe984f2dc6400d4fd906a3c8119f976a674d314ded725baf9ed59ddcf5613dc06",
      "kind": "uups"
    },
    {
      "address": "0x130696b29b5E03Df2990e657e2DE57ab0e51f03D",
      "txHash": "0xe1bd09e98e6b79ba86e60b1ab786403fc2caf5386b772e336e9deaf68937828f",
      "kind": "uups"
    },
    {
      "address": "0x376376b8D2409719FDb3e8c02416B33B81909c54",
      "txHash": "0xce447e73703a84b4772e690685c1efdfe4419b36217625c7dbbc25356f663080",
      "kind": "uups"
    },
    {
      "address": "0xe4d876F0a3b6d4B1405D71253168Ce50aA2d6F63",
      "txHash": "0xacf4a29bf688bfdff111c5db253d40c85a797da91bd7744307b709f5ffc96927",
      "kind": "uups"
    },
    {
      "address": "0xF7A5b10F707ceD80A40266892cDFaf1DEfC924C2",
      "txHash": "0x780584a1de8869ba8c79181f7e32ad7e88560be6a9b97084846b3efdeb89568e",
      "kind": "uups"
    },
    {
      "address": "0xdEA31Cf7526e6b9CC68E9c3e48250b6e5e64fe28",
      "txHash": "0xb00517c4edb9d2ac0aa4f149a7aa6eb067b32a5572db2bd37c83cf864ff40e44",
      "kind": "uups"
    },
    {
      "address": "0x46F89354EC5e0c6148C5687c19AD0496Ec5e1b83",
      "txHash": "0xdee6b1b3970ac60f27a39ca592fa0b088a45534fa2ea568d91d0313f4fb480c2",
      "kind": "uups"
    },
    {
      "address": "0x27C38bca3b37b55fda9F304d174EC865DeBE1a6f",
      "txHash": "0xa9b7dc3f1d8317fce7fbf8a85ad28520001123bc1ef91a592e7b0ce57259700c",
      "kind": "uups"
    },
    {
      "address": "0x06A4ed547C1A3438f998aE042613196112400be7",
      "txHash": "0xdec3fbd62edcbe10452702ba18f9a93ae95d181565ae80ce9aed31bd3aeff6d1",
      "kind": "uups"
    },
    {
      "address": "0x38E5BBdE52Dfa3b33f3e3DE8e9e6aeFCE4eCEdc2",
      "txHash": "0x263d8ad11fa680481f2ee2ae8dab3a0e88314e3a9952848f3e55c2237de3b72c",
      "kind": "uups"
    },
    {
      "address": "0xef03bF83440603927355A3e8679ffBde5b8fBCd2",
      "txHash": "0x11acc7c3066b7402b8a11bbbae0d9458e6fd802bf4358458cebb57c49905b375",
      "kind": "uups"
    },
    {
      "address": "0x70056936b361dBB7dF8dC4e443B20D18eF445B73",
      "txHash": "0x7e0abcf16959c9972decc8e0eab6907d438ea06d0f2a104c91943569fa4110a4",
      "kind": "uups"
    },
    {
      "address": "0xcC0667C51C60c74Ede9Cb55e32656D1D9d9469F5",
      "txHash": "0xee28bb690b3434bd5f16e7445029601ef7a63efb8a560ab681c99ce02b5229a0",
      "kind": "uups"
    },
    {
      "address": "0x01f86aB00Be9d43a3BCcceAC9690d6d07626c8CA",
      "txHash": "0x3e4d15ca391fb1142ba8c43a12d1036debea681053741756f03a190c2d04141a",
      "kind": "uups"
    },
    {
      "address": "0x4e832C9cc26f19cc28334f3372d6496bE23bb586",
      "txHash": "0x3e9efb567b50ea7ab0abaf3b77ab8c0e7d83fa5aa22881b70d5506fb0d4f6f7d",
      "kind": "uups"
    },
    {
      "address": "0xc4616DdBBF6d53238CaCEF94A4A0fc058AAbFaB4",
      "txHash": "0xbf39c166f137e959dc36c66ba9442b0788daf71a4102f8afa693d04e0e1e4f64",
      "kind": "uups"
    },
    {
      "address": "0xDA8ed01e4295B663D71E532b18739885e30afD1f",
      "txHash": "0xfc2fa69698d71e1e9ab17454316651f505cd2c10f804fce6088e10f34d75fa1a",
      "kind": "uups"
    },
    {
      "address": "0x31A4d7a8213d4F2BF01bC1B7A24eF89cF032e9c6",
      "txHash": "0x08b7956b2d0280bd42b6081a5d45b0c2f13bb3c8eecde1f32dbb1e6ad9b905b9",
      "kind": "uups"
    },
    {
      "address": "0xe52559C0FbD04925629bd0096d7781aACC26C7f7",
      "txHash": "0xaa576ad2d3062d79f6e6ad6d67e559aa05c8219cb67b9a2e794863ff47492739",
      "kind": "uups"
    },
    {
      "address": "0x4814597ADC5486da0fB0cD8F3A81946f70269FCC",
      "txHash": "0xfd34421ceee83de20c2cd8e57964db21654f57564a3244f21ee62fea48c0d53d",
      "kind": "uups"
    },
    {
      "address": "0xA33bB40ebAa1C001E982C9604502f7256147164C",
      "txHash": "0x8f82b20dcf0848c7ea469bae91889dddcb5793d20bc8a98bb867d9abf8c5136e",
      "kind": "uups"
    },
    {
      "address": "0x14BCF48Fbe86De2b7991e3bc209Ec844D80F6D85",
      "txHash": "0xd0e34c540e3fa326192d2eed4220274aab6b2f16367f993c297bc257fa81ab19",
      "kind": "uups"
    },
    {
      "address": "0xF676dF7C04762A07bA0D7A1c388FE65220180301",
      "txHash": "0x0f95b53f79ae521799a87faa3d6b20d6a9b9bb45c76d3916652c5b8d4425eff4",
      "kind": "uups"
    },
    {
      "address": "0xd2DAe43a1E3119512C8FE905F2d474D62ef33294",
      "txHash": "0xe920b96e912e3d9df0db5cbb43f36d45fa0fb5a208038de635cb4e4d6b1dd8b1",
      "kind": "uups"
    },
    {
      "address": "0xfB69ae6130570b18D1e1F680601F55ECd3E239f0",
      "txHash": "0x43d4c61d5cfc5cf52e834a1f5aebc2d3498ee053c2abeb88ae1d43fb76452062",
      "kind": "uups"
    },
    {
      "address": "0x9d2A61B145a5eF805E7aB852bF438D2a0e20855c",
      "txHash": "0xda597923a74217824702a93b15b340c4d41e01e31dc162ca2a3f9bbb7ccffc29",
      "kind": "uups"
    },
    {
      "address": "0x6bc729809f9778D71520d68B7476D48fCB1972f7",
      "txHash": "0x8c3a223bad288eb170bd95c8555942525588cb1493b974e8b92cd0d2245c9dd9",
      "kind": "uups"
    },
    {
      "address": "0x57613E8aF6958A18221eD2ca72Fe1F9f52f3200a",
      "txHash": "0x18f1fdd3b201f810cdde68cb22ea82f78039237eb872d20fdb7d31e243ce97f1",
      "kind": "uups"
    },
    {
      "address": "0xd6560387243dd1599F9F1f0bBF05e7ED4a89dCC1",
      "txHash": "0x2e7719173c1ebeb49d86e98243f5471a70cfcd6061983f471fd53bceb66b60bc",
      "kind": "uups"
    },
    {
      "address": "0x82dac3daE19629A4e5Fe38ff4f85F5D5EAa6f326",
      "txHash": "0x4b1b4d7bce83491e9a0b922dd5602820f701aa67566ff9212ed7ffc1286110b8",
      "kind": "uups"
    },
    {
      "address": "0x0860139c23d7965F945546d79Df5aa3D1259Ae19",
      "txHash": "0x0aeb25794b01ac3e2694bb48cf23088da5adce5ddcd32f299554df51be1f590b",
      "kind": "uups"
    },
    {
      "address": "0x8723Ed56bB0b00ebEFE87E6c05787D9d56c54A72",
      "txHash": "0x33b32fa5cb476155b8bab386bfe76df490d0393f3514690bcbb6dc04997673ad",
      "kind": "uups"
    },
    {
      "address": "0x660be7FD4F7CbF9fbF22D864b8D6C0a21703A06f",
      "txHash": "0x0e2b67c3c7c3a6168c1c3bf7bf82e445ed4d4c001ef5ee2f4dcf14818e06e3d8",
      "kind": "uups"
    },
    {
      "address": "0x4c651f62de9F6dEAbB25530C7845C8f5f5e5F75c",
      "txHash": "0x3f11206f63e4a026e297996dd8e9d16ff632b01073614d5780b943b52428f3b9",
      "kind": "uups"
    },
    {
      "address": "0xD8f78Beb4c50572Ab1DB7CFbbABa261927d815d7",
      "txHash": "0xf0aadc9c45dec79c0729ccb7ffbe1b40a1cff45a386e0d3f127f4f9d63d325fa",
      "kind": "uups"
    },
    {
      "address": "0xBBfd38F7671edA9290c0e414fd0E4Ea433175697",
      "txHash": "0x5adabbe5a9896bf772fbb1c528286cc51403e3f23a0e1b8460fb52054aa4c9c9",
      "kind": "uups"
    },
    {
      "address": "0xbd1c6F7E91b8471eb9f160be7335658d274458e3",
      "txHash": "0x4523025f07abe0c71760c97defb0f5a51e68c03caef04c88af2ea07d4b92ffd7",
      "kind": "uups"
    },
    {
      "address": "0x8Ce8ccCe6cA9C1628957B4fba56dC659Ebd5e79e",
      "txHash": "0xece70c14ff6ff03f00224792f2147c98ca9ca9f5cc1428ed27de4db4355d68c3",
      "kind": "uups"
    },
    {
      "address": "0xE7a5C41C1FF44A4C56d7245e0984FC49a52A7405",
      "txHash": "0xc10a3f7f3fd861b0943ce023c56be60a31901cc40d8a660735d04d60955c5ecd",
      "kind": "uups"
    },
    {
      "address": "0x95C8fF96698ae1F8D332E7cB5a58c98A4926785f",
      "txHash": "0x1d48d4456942875d5a99aabd2cc919a309267d6228498a91dd6f306ee81e1cc6",
      "kind": "uups"
    },
    {
      "address": "0x057C5b1b1c4C683161451a0198B077fEFB2AF022",
      "txHash": "0x8399771e25e19e514ec62918c7a4aa3cb43c4c929ae3532b92ce8f5480d747f9",
      "kind": "uups"
    },
    {
      "address": "0x5278920EECa621ACBf090EB84b82726C42232c44",
      "txHash": "0x2b102e7422295f6dca0d66d2f316876c64b2b3f771230ae07c48ee0ad4c50b00",
      "kind": "uups"
    },
    {
      "address": "0x5ECa68bD70739BBf1b992912cebBFfAB3b5EE306",
      "txHash": "0x4194a66a69e0f3aa9e5524de8d7fccb6f1c91be9bfe015d93aa55bb6e715017c",
      "kind": "uups"
    },
    {
      "address": "0xCC34687ceb28735979845e72BD97194cB70a5794",
      "txHash": "0x2c1a1b390807a37b9ea705684bf6da1d4b8d70e99bee2c45b0d98dd986d77c1c",
      "kind": "uups"
    },
    {
      "address": "0xfd224F8cF72d73cb13D1e33600850035F7dAC11d",
      "txHash": "0x022867634cdac3824811c66b490e285e53e5e480d8169b4c9d991e898b7ef419",
      "kind": "uups"
    },
    {
      "address": "0xe786ae18415701de9250989d85E1635476009f1d",
      "txHash": "0x25fce7bfa8da7a0003ae973952a4de01790b005b0b71e4b5b1307fd40d3268fe",
      "kind": "uups"
    },
    {
      "address": "0xfe1B67c73eb64e5E6FBA4210D7edC3d651C6636F",
      "txHash": "0x54c77f95800d80f8fd9ac0388c7990c567f0a0ff7bbbe6eeef2b7fe8bba6bfde",
      "kind": "uups"
    },
    {
      "address": "0x86FEbd3e9D1aDd279f35CD1a25c907907569a69D",
      "txHash": "0xd857ea1cfd7913968e56fdf8ff9cb32af590514e5e438916ea13494e696fbbfb",
      "kind": "uups"
    },
    {
      "address": "0x26Ab2Ad13e63D6Fc5A973bC7f2e93C981a6015e8",
      "txHash": "0xa0a2d0ab38f3cc65ea8f7189438a3ed4714de4c4c441e3030c557b818faee4c5",
      "kind": "uups"
    },
    {
      "address": "0xFf38b768d043Df5B1e9D0a68a4F9a82CD3999537",
      "txHash": "0x70e4b43fa2f8d652c5cdbf9d2ec2e7cf3578637e351d34cdb9af3d9f9ce4a227",
      "kind": "uups"
    },
    {
      "address": "0xac52091aE886781Aaa7d8b04852ab0CE4B1815Fb",
      "txHash": "0xfe5c5d7702559bda1576f11583d6a57bf3603a9640e79b826e5cebf099ac035f",
      "kind": "uups"
    },
    {
      "address": "0x08a2f94Acc4Da384467eBe7AC477043452e29476",
      "txHash": "0x5e3632f2b1fcc7c4e5f254aecb60feeb6a2f4c0867e3980bbe2432c9af2fa41b",
      "kind": "uups"
    },
    {
      "address": "0x11710c4cDc3c501Cdc70181abB7a81E448DB419C",
      "txHash": "0x703d2217f5ff9be5b9292d5fc599708b640427b87208a23c28c3d1516dbe7ba6",
      "kind": "uups"
    },
    {
      "address": "0xC193a94D6486Aa42D727A5b24c642323F6029A90",
      "txHash": "0xf041b5935e0c6b90b94c9c114337898250e7451a9080011e85642d64ecea6b86",
      "kind": "uups"
    },
    {
      "address": "0x229E91a800B1E8c9B7e8e8b52F2E881a0b6e0B0e",
      "txHash": "0x59e8fa615a6fd8c23c40810785d34de1cbadb6f7e89458e66a482a1e1a135a34",
      "kind": "uups"
    },
    {
      "address": "0xb4A3C6901ea4F09dd37f183ca3B06b5BEDDc057B",
      "txHash": "0xc40a940b1ab221802ca8600ef63380340c1ca228d45261b232ef740800b5f106",
      "kind": "uups"
    },
    {
      "address": "0xCd32c21C4dA1a5373CBdF85871D8a8bA39314812",
      "txHash": "0x71f7471274df22bb57033d04ce2c31f210f2ce27de22479b951299e278e39661",
      "kind": "uups"
    },
    {
      "address": "0x08194ACDbf09d7CEC442E44806a0aFd38f0D82fA",
      "txHash": "0xd1fb0258baf729193bc3be79abdbac7db206c46525e86f3fc111ad80bb773765",
      "kind": "uups"
    },
    {
      "address": "0x6Bf4A3f2E9538e3D6D9315d2245f337484Db7D9a",
      "txHash": "0x3641f82004f5951ff94cce6b74ef3c45f3c2c53e80c0add99d689ab0aed9bd93",
      "kind": "uups"
    },
    {
      "address": "0x33732BB73949138dC44A36d36D67Ac0B91851934",
      "txHash": "0x9c986980c2d9aba17259e69fa532ff9e25cd9af0d889626a8d3e9ef39497c367",
      "kind": "uups"
    },
    {
      "address": "0x4587bE7ABa174C98C08014601CeefCb6A5F24C64",
      "txHash": "0xdf890f7256b8bac10caff53802e33ba43af5b16e493f5160622eb5fa011ceda4",
      "kind": "uups"
    },
    {
      "address": "0x2659E7e6628210C478111978bFCE0805505fEa20",
      "txHash": "0x10abb3379ba6d6df3e09d9a5cb5b362ca7eb3d2faad45bce6ff92f323abab435",
      "kind": "uups"
    },
    {
      "address": "0xF0C905043e009A3E3726dF756A3F2BA7deE47467",
      "txHash": "0xed9f292faa10761d7b807bffba73f316d86b565f2cc605f900f833b3e9f3561f",
      "kind": "uups"
    },
    {
      "address": "0x8eA75373e23b7bDC47778966e2Ddc3658207B3b0",
      "txHash": "0x3a502a7435506b72c4b38562a826f34af62b0b49911cf38bd48a70e473d66b07",
      "kind": "uups"
    },
    {
      "address": "0x18865a0207b80ab741E4988DFEd6df315eb9Fe0F",
      "txHash": "0xecd4b749c51d4cb8e2d478c1e9f309d2fd13f572ffcf36dfd626deac321f3a71",
      "kind": "uups"
    },
    {
      "address": "0xd4997D5e0c732c35299F1d2A9696606879612EC3",
      "txHash": "0xa07b9c8258021f9d41d595a45b961c8e5cdcad669d187d2bee68d6c07096ac3e",
      "kind": "uups"
    },
    {
      "address": "0xd1923694182F94380f9504bDEea167b4E25F8B52",
      "txHash": "0xd8982e5249d3a0a7de185db351c5c9a9e0ef146451470501ee0d1a4de30a5acb",
      "kind": "uups"
    },
    {
      "address": "0x8d8151636562eEaB6575C8DbcFf216D935347459",
      "txHash": "0xfc3a42567692889ab14de62203174c6cf0f29802e63e3962d522256a873ea3d3",
      "kind": "uups"
    },
    {
      "address": "0x0D76e963794DbD571b4A364FA916843505EcF839",
      "txHash": "0x6577a73d15e36836126c39bf1da298eb6e1c6f11719c661adc4afb97532621b9",
      "kind": "uups"
    },
    {
      "address": "0xfa7A6180D40A87c738FB269B667dec324030564c",
      "txHash": "0x97a363876615090321d50bfdcead2a74d5018657566aecf34b6003c8522e3c60",
      "kind": "uups"
    },
    {
      "address": "0xa7Ba009BACD8Fd61614f3956A15104629bdA6eAD",
      "txHash": "0x5e367beb03cf2be3aa1c07c31f6eccc42e53ca4c4da5151922afcec0bd3653cf",
      "kind": "uups"
    },
    {
      "address": "0x8Dc5d99a058B45FD00646562FCa0FC7Ee6276B3A",
      "txHash": "0xc13d47d83857c02db77b3714a44996a31f21fed5f5a3516866e8bf96598e6e58",
      "kind": "uups"
    },
    {
      "address": "0x8b7De35d509F5D08D89b0563DF223ff0f9b55406",
      "txHash": "0xf3450bd4158be827b00b2f0e108fe5e1d24d8c6c80f50dbde8d537495c74e4b2",
      "kind": "uups"
    },
    {
      "address": "0xd581eAa00A40D7E8B44738EdDa91e8e3176ce5E4",
      "txHash": "0xf60ca07cc0c1decd090ec120e622b029582669a61f53cde39b942e3f56c1445a",
      "kind": "uups"
    },
    {
      "address": "0xf9c1aa9f217eAaF6699a0B0203578Da3AeF86958",
      "txHash": "0x1b30f6ccc88aa1e5876b3b38662e6d936f3255fdfad6096536c4b45bc76a5f35",
      "kind": "uups"
    },
    {
      "address": "0x0C7BBA9714DEFEE9AE8495bE4f1B0381369Ab3A7",
      "txHash": "0x32860107921c1fed8e0e5d0c38d498d9c25178252f1cefc61055182d6a3a14bf",
      "kind": "uups"
    },
    {
      "address": "0x002bBaeDf036D25B474a5e6fabd91e6dB5138D25",
      "txHash": "0x88b82fb892cf86f3fb70434bb01a83c892740bcacfc55207caec47c0c5bfb1c3",
      "kind": "uups"
    },
    {
      "address": "0xEC198F694A8376eF9c1b1B07d931638438E2D41f",
      "txHash": "0xaa0a871a6533d2ab195b17f8755970650bf7a67a9f21d0f5d0593e5b2b8b84b7",
      "kind": "uups"
    },
    {
      "address": "0x90e803d030af56DCD3DB1FD0A8362f2b0d0c1709",
      "txHash": "0xb57c06d08e4a1a8c98225edd7c616af3d48fabf9ae0404feb091eca08be90324",
      "kind": "uups"
    },
    {
      "address": "0x88fD6D325f3F970db0Fe9B313Ae3F899bF78B674",
      "txHash": "0x1580d7c4ed5e5aa885b16f57af1317fbcd4708670bd0d92156a1e7c1e06abec7",
      "kind": "uups"
    },
    {
      "address": "0x00E2f0197c181cEA3dF6438dDA522Db418D86E80",
      "txHash": "0xaab1911c8282b401b31a06240cf3581c969d23d5ef0235d891f2de0574e0334e",
      "kind": "uups"
    },
    {
      "address": "0x81d5d381e6181bBE3F91E2751cc6455F8ab2908F",
      "txHash": "0xbcc692a87d68b0dd89c69980561eadee3bca29e64d8ab12f8532d5632a025586",
      "kind": "uups"
    },
    {
      "address": "0xae951903fA655226b54D89dDA02725D924f86da9",
      "txHash": "0x6af5f6bd9d6bcd5921118a3447d082749cf4c6069133b72d5bc4c8dab70222d0",
      "kind": "uups"
    },
    {
      "address": "0xd12eE59b90A2A0e78fEf240F57f19F7C28ee7451",
      "txHash": "0xa8f96b8a052903257e2c9fa1377913bc746387bcafdf7f83d32ac94aa848cf90",
      "kind": "uups"
    },
    {
      "address": "0xb812AC2f1662a8cB3fc978306B30f89a0489df94",
      "txHash": "0x443d344956ea3333d9c9a23001775cfee14c4de49a68788cd6b6b8cc6ad1136a",
      "kind": "uups"
    },
    {
      "address": "0x6D6e57E5033b823F39391C40f560F42cBDe19332",
      "txHash": "0xa222aa47e0fe6035903e320467cb90c51dd825ebbca99abbc46aff5d0fb42a37",
      "kind": "uups"
    },
    {
      "address": "0x1B545Fb121A060605c79A94e318272DA3eC0C561",
      "txHash": "0x29163a85324de12e4229db56c21b314fbc9cd90de6a841d8089fe2a008f05698",
      "kind": "uups"
    },
    {
      "address": "0x3C227948d78a3Ae29f1BcFd9372069ca1A5d0098",
      "txHash": "0xd463cf706edbd69cbb6d850fb15a2de6b2933654e6d6410c50357a26996045d5",
      "kind": "uups"
    },
    {
      "address": "0xeec429dD14338402Bd4F582791F6dc1fB94b84df",
      "txHash": "0xf2e0f83bb9defe167bfdfcb844518105055663e3b4524c2cb81e7a2af4e3d628",
      "kind": "uups"
    },
    {
      "address": "0x5FE2eA447cCeb8986f6b64CF1be50E663D1BBCBf",
      "txHash": "0x5ac548a8d6233437dbeff17cd72ab584f01c2b7d0ae303fcd34af2274bd7f4d6",
      "kind": "uups"
    },
    {
      "address": "0xb82F084d70B2eD633CfccA1c63d3Cf50fE846395",
      "txHash": "0xd507b9116a8e25badd57d7f9d06d1d96cefd5ccbda3bccadbf347d29e0870549",
      "kind": "uups"
    },
    {
      "address": "0x4fF4a3E2DcDBBA4a84a7c67A5C0fCf7f75b47a4a",
      "txHash": "0x344751de55ce8b28c86c5276bcb76c19fbad6ac86f9c3f924c53c5cebb6d7c7f",
      "kind": "uups"
    },
    {
      "address": "0xa5f573D20C6ad52904688b2915224aBfA15D7944",
      "txHash": "0x2f86866e5ab31745dc015076bf94a6ae8492edd287ae2d5da5e65f02814d3d2b",
      "kind": "uups"
    },
    {
      "address": "0xd4273FD199De54255955683b96470c4c8Fd319E3",
      "txHash": "0x6f4df7b849cfd69e69ce6a9f38aad2f4d12dd2547b71bca91fb3e3a6e4942006",
      "kind": "uups"
    },
    {
      "address": "0xe1792B36561276D8C36ae031428c1760B1436668",
      "txHash": "0x98fdbf39307f620ac1d77e452a428b4a26ee1686102f9d132ed533184086f24e",
      "kind": "uups"
    },
    {
      "address": "0x3b9D7959B6caF2DC67f8876A9b038da2F0EC24f4",
      "txHash": "0x9814bcfb39fa41acfdd9fbaece703538891774139edaa90346d1e3ab71ff138a",
      "kind": "uups"
    },
    {
      "address": "0xfFD6aa2A4F768A3049591D2c4A1241A3D6581A48",
      "txHash": "0xef26e180486b2fa64511ea63babaf56bf2ab78ec65e921610ef8e200a675a75a",
      "kind": "uups"
    },
    {
      "address": "0x0641d12b35e94388b27527B14233B4Dc53Fb6551",
      "txHash": "0x7726d73f2c695883f45c1df66aea9f0025d3df900d163eb16691b923380d9cde",
      "kind": "uups"
    },
    {
      "address": "0x4Db80268F2D59605BC5697044ec9CbF9B68222c3",
      "txHash": "0xb2de6397caaa7d41dddc7cc8c36344940a6c04083960f9f763c48912cf26dfbd",
      "kind": "uups"
    },
    {
      "address": "0xd43bcE7C6f4Be0914b0A7eF5F1F1688804F3fEeA",
      "txHash": "0xbc82b0996b91e1c5064566e02f22ea81fce43317fbfd405a2deaf48d0f0ed97f",
      "kind": "uups"
    },
    {
      "address": "0xc5C20dEEdc189976602Dfc463F9840D3c5Fe441c",
      "txHash": "0xfd2008012cdc2d866b19be5a26928606bc8550907547b2ead326900fce56607d",
      "kind": "uups"
    },
    {
      "address": "0x4694Bc5C6972A9955A667717d4B3FE5D196e00A7",
      "txHash": "0x01be6e898562940924ae1338bd87096fd747dfc59389ff528bc2cf7937e077e1",
      "kind": "uups"
    },
    {
      "address": "0xC077FF05fe9A0E96B114A5b18AaE1553B0769D7d",
      "txHash": "0x3c9a2bff2c68c054a042cbd64bafb81078a47147b881f31c04890a635aa48aa7",
      "kind": "uups"
    },
    {
      "address": "0xdCcE0ECee26ae0b705E17B839962c7FB445705A0",
      "txHash": "0x7ed7b92b83857f84d188a6c955cb5e7ac31e4b6e9ddec0b3a1499099a2e5d14f",
      "kind": "uups"
    },
    {
      "address": "0xf446c30bA46D7200D8d422F60D05e63fD5F1CcEa",
      "txHash": "0x896142572b52d90dc4c5acaf89f30cec5d73b35e5bc6ccd6e3d67f6bcdfd657d",
      "kind": "uups"
    },
    {
      "address": "0x0DEBe747A1E168582777F40B2F7B041120FC9F54",
      "txHash": "0x92ed507267bfee4ed4b2f3a8482c02ea12b3cebbe4bfc6c2a8d8cae3aa5f46a0",
      "kind": "uups"
    },
    {
      "address": "0xCf9aD348014665D10d86fACdf4B060Ef4D3ca74c",
      "txHash": "0xdc02162d3b1ded95c252880a7a9ac8d63788d9acafbec676eae04b63b4d9e4c1",
      "kind": "uups"
    },
    {
      "address": "0xFD3436aF6fdDCF613954553fB7c25b997d8C0cFc",
      "txHash": "0xba8c7b0f985a4313bc66edaf696fab1901d70144ee19940be1413f8f62ac0dd3",
      "kind": "uups"
    },
    {
      "address": "0x7d6544A61dcC5f0e345DBfc53F0d3acFFDAf1E0f",
      "txHash": "0x356543e76669005c8e021b76cb8651b7abfeb20933abe8259ccbc72323dc4331",
      "kind": "uups"
    },
    {
      "address": "0x42081923F4e29069396466e5205C573C53574dD4",
      "txHash": "0xd9a558654f2b5367d603bda16424a45d482a0d827da1f23cb6a8794e12a78afd",
      "kind": "uups"
    },
    {
      "address": "0xc0684A688929A2E8991691708b188306945c4f4a",
      "txHash": "0x96bc1a3c0b04b079a9b979e0f5462a3d2b94ae4efbb4af4a8c0a8cda08ad4908",
      "kind": "uups"
    },
    {
      "address": "0xAa5bE963dF16eA8ddA2FA19aa9f70d6cB40181F8",
      "txHash": "0x2497a1bba5d4935cca224b691f01740bce92945883620f31b2c4e078a106582a",
      "kind": "uups"
    },
    {
      "address": "0x0109e7BdE19368a954B764818641cF0eFE859b33",
      "txHash": "0x838c0ac4c295869919618b2254f43f9f03534b4813d7b7d43e1b75e9769d27be",
      "kind": "uups"
    },
    {
      "address": "0xD7bdA3434FA29068388ca0D53fbb57bF232c7037",
      "txHash": "0xdd7eb0050c3c92c9a1dbdf4332365ea14c21554db384d139fadcc3995c9fb4fb",
      "kind": "uups"
    },
    {
      "address": "0x06927508A136fa0F3668F6D1Caa9CC983846D960",
      "txHash": "0x7bc4f108f984f29e62e67765d081f9b17f175841dddbf300343f8e3051735c87",
      "kind": "uups"
    },
    {
      "address": "0xbE78F3D5ddF639Be52B344B85946357fbfd2CB19",
      "txHash": "0xb502f77335d0f531d1647ed814a815f4b707611562189298fb0cd9bfdc1f8037",
      "kind": "uups"
    },
    {
      "address": "0xf978737D042f595eBD75E66299911a2C1cdFC347",
      "txHash": "0x4226d4cb36a4a9cb2457675db8b1b196d09c3f5ccd61010c7105a40ed88e7e09",
      "kind": "uups"
    },
    {
      "address": "0xA4d2269f33e1d4f3cf2eC7Da03E3fd4Af801305b",
      "txHash": "0x0adb3df302136adacd5bb0c2365e3b71adb044e2891cc3b8d8c9b27beab2c714",
      "kind": "uups"
    },
    {
      "address": "0xE3A6E18888dd4413D1199a93AbFa6AB554EAFA30",
      "txHash": "0x556567b0d45b3a683f89e9e7ff2590df3c981bd734292e1a9cbc147ba7964bad",
      "kind": "uups"
    },
    {
      "address": "0x676c1dA38F1E796680D5943C442E98F84eAf083a",
      "txHash": "0xd0ae811fefb9cdfde8469b47b355c603a9204644f6e9b7c5693fb3763b8e4e77",
      "kind": "uups"
    },
    {
      "address": "0x24FdA5AA7d101A3efEa98F4f787B84e65BBb3Fe0",
      "txHash": "0x61647b6a2f0ed46af6cd71b11797609b334d8edbd2d7c0a04bca58b84ab279a0",
      "kind": "uups"
    },
    {
      "address": "0x63903F413C791Da83429B55FC27c08B4CfFFb1Af",
      "txHash": "0x01590aa536388b46af52ea51e184d26185b08ab13ec3a24c275bebac770e601f",
      "kind": "uups"
    },
    {
      "address": "0x20670C2636836eae106eD13FEeE64F8D15A3C64B",
      "txHash": "0x6012173d81eb70e58ee00e8d9e7ed50ebf00ba22adf6c46cc7e4f0ef290afc94",
      "kind": "uups"
    },
    {
      "address": "0x0294b1F10301B7239F194847AA4B59Bed8F050C2",
      "txHash": "0x018bb911f2af7c5e108a771be74bf86da745e52da90580fa9ac6e730b0667280",
      "kind": "uups"
    },
    {
      "address": "0x635A18A5637F48b7E623dA420E526dE1ee30E5cB",
      "txHash": "0x475516e8a98e4c3f4c1d83bfc38b1f1eb4abdce826254073c9325fe267dc8bc3",
      "kind": "uups"
    },
    {
      "address": "0x88cDcbDFE907265173d876DD3452c2c3A04d4Be7",
      "txHash": "0x359882b403e61ff1f9787d12d4c0328d5b2e4cb7bdb8883a28a649bcf54aaf19",
      "kind": "uups"
    },
    {
      "address": "0x2B134ba2abbf64196B7453932018b75ebFEC35da",
      "txHash": "0x78da0621b2110240af745e3ce7efb09a5597b6d7e13d6232beecc9c0b4eb7356",
      "kind": "uups"
    },
    {
      "address": "0x97684aA0F6eaA16087FEA2A19672d4FE7A8d34cA",
      "txHash": "0x39e225f3bcc48445ca5e1e2c68c834b2a833397d8841d1aa440cf4dec7da0c8a",
      "kind": "uups"
    },
    {
      "address": "0x290006cd813cDeeca4F7997d4d59A90cE19F1736",
      "txHash": "0x3579deed3b85bd9bdd2892389b1691bc22ed0337820d0e4924b0708296280e5b",
      "kind": "uups"
    },
    {
      "address": "0xeCf9855b4CfdA93Aa81CeffAb49d8399B4E3d513",
      "txHash": "0x2237b3044683d07683a3988f1021971a62263f71eed47cb8beb0e10249f29d38",
      "kind": "uups"
    },
    {
      "address": "0x4dc01c7019195c09fFB5F8C9131931A25f1d0F71",
      "txHash": "0x129824948713a1356ee939fa39a63ec8434730918e1672b32440ab2ba6926f9b",
      "kind": "uups"
    },
    {
      "address": "0x82630CEEe119505aa29509498D0e2Ca7d4e0a871",
      "txHash": "0x6e82fb2d7a1362fef6401d5413fca04b1b8bc414ad8d53b6108eb0673ea3704d",
      "kind": "uups"
    },
    {
      "address": "0x5EEa6e1D88D6BF6f9Ce2FD50f2a76ad487Db5C02",
      "txHash": "0x867fefb264a4d0bd3ecc522f24552d2bf10a89bee04956a5f7f8cc6a75b5fd27",
      "kind": "uups"
    },
    {
      "address": "0xbA678A5B56f89aA699E40752dCf5f59280B97e6f",
      "txHash": "0x1a3776064c44818f6f43c28d5c7abd31e9f604b45dab3d025b82d94a6bdc507c",
      "kind": "uups"
    },
    {
      "address": "0x7a1954C567ed0a97C6723C106E16b9DB20AC1353",
      "txHash": "0x5771d2c323b043a455735145c74179d6e08d889ebdac193e5e0a7f94841664cd",
      "kind": "uups"
    },
    {
      "address": "0x0AEB4D0c95f3E23151ef171D305ebDAbA8D8DeE1",
      "txHash": "0xd46f3797a2884e1dfd1ddf02a145652b125211b9948ebf7c863bcf4b3ea814e8",
      "kind": "uups"
    },
    {
      "address": "0x60217d84dE62353823b9f0C62020782A03eb4970",
      "txHash": "0xb1eaa8f7cc56df555838823746884d9da036e4c4ecbc7c82c71cbe2bbfc4f50b",
      "kind": "uups"
    },
    {
      "address": "0x3a49eee01C3830aa450AAA793B0e075525253716",
      "txHash": "0x4ba749822e1c415389a4268caba6ba9e410b6ea8503ef0c875fee2afc85fbc62",
      "kind": "uups"
    },
    {
      "address": "0xF0290bA9B75c6373a078Ca0bf9c96E8d0572A751",
      "txHash": "0x2754983f1e195dab63f0a3ad6023e4284b9fb20988224fe00514d9a9afd09346",
      "kind": "uups"
    },
    {
      "address": "0xBA8e89619362d25D8051b6acd34E6936CAD33B43",
      "txHash": "0x45b890e81bb3743697902a9de535f801ea67d27775227db7523fa03a9bee5cea",
      "kind": "uups"
    },
    {
      "address": "0x04FBcee7f3676362B98e5D7cBd3489CE64542A24",
      "txHash": "0xff0f1c6022f1187baaa2e3a7188d73936a8933bd9d89cda7673c8f820901cb2f",
      "kind": "uups"
    },
    {
      "address": "0x632BCFd172B0D906FD3d18Dc136b44c94Acbbb6A",
      "txHash": "0x11af849bb77fd2818dedce5e00a30751e88e314d2aa296b06d7d2b1b767b6f75",
      "kind": "uups"
    },
    {
      "address": "0x7367Ca10C6eAEB1858D52BA214708764Ea70DbBb",
      "txHash": "0xa62c64b74d81e8b3d75b73c4ff0e10357bcde750ced65d4f7a8cc809539731ce",
      "kind": "uups"
    },
    {
      "address": "0x50eB7C22B62BcDd703DC786785857dAFA1a9B4C8",
      "txHash": "0xe60cad4f55f9b539dda38026d5b28037c68a7f58dfbb2eb29511ba0db9b96fa2",
      "kind": "uups"
    },
    {
      "address": "0x78414F3C0f41005DEb20bEE742E874116eeA7228",
      "txHash": "0x633411bdf1cd15e93011d46f695855207db69912bc2299ab2cea134d5d6b232d",
      "kind": "uups"
    },
    {
      "address": "0x475b50C71f9443fD2BC006E292A1D79C2102D08c",
      "txHash": "0x01867c5b0e34e724958c051d8e7d29781923d7513e196228af324744703ccc6f",
      "kind": "uups"
    },
    {
      "address": "0x62217Fca97D370e10790cDE028016895cEA176C0",
      "txHash": "0xf6b712737340ff57878ba1e24baab3087887fa6a1096f4989d65626016b7c23b",
      "kind": "uups"
    },
    {
      "address": "0xBB93446ea7bAa1Ac2Df3fDB788B701FFEeeEE8a1",
      "txHash": "0x5a12b6c609423295d9a9a580ff1ffb83311f33b1ed37b9bdef601ce6e67c2853",
      "kind": "uups"
    },
    {
      "address": "0xcd2a77ab27A0159a6846bA75B60efc00Ae91cf46",
      "txHash": "0xb5890615361a69f9a130f4694d8c657d1206ffd522cdc967020da07311a863dd",
      "kind": "uups"
    },
    {
      "address": "0xf03189de9A81D8cC1f5b03a7BDbc18909BF96DC1",
      "txHash": "0x9d3d0b9c17806e6e1dc25cae6aa200a66ede37562b3b50941399f06e23551995",
      "kind": "uups"
    },
    {
      "address": "0xBa462B100722E541E2Bf53e9410bc4aC5578cfFF",
      "txHash": "0xc81e50a9eebea9bd6083f3c26e37f34d6f473566c754a4bbd6040cb78c030d49",
      "kind": "uups"
    },
    {
      "address": "0x8C023b1fF2E8B6F3dd5b03631732C31AD5Ce6554",
      "txHash": "0x42152e95cba383a2f185f3d45dfb3806185124ebd8eccc8f7c8f1a28f83697fd",
      "kind": "uups"
    },
    {
      "address": "0xC8A4b95Ebc2A8ed3a740D9B3Eb0C768Ad1c1784A",
      "txHash": "0x9f784872c1c7dfb7beae2c59ff0dda4e7467d45553d6cb0890af2efe7379cf6d",
      "kind": "uups"
    },
    {
      "address": "0xdCbA2A6a0b70156737b03763f43f156058254e1e",
      "txHash": "0xa6ecd736085425f0d5e9f395fa58d6124035ac51620448c7886fe697bd3189c2",
      "kind": "uups"
    },
    {
      "address": "0x83FaDE8D1aC8034605A1Fe5E00957b1d98C3E335",
      "txHash": "0xd756b21bcd85c83bccdd3a1fed4b348790260970e2ca0b4142051df744452d06",
      "kind": "uups"
    },
    {
      "address": "0x18E4E88D24A2b7890714E0d6C0Ddd285E534B0cc",
      "txHash": "0xd641b5e30853255e16402a3a8560f3f634b120dd4920450a06ce5bae2fa39adc",
      "kind": "uups"
    },
    {
      "address": "0x883F8c9b5C599195558fb27a840aebef91072586",
      "txHash": "0x6bb760869f47cc7bfef76235cf6b3e09f9ed9acc7f31483f59a8c4a2433728d5",
      "kind": "uups"
    },
    {
      "address": "0xeEf913c08462091f4227F8F03d4f07e9E7242E76",
      "txHash": "0xf57813b094e6ae815cd00e11f786d02abb2a0b8e5582dc4cafaa3023746954b6",
      "kind": "uups"
    },
    {
      "address": "0xa43a5fECb90fF1F88262f6cbb1474bcA601A28FC",
      "txHash": "0xd87e900bb941f3a4cb1e485ac5d3a8f21ee0fce256a634e01e1867766b87c7e3",
      "kind": "uups"
    },
    {
      "address": "0x29DD17b8d5d4f68Ee56268bac8C7793B3E91ff7F",
      "txHash": "0xa6f2210437fc9cc412f0cbc2f7d215847f9e126f407a713501db8b0b107db289",
      "kind": "uups"
    },
    {
      "address": "0x4d7974d01B85C13A5d3e2dE4619ed4995dC03737",
      "txHash": "0xbc912a84cf5235bc4123cd112067495ab60d67be60c03f07de41faa14d78ab74",
      "kind": "uups"
    },
    {
      "address": "0x30591D247e9aefa49D58b547cC7963D9fc6F97De",
      "txHash": "0x1c1df61c48c8394ced373c84d115999c24bddf7018c4bb348143017d3a643096",
      "kind": "uups"
    },
    {
      "address": "0xDbA0b618f2D7a4f826d1D717E22408A61dB8BCAa",
      "txHash": "0x45e59ec986e04fce7d491c1c3c01eef920b02a5a50d5c6fe740f3f61f5ea1d19",
      "kind": "uups"
    },
    {
      "address": "0x0F95Db3543a70C9491cb5dBb2595501Ef77347F5",
      "txHash": "0xe137d037ed6d3495dc76e8dc27515d8999458800b0d826a2d98ff64564fce1a0",
      "kind": "uups"
    },
    {
      "address": "0xCeB0E93a8768F44F916419B412843b60A346D6C5",
      "txHash": "0xf6d70027e346e188710acb32807a67c62b1a31ab686fa4d7aa8da19ed2ceb494",
      "kind": "uups"
    },
    {
      "address": "0x244d59c34352D7c7D8986811E923C597cb3Ee3ED",
      "txHash": "0x9f14f684db417dcd129af52aba1d1bf9ffdc9fe2d2fd6d280c2614ae2f2da937",
      "kind": "uups"
    },
    {
      "address": "0x292E0Abe78Be46082010efa222194661De005512",
      "txHash": "0x061deeb4ad600a0be65c6f9b71ec371284039f8f53a1953134fafa9a7951b7f6",
      "kind": "uups"
    },
    {
      "address": "0x7911a0Ca3924D18D2A7Bf1eE32a7733799941F6B",
      "txHash": "0xb03cf9997e7169d45fb8708c6f55bbdc95d2bbb17087ff35773f7fab1b80390e",
      "kind": "uups"
    },
    {
      "address": "0x883d0d38dE2E338e533E218846E08f8A8C05F08A",
      "txHash": "0x4c6644e73bb24c735e97834897030352257f819e1e574e381875ace00d75f2fc",
      "kind": "uups"
    },
    {
      "address": "0x787285B543C044B189B0adA72763bD61ABaCe1b2",
      "txHash": "0x63291d340e3457cede55abb2737b0dbf1ec8f2c6f2bf32b263d515f928a0991b",
      "kind": "uups"
    },
    {
      "address": "0xda3BabfcE136EEA3D9954b9c4AE8b2ED1844499F",
      "txHash": "0x8d7a1ebcfaa2c3e6e54d51eec66af9f488365d44feaedd42b66d91e73269686d",
      "kind": "uups"
    },
    {
      "address": "0x2A99DB39D090b2cD5C311440fa91859B07c2363F",
      "txHash": "0x5bc3c52e7f5204baf3229c8e513f8572852280103e184f19e2df9231e9342cf1",
      "kind": "uups"
    },
    {
      "address": "0x919f9CbEE22b8D0FB877B25D04AF79B1456c2257",
      "txHash": "0x48d99408a38b56e4b12ae0fdb39dd1aefb16854e6cc6f0326ed5b61fc78fa38a",
      "kind": "uups"
    },
    {
      "address": "0xfd1D8cecF71b7F4A3601F4a6E071166D1a672e65",
      "txHash": "0x95d4ada73b2be44dabfdc1b25e8ef83636b1f49246645a166689f214d1f1d5db",
      "kind": "uups"
    },
    {
      "address": "0x3f3DaCE0fF290debE1c6c076e597C245730cF561",
      "txHash": "0xddc72f3f2f1122e945bbe0fcc46cc110f6d068a1445edadfebfe4473df85f68f",
      "kind": "uups"
    },
    {
      "address": "0x594a8266d04385E142b3EfcE4521f46E954d48BB",
      "txHash": "0x203e3e47e02668b452197b3e6724bd2e021f3ded07a2791846317e1c5a38227d",
      "kind": "uups"
    },
    {
      "address": "0xF1E1b4a776DBE444d3B4D1689a49c6c9863e6A25",
      "txHash": "0x615345b31e918417d7a59c048344229a86a9f4e6643f79328911dcf588b2dfe1",
      "kind": "uups"
    },
    {
      "address": "0xAEFFdB9D209d1A93B9C8A40d0c03aF02033601A6",
      "txHash": "0x3283eada7a5033e5a97345c460439f41cbc5e91b271f5516e432309a7406adbe",
      "kind": "uups"
    },
    {
      "address": "0x04B6e4A0E4cFf9e0FD922bd773Cb4C63c3D1aC4c",
      "txHash": "0xbd47bd7ea6076cd0f90a7816e08f4697c69366b74275f0858d33462f5e086a82",
      "kind": "uups"
    },
    {
      "address": "0x9a769acF4117c58a088928FD221b86FE51D7a5B5",
      "txHash": "0xe23308ce8046d53bd8119cd9d46921771e7caad1e74e109b2e8e715ab5835a51",
      "kind": "uups"
    },
    {
      "address": "0x78574146a122d5aFaa4fd2Bc1E682b11614b38bC",
      "txHash": "0xcf4b9ec749afee1cceb30531de32dbd23fab6256505cd512036c78cb0ea26050",
      "kind": "uups"
    },
    {
      "address": "0xf9465b3D117599Cc140efb8F3C5B1Ba05F23e651",
      "txHash": "0xf0ea30f90002869d1f73d7cc73fade0e92b2393732a7fb69facde6bed0c4cdd1",
      "kind": "uups"
    },
    {
      "address": "0xA98bec610CbcF52A716752382efF2cC40bb9B69B",
      "txHash": "0xcd1eae4537a97a936310eb9d8323fa93840db020bf03d6b96cb31ee410c58cee",
      "kind": "uups"
    },
    {
      "address": "0xA6f0e73960f8E084Fb049481D532E4C204b32f68",
      "txHash": "0x4f9228d630d71b50694345512e788c584e3b1a5fe55f4dee55b668ccad0c4f61",
      "kind": "uups"
    },
    {
      "address": "0xEDdafE3aAB45b9192d9F69dA20d9E584306f80f5",
      "txHash": "0x5d4117483605611b457fb34b3d0052f3b38a7630c9d75a20adcab00f83ba6f20",
      "kind": "uups"
    },
    {
      "address": "0x3384a447e1743AA6C5a242c83c334cEf173F6253",
      "txHash": "0x073c744ac40687d82e295fad4f029a551e6e20b5afe456618d1b161ea8949fdb",
      "kind": "uups"
    },
    {
      "address": "0x8af314a6b17670ace4BEEB3dd1150BBA03264b06",
      "txHash": "0x561b3eaec70c5b5495cf81bdebd76eab528ae1a66870879196ddb6cae5fe92ee",
      "kind": "uups"
    },
    {
      "address": "0x6C034dE16Aef5561b2e52795Ee9Db1E0701f9C80",
      "txHash": "0x04f75d815246a9bd130384f5e17679a9ddd82379a923fbd9bc64899a226a8cfc",
      "kind": "uups"
    },
    {
      "address": "0x3e684A55928B1B4AA674E493cf0570102078bBaE",
      "txHash": "0x971b8fb9837e84480c9a6cbd9b228bfa71d08831ecb42764c0a33af29835ac83",
      "kind": "uups"
    },
    {
      "address": "0x35AC75CD799C0671Ebd0706b0FDc429bd007B5a1",
      "txHash": "0xe1131d7d40ec041bcb935a90e3df4c267466bcbd0f1ea966955d6584a3f090df",
      "kind": "uups"
    },
    {
      "address": "0xdF8165f73493CC6e142294b8dFeab28082c2A532",
      "txHash": "0x0f80cf16d8eeaa0311f84feb97e0892b57a1e4c30fc8d74e17b2fa324360f59e",
      "kind": "uups"
    },
    {
      "address": "0x3B90D0B81e526B696B0828d117F48f5E8A9B876F",
      "txHash": "0xe47b3dac1a1a2c6322db9957e2d51e7bc64be5958d2d76a437874ae175273a7b",
      "kind": "uups"
    },
    {
      "address": "0xFC92540b31b16de1dE06888170D31535FD648eaa",
      "txHash": "0x521281170f4f7da69eb8b5a2b8bb342a2dd43765dbc658b86bc7e5e775467b8d",
      "kind": "uups"
    },
    {
      "address": "0x589C2A46D846fdBc058dDB44A0C5A940fDE37D7A",
      "txHash": "0x2ea3c250492a3e615a09a09a8f95a483c7228ff54e7109e74ac032f93e8bdfa6",
      "kind": "uups"
    },
    {
      "address": "0x49c9b0ab05589729eB90A6E8148936C8eD1B7b13",
      "txHash": "0x8c2034a5f4233641d3b8d2ac0e318fae0b89e23a8d8062dff785bcc9d1bf6c26",
      "kind": "uups"
    },
    {
      "address": "0x2cF4e1E751D7fbC247b90b778d51e1AC36da1624",
      "txHash": "0x952d24490e66647ad56f44e41c3506868d585552ff798bb572e43357574693e7",
      "kind": "uups"
    },
    {
      "address": "0x1Ad0405923f2dA01FD0E9f0f9930BD9ce75D3849",
      "txHash": "0xff4f7dacbc3d1efbf08dfacfc127aed6ba9d2127191cbd0f52154e97eb10c6d3",
      "kind": "uups"
    },
    {
      "address": "0x331b59d35B889E8CF794275338cCB38153007b58",
      "txHash": "0x40aa148ec7f2828453044c9d863ef7f8fc854704bd7431ea353c39dcd4a656ea",
      "kind": "uups"
    },
    {
      "address": "0x55066e8cC5eF67e37B655d6c0d3dAF63c74BA579",
      "txHash": "0x915a98677329129e9ffb7ef4d2d9b4584a8fdf1477873f3b4d3d85d5654ad297",
      "kind": "uups"
    },
    {
      "address": "0x816f7017a7e6ce18Ee467EBCDC62bb476FC3B3AD",
      "txHash": "0xe022b9556bab19edc03bd5b819ea8373896db22c93a3ba7f089fb80df86b3f73",
      "kind": "uups"
    },
    {
      "address": "0x5EAAa213A883Dc3331534B08D5B988eCeDc0a9E4",
      "txHash": "0x06e8dd874b885b2b8134b0bdbc58b07afa8675e0c7e3888bdcc3a326cefdb557",
      "kind": "uups"
    },
    {
      "address": "0xA9135BCA8a7807d71CcE2c1D89CD401caFCa30d5",
      "txHash": "0x39088031445890625fbeea0ea21d1dc93eec6dac708fe453b569dfce227a3a9a",
      "kind": "uups"
    },
    {
      "address": "0xf83Ddf41396AF1e42930f715E52867174810Db2c",
      "txHash": "0x0cad8e06b79e2c49c963aae18e40bfdaac2b463f79424f99b5f6d7455e1342fd",
      "kind": "uups"
    },
    {
      "address": "0x79739f1075779AEA1eA8f2608f67fb6FaE27A82c",
      "txHash": "0x9b4a48c8f51b44f066e2d10a955294edc61684c973910df8d84f94bdc80dcb73",
      "kind": "uups"
    },
    {
      "address": "0x63D43c2c58619044863E1Ae7B0947932d63A2d9a",
      "txHash": "0xa90ecce58e1380336854ed1ef8a278905e3b6e08b4925cb7156f1ec514ffdc40",
      "kind": "uups"
    },
    {
      "address": "0xeaaa8F4fa87aA4a72bE497De5c8Dbcd29abff3c4",
      "txHash": "0xa7991f4d365cf41225570345b6b6d72e45cf0fcaf49402b288ed85c82f2d9d20",
      "kind": "uups"
    },
    {
      "address": "0x02445D4b81b8b5505B9a8311AeA7c21ba416F00f",
      "txHash": "0xd6a5d6b2d8d2ee686d401ad84bbb9df50738895335668feeff92682ed3d6c33e",
      "kind": "uups"
    },
    {
      "address": "0x5A464454518EC2022e0d43ecd7ACD9D62Dc6Dd83",
      "txHash": "0x095dfa235e1ee787a70811096584c25f78b2a164e304a604960d408256fa8d3e",
      "kind": "uups"
    },
    {
      "address": "0x12102aE5A90f67815FD2577eAB5976fF075FE13b",
      "txHash": "0xef403f34dc96ac0516f4cb6f68125c5d650e4920fd43b2112fc50b619b127df9",
      "kind": "uups"
    },
    {
      "address": "0x5d50E438318C4Be60fE1a7b2454E978E0c635b88",
      "txHash": "0x2f81dd17f2faccd289b9280c6e1a994b9921eac016046dc1d2041ca6f280a1aa",
      "kind": "uups"
    },
    {
      "address": "0xb18A4Fb3005040E2bba68F8eDc8F8363367fE740",
      "txHash": "0xe3e183672fd2e1ac34c42c52f2e88e9f4cba280e1ddf363a0724f7d50817dbde",
      "kind": "uups"
    },
    {
      "address": "0x3d85a57b328780a8383bea49D34d3D3aC56Df836",
      "txHash": "0x29b616a4e9ea0af0c4082cf32093ce32f943132c3cfa981698e615526c7ff459",
      "kind": "uups"
    },
    {
      "address": "0xb47147679c5ec17c390255Fdb287A4bAF4f257D5",
      "txHash": "0x512c551971e200274f09dd42fdc8c57c544f4e34497d167cab9f5844c7ea4cb1",
      "kind": "uups"
    },
    {
      "address": "0x195992C8075d0fFf412F6175924793F4011239eE",
      "txHash": "0xef9239f8992f12d21db8dbca623144e7f38f45d51bf374d8d0ad2f48666159aa",
      "kind": "uups"
    },
    {
      "address": "0x19747b2F1C9E2CD7a44B1045b453195F26267D24",
      "txHash": "0x603f2a82e2c5e66d73c215e06bb08d1ac6971be11cca9def72e723fec3ef549e",
      "kind": "uups"
    },
    {
      "address": "0x3e31fCa0fb936e94Dc99E811383106cF7C3FE80a",
      "txHash": "0x55b39704c5c2ff6533c8d8e5e3162ff7c9344193170cb75c505aa7309a83d7a1",
      "kind": "uups"
    },
    {
      "address": "0xE6aF24654087C12E160C8fcc413bCf2D78d8cEF9",
      "txHash": "0x98f38882f6b0e5cff72d825004ed6097174e422c0dadcff1bddf442218148052",
      "kind": "uups"
    },
    {
      "address": "0xB87984343c914B2245b7C09A8A16cc29FF37Dde3",
      "txHash": "0xac115fa8a9555a0a144dd2b76f59c75ff35c7f27d1c301595c574158292d5fc9",
      "kind": "uups"
    },
    {
      "address": "0xF68CfA5588Cf46047e7f89F2377FBB0817771B57",
      "txHash": "0x125ec11b1d54b12acabaade2bd4161abbb24f8b13658d484ee5c3c000a428794",
      "kind": "uups"
    },
    {
      "address": "0x18B527978A01F20b5b63D89753cCA17f16D2c27E",
      "txHash": "0xbc0df7fa1db1ee74c3139dcc31bc67cb152180332d679f859d5f75da1c394c2e",
      "kind": "uups"
    },
    {
      "address": "0xc7eA336cDA809b4d0C2b682CA4C2891E681E7ba0",
      "txHash": "0xed021183fc808895515bd9de218c52076dfb709d6aa0756628df302f54d8be5b",
      "kind": "uups"
    },
    {
      "address": "0x9116f34B42c4C2dC277EE4E32b6CbbCD4527f563",
      "txHash": "0xb96ff13301b880fc5ace61ca581b337808e71e2f1d0441240eeb1c15db816265",
      "kind": "uups"
    },
    {
      "address": "0x7Ec1e029970D6031703fE2F79618a1031597f6F4",
      "txHash": "0x3e37dfcd5f5646d339922d35381a484b9ea7ec78ba8427a835e154879eedb194",
      "kind": "uups"
    },
    {
      "address": "0x3279C5eb8cb767766a6EC7CadD29309Deb0d8C85",
      "txHash": "0x1fdf6e298b910797954c62a8d2e9aa41944d0e0f9be70ef9e6655476ad121a41",
      "kind": "uups"
    },
    {
      "address": "0x20690C0b1AD152bdFD0715d191011f14a455eee4",
      "txHash": "0xab233dc93a956791d1d4ffaac03851dbea1d7a7d70a655c3ce814cc36654c562",
      "kind": "uups"
    },
    {
      "address": "0x6e40CF33F2C329e412eAE258397b6d095150b994",
      "txHash": "0x588a00e005d27ef3ff1029f209579a4145dc810300345b90b61276ca556c1814",
      "kind": "uups"
    },
    {
      "address": "0x849Dc56D1187040239c0CE4421EDc1702c376800",
      "txHash": "0x6784bdd22da927f9cc8a535a427830ead55f2d5cd4327b9732734e858d1aa815",
      "kind": "uups"
    },
    {
      "address": "0x8Ec666167f11007ee6e723F946ecd4c52C9B566B",
      "txHash": "0x7e35f6a5d1add34f52778508fce39be7cc06ca45032532a329190d57e6ed7125",
      "kind": "uups"
    },
    {
      "address": "0xB6ac974301aDA32478Ece883b832DB18E068BC44",
      "txHash": "0x1fcda3595e320fb7970847e4d121eb6cde213d59875ba5e0f150b34a4a12ec3a",
      "kind": "uups"
    },
    {
      "address": "0x07D5FDE4d6A7F5DC85c021179f6001906288Dd6e",
      "txHash": "0xf9cc837f5139948776d10eaba23cb0dfce8c266acdc621ffd43e34df3fd9c561",
      "kind": "uups"
    },
    {
      "address": "0x456eaf9D3a521A198D3EC2ed16F75512Afca78C0",
      "txHash": "0x097be00abc1420e6705b4b162036700598068d119cba3cbb952fe42352aa860e",
      "kind": "uups"
    },
    {
      "address": "0x22cCdC06194a5B462A7e59d827b5Ff801598acaC",
      "txHash": "0xa9576dd2f9bd636b1f80d2e5bc4e1436bdc35ef895e0c1af479e3925f51ea426",
      "kind": "uups"
    },
    {
      "address": "0x842641Aa1d0F0580699cd1eE8dFE5eEF5a3AEB69",
      "txHash": "0x726b29b6cc9f1b47082d0a3b4768100f1b5e1cdef2326817fb8abcab67f3d104",
      "kind": "uups"
    },
    {
      "address": "0x65B74aEd7054a6D19CBd54eF613FDbB524747Ed7",
      "txHash": "0x9bb11aa9e07f5f5bec4d498103e59b71c6cde21ab5c337f9b3d2ca8bfe18c6a7",
      "kind": "uups"
    },
    {
      "address": "0xcB6553971354e43A749c3A2670b6DB005Be58685",
      "txHash": "0xaedf6001083761875fe06ab6d4be6364d0f0cb3ed9466543a3cb48648fc89dd4",
      "kind": "uups"
    },
    {
      "address": "0xE7649fb2991fF02e43Bb7BCE5C6686e59aAc756a",
      "txHash": "0x928e18afebe1e067e9822a0d602e022db5760da4dec4473ea5889811218e2ee7",
      "kind": "uups"
    },
    {
      "address": "0x3189f8eecFdf98DB44E8A54bC9deFDf9E1d75114",
      "txHash": "0xd476158072af8c80476202104512f7f91be2df9b802a93859e131302e7bfba87",
      "kind": "uups"
    },
    {
      "address": "0xfE8C6f10945F88747478171b6131a828a5973051",
      "txHash": "0xd05686db45589b78377a37b33e70e88d5645d9b49369913e6012366db3491df0",
      "kind": "uups"
    },
    {
      "address": "0x470beB387E95A4F8aFE2a34e4Bc71eF5a935dc44",
      "txHash": "0xdfba29e387ffffe5f71d76ac569c85843f6fbf3f8054e0c316395708683515d5",
      "kind": "uups"
    },
    {
      "address": "0xcc5603f90b43AbD5125F95a6f1254CeeBE1779A5",
      "txHash": "0x2547e0bdce054cebd4d748ca21e2c8839c5112b9a2584c6fffee10b5b568c35a",
      "kind": "uups"
    },
    {
      "address": "0x16DB3c1a13E64E25Cda240144A46d058673EB088",
      "txHash": "0x211c98d839000045e6eb46ff261dd9570756f8f4da9fe33a37623ed47a1542fc",
      "kind": "uups"
    },
    {
      "address": "0xa46E886531E4595381c11c61ee4aA046ad7b1094",
      "txHash": "0x217303e00f4025e9b91c26e158c50fdeb441b539e381d1cc3c8e97c29310822b",
      "kind": "uups"
    },
    {
      "address": "0x83aC81fDB9256250101d89eeFE76889E0B300a65",
      "txHash": "0x9b6f82ba2ea2894a1988b118a9cc2a5139fd86009130ec169dbd0237dc9be361",
      "kind": "uups"
    },
    {
      "address": "0xb81d0A2A1b885cE03b0c65A9064b847FA25cb081",
      "txHash": "0xba7522692e37561a44d34127568d21ff31fda2e135a77efa034a4a008b4fe2c0",
      "kind": "uups"
    },
    {
      "address": "0x4e5463a4aFe5d65F5A09CEA771bA918C03556d15",
      "txHash": "0x0241714a86e42c6ce4bea7535f2982f3a321b309e1f0245a5ba7a094fd4dab8f",
      "kind": "uups"
    },
    {
      "address": "0x27aA03b6BAbbDFc2557dA98486EcDd54f8bc3844",
      "txHash": "0x4d4f5415a90188ab14e98ff7777702aed5eb89ddf60ec5cec29ce732fd9a2d8b",
      "kind": "uups"
    },
    {
      "address": "0x44Cd7c22C1dA96960FDC377c9Ab547d6038001c1",
      "txHash": "0x5c351b77e7e8f835f3fc7925d17069d3cbee06e0a918889c4f68be23f3e6f355",
      "kind": "uups"
    },
    {
      "address": "0x49841Fe9e9d612f8E89b4cCF9E3E35c2B1c9C691",
      "txHash": "0x06bbd5e2dc95e791568656c20494ee1b4bf28e4827cb72f094f738dd755cb60a",
      "kind": "uups"
    },
    {
      "address": "0xcA8AdAEA78a47095C5D918eE6294D45742c1263D",
      "txHash": "0x90d5645b474088667cb417c25bbe57e62cba4f75c88b9863dca913b02595a44b",
      "kind": "uups"
    },
    {
      "address": "0xF94A73dd2aDf4E640B3916D39796ac702D43B816",
      "txHash": "0xc38c934609afc200f72d44e9314538f1d221214515b4f6431999fc88fdca422e",
      "kind": "uups"
    },
    {
      "address": "0xFd4fc0365Eb99887C6a7B615929028ee8137E821",
      "txHash": "0xdaf8e813a595648eee6666b881d236cfa8c43286fe9f39ca219fc32f9121fa2e",
      "kind": "uups"
    },
    {
      "address": "0x7e833df65639E9f0730800f0D27fF6F61649911B",
      "txHash": "0x071e157ae6f13044a5b2a8e3bf5022d4de23f81fb34246cc918347f892d8f922",
      "kind": "uups"
    },
    {
      "address": "0xDEC9289B07a6A86C2eB6A01847Ee4c3447f18CB0",
      "txHash": "0xa4d12f7e449706354705b1583396cd0edfcbcb1a9675bb0c638be76f3373d550",
      "kind": "uups"
    },
    {
      "address": "0x477b4564218bF6425d836B7Bbd7cD54AF8bEFe93",
      "txHash": "0xb5240ff06e05c58fcfb39ad69521c44bbdc60074c528efac1b49b95c16aba147",
      "kind": "uups"
    },
    {
      "address": "0xB3b2af315518AA4F03dd0d85Be1e245f223882ef",
      "txHash": "0x7e7aa4baa36111953d8bcd6efb6e11eebfa34cd60d35dac9d8e026d44bc0887d",
      "kind": "uups"
    },
    {
      "address": "0x4760aaAE5e223fb72D35d1a27bB61fe1926A7165",
      "txHash": "0xf00f3aed5316a81519f600c9d53c4a2924a8e2242865114bf7ef41228aeebc13",
      "kind": "uups"
    },
    {
      "address": "0xC491D3970288385D0805e8bFC9052F976Ce5F920",
      "txHash": "0xfffd1cd216048180b2325706c24ff9d2ba04c3a1d8b1fede63285ce229ff5394",
      "kind": "uups"
    },
    {
      "address": "0x812ef86d77ED2982A7f71955e6d440fD89223978",
      "txHash": "0x29389d63e9590febaf86845a93c711f709f28f93d4888e83d4504d25e7df9734",
      "kind": "uups"
    },
    {
      "address": "0x13A1641A46BabEb7a61Ae2Ab09ca384F179d1224",
      "txHash": "0xa1f0c1c2b7ce05a5ff6420f40bc9e0d24d7a1c5d2cfbc5460370632a79a75de3",
      "kind": "uups"
    },
    {
      "address": "0xB12e5e23620aAd40307f622b62778E172802795B",
      "txHash": "0x3cc4ea2d0be0b18b3b5cd0540634842e41b32a3486c2a9fd56e6d0e26227da78",
      "kind": "uups"
    },
    {
      "address": "0x0F3Bc0Ff80Da8AE94b82e6768f93a86D082F2e38",
      "txHash": "0x3379ed955c8ed26cea476c2a481550a384671df1ab75720a883c1529eb6afcc4",
      "kind": "uups"
    },
    {
      "address": "0x7fAd6f33Bd3561C2335C7E853F1fCbf980b62A34",
      "txHash": "0x8fe711100729b35456782e5bb69ec470e7a30c9ad4dd50ae709882c28d2c60ed",
      "kind": "uups"
    },
    {
      "address": "0x7BC87cA12e663B0194b1818e701972D638A9F0d6",
      "txHash": "0x4ed77954fc8b494992c558036e5ed4a5d5da97fc20017a2078a7a0a963d48715",
      "kind": "uups"
    },
    {
      "address": "0x26345cC3fD977AcdC91Ef0ae1cCD95AD4c331717",
      "txHash": "0x3f1a06554cb464e0db7f6f45499e17eaf75464dbe9b3df18ff7357c1ff8ae0f3",
      "kind": "uups"
    },
    {
      "address": "0x2F43321795b2C0c20c7e57d079E6f610876F7b39",
      "txHash": "0xa71d8eb2ff29cf8284b9193ce5290aca933230afa99261762f2c357e217e9119",
      "kind": "uups"
    },
    {
      "address": "0xa98214cf211ba3f5be6dFf077c820aD42F630736",
      "txHash": "0x470a023badf7efd6f2278a529d578852c3e72ad19f3888c03469393adaa43816",
      "kind": "uups"
    },
    {
      "address": "0x051C51EFA34Ee3092E4750EB5CBAaBC5e6E324e2",
      "txHash": "0xcfc7548b2e1e8554afc56e808b1310c69a524bf4ef7cb266881aa1102b43d515",
      "kind": "uups"
    },
    {
      "address": "0x7C47D457b99ea9FFdc6721e3022f1314b571c2DA",
      "txHash": "0x272e579c2a716df519af51de82b723b98803124f5edcdce56bc8a8b1d0665616",
      "kind": "uups"
    },
    {
      "address": "0x30847E2EBe3CEf6935065AAeDA463e6626fBA048",
      "txHash": "0x70dbd99ed113d1a276a49c21d21e9a95bf0dbb9bcd86f1e4b7cfb095920d008f",
      "kind": "uups"
    },
    {
      "address": "0xf25D281F7bFFF6931F7654A27F9E1E4873f32390",
      "txHash": "0xf0a1758b07dff2480164482eb3abd966c397268af2e4021e17112fcccf52dee3",
      "kind": "uups"
    },
    {
      "address": "0xd79e737da590A7C645ca45cE88B3Ffd0aa4CB18B",
      "txHash": "0xa8d231baa29eed99bdafc6c56fa7815a5522d47acdf09ce734e31cf91ca58a8c",
      "kind": "uups"
    },
    {
      "address": "0xc8c107b6769f191De422d03f5591A7E19e9eEeb5",
      "txHash": "0xe80518eb5e73c580b287b6ff5a9ca3917a53e7a59a67742bb54534e64874b3b6",
      "kind": "uups"
    },
    {
      "address": "0xAF8Ab756f8fC19A5387f67e0a899eB75256f4480",
      "txHash": "0x8480d46dfef1ec1b712ecd4c8aaf674edaa2fa02f8572192903687246e530e0f",
      "kind": "uups"
    },
    {
      "address": "0x831ebBb649d4100265018C604b62049EE44f260a",
      "txHash": "0xf179e484a4a1ce61dbd9d30655eb8ed834287aa34402f55be046a1e0e135a21d",
      "kind": "uups"
    },
    {
      "address": "0x67437E04Cc15617a0aBef721722446415dAc5159",
      "txHash": "0xb808c87215efb84657122bb6370d8e6a71c25422908733baffa91ab4dfc8017f",
      "kind": "uups"
    },
    {
      "address": "0x49D55B4d08E19e450E3db56cE3BC7825073e8D79",
      "txHash": "0x6607f350425319e5e00c69bc4b87a2b2b6231b9a7ec70b5aa5725e6239a70b39",
      "kind": "uups"
    },
    {
      "address": "0x7D1387B1DD294633B544F5cAcfE399661d3A25Db",
      "txHash": "0x05ce8e175b8387386919f041a01b729abf7e92a57d41f1aaac224344d79e7d67",
      "kind": "uups"
    },
    {
      "address": "0x159915E6fd844C89189382ddC88Eb0CED7215E46",
      "txHash": "0x08bcfa8ea9557b956f3878855f58bb683340eca414cbc57a139feb31ba0e27e0",
      "kind": "uups"
    },
    {
      "address": "0x6eB0905992FaA6aCC89F0143f9cEf60C27E2509D",
      "txHash": "0x9637a7c61d8a2003faa3c95eef0110c299a321a89176fe515a4a79b0930fcf83",
      "kind": "uups"
    },
    {
      "address": "0xA89716F03be708C9d12B68D165c7E26f2873F25e",
      "txHash": "0x7f72d22ec302cbe0dcc23a6aad9d516d6d66a1b1c932ead6d1e69391adc84690",
      "kind": "uups"
    },
    {
      "address": "0x36F45F083F23ac5ef692f6db3232325A55aE283A",
      "txHash": "0xac4e545830d17a345b8e18f2f6a2eea30461b15dd028df858ba0bc09774bd79b",
      "kind": "uups"
    },
    {
      "address": "0x5FFD3E9612ACec5b88cc66f0fb12a20723eD4B58",
      "txHash": "0x08477d89d31b1b90fe73b39643e94085d6a50dfc2468a41bd5319205bd41bf8b",
      "kind": "uups"
    },
    {
      "address": "0xe0523C0637488409118D784Ea62743Dc0E57c3b0",
      "txHash": "0xda523ac44353ca752e9bf6a96640c0eeecbaa3592974eb50627dbb46aa1a99a8",
      "kind": "uups"
    },
    {
      "address": "0x8E6A197113209f1beA74beF071e30647F9b00A12",
      "txHash": "0x1709f57e0e23162e4b677bf6f0b27510f969e4fb30fdfd9ebbc771425dccdb1b",
      "kind": "uups"
    },
    {
      "address": "0x917d48ee281404c1B1Ffaf5F0F2F4406AaB70E8c",
      "txHash": "0x5d055ca7e9a870f759d2dc5ab2176603045cbf49fe94e1a5df8e25d4b5cb5920",
      "kind": "uups"
    },
    {
      "address": "0x18027F40c42967D7Fb6dd8C1eAd3b0FbA6E42ce8",
      "txHash": "0x726411c5cd4888e07b755a825e6509fc0d2b98f6fb4b9ce8c8f396a10f8b76ba",
      "kind": "uups"
    },
    {
      "address": "0x88AF6D4559cfec183E79ED5d9766f7FB47584Fc7",
      "txHash": "0x9dca9ffdee4318182bf817ef3f0a2b00eccd4363401b0b6cd3c9c41e1346cc9b",
      "kind": "uups"
    },
    {
      "address": "0x14AF216d8fEA54f8fd1A36D89818885093191022",
      "txHash": "0xf50518714b47c131eb7f7bc905f6c09b9f3b7da3a1bf30c8f1bc41b48fbd852c",
      "kind": "uups"
    },
    {
      "address": "0x7C1f1b43E4651EADcA5C91d0c4E0460D8936c0e8",
      "txHash": "0x81f879d8c9c4aa1c315516edabb992dee1347fd37a62cc47187889ebe08cd851",
      "kind": "uups"
    },
    {
      "address": "0x95fb65F68a4c3473fF2053888d620f0CCe84a4C4",
      "txHash": "0x1fa14cc4caf3e33a271dce25f14589793b5c0d0ee3e974730debca6285df34bf",
      "kind": "uups"
    },
    {
      "address": "0xd95Fe651142B86af0AbE79C45D222B5C818F3A82",
      "txHash": "0xbd0ceb648c0d633e834cc7d2114ac350056a7c58645dc8f125e20502c054a857",
      "kind": "uups"
    },
    {
      "address": "0xa0Aadb274D113Ecbcee423EC8B6d82b42d07132B",
      "txHash": "0xa9fc3bff625c5a67a021a1a1c47ba37f8cd9fd0bfc003268604d73ca9aa6c081",
      "kind": "uups"
    },
    {
      "address": "0xcb7c227d1784a728D827933486932DFcb7DB1FD7",
      "txHash": "0x4e201060318642aa62685846e89b01c601a39248e7b6a29afd76b1fa5165b805",
      "kind": "uups"
    },
    {
      "address": "0xfEA823fd721FB0aEb2B7bB53A62403e5B0f2929A",
      "txHash": "0xfd17a4133fb82a434e15d6de864fb99bb02be13a7337e136e7d459ed460d1461",
      "kind": "uups"
    },
    {
      "address": "0x976BBf810B637DBD70fdc33d772AC8FDbb9C4984",
      "txHash": "0x782a4a9f457387c1b6865942be5462815026b5841b590f15cf9145044fd11b53",
      "kind": "uups"
    },
    {
      "address": "0xF4fc983377bc0Afd3A07CC33e73767E6A879aaF4",
      "txHash": "0x30302c15d0353dbed4f4490c21b6fd7c129350908e9440d771118c14eda0ec99",
      "kind": "uups"
    },
    {
      "address": "0x63A2eeEDd756D974d2cEc856E84A78D6E479bED3",
      "txHash": "0xf15f6c2c534c5dfd8c51c7d7d65c77d142cacb6385c331413b386c72f8d12504",
      "kind": "uups"
    },
    {
      "address": "0x4178E95b63f8b510C119166dA7616BA9105C431e",
      "txHash": "0x725046c9bfddb0c7102d3040ce84c9c7804ac43b90a65d9fb8b5be1cfaf8f006",
      "kind": "uups"
    },
    {
      "address": "0x879a2d7d85a49D18e958Ce6B10c21F07351bBe73",
      "txHash": "0x3d5b3aa59f03fa8224d42ae1c4674ec7f6be237af377b80dddfef22fcd0a3b00",
      "kind": "uups"
    },
    {
      "address": "0x5a6A742f7d38AaD997E35EbB29136d8bC5930C43",
      "txHash": "0x4f009b8cd7f9293e6c7258452b73f70a40114b44ee9b48a2bbf13b91486708fb",
      "kind": "uups"
    },
    {
      "address": "0x8a3BdCB8b5c3008e34577fcd32cCeA1D47600fc9",
      "txHash": "0x8397ca9f386fb605efaf513dbf2429486eb04ed94d0a46dc44c55711f4d35c74",
      "kind": "uups"
    },
    {
      "address": "0xd0e9a7E24FfdDf0CDF528959d367e17cDc50013D",
      "txHash": "0xf32300ffb4b0be7864743e8806ae606e410893a7fe69735e6ca20198cdeade83",
      "kind": "uups"
    },
    {
      "address": "0x1225993F364bC8cd3125279AD7e194144D06Ac7e",
      "txHash": "0x1692cac3b842527f1b177d43c0330657ded4fe56cd1e07ab8529c062569b1fde",
      "kind": "uups"
    },
    {
      "address": "0xCD656cFa09705D7390bB871B8534172a2c410698",
      "txHash": "0x6b4aa2ce8fa59d230279237581b3333997fdd662c6c9fc09dc57998147afc5a2",
      "kind": "uups"
    },
    {
      "address": "0x7da65692d916d583ca98543BA73c503afFCe6d84",
      "txHash": "0x3f926d64f3089e62970db50e38ddff6875a5f693d49a759d24fb90db55146ec6",
      "kind": "uups"
    },
    {
      "address": "0x3b24D3190C990d2634041147e9C1D872f2B4AF46",
      "txHash": "0x2b52294926b60b62a1b26862b076b6b56c24a8949ca0dd98175327afe6e542db",
      "kind": "uups"
    },
    {
      "address": "0xbF87fb59D7936e101AfFe1B305BFeF55604A0d83",
      "txHash": "0x5443abbd227ea0e8c3045cfbe9ef796c78c27a645df82b6074621923b8b4181b",
      "kind": "uups"
    },
    {
      "address": "0xc7e7F9F8Ea2ceb6f8893dAD2b8d28e20b7E302Fb",
      "txHash": "0xf2630d15e119793c81b67291645157a59c2ef8ba0c7a65d283ffa84d4b093a43",
      "kind": "uups"
    },
    {
      "address": "0x964d6C17e3ca304E51B6b854845D9b2D4dc97E78",
      "txHash": "0x3c5b3ccb1be8ec5b7867b53ba9ede15d41c9685809959fc48c59d919391a5b8f",
      "kind": "uups"
    },
    {
      "address": "0xeF42E2A4f4EA2E42CFb27f0E8aCE2E976816fF2C",
      "txHash": "0x4abe7b46f98d0dfcb9488e71a5c8b4b45b7594295437d75812b507e4d59d4228",
      "kind": "uups"
    },
    {
      "address": "0x202E99bb2671264c71f9fE1c163DA55F99e9DE63",
      "txHash": "0xfcffcd2bc36ed27d8a7d17b8801ea9ebe486f11725b870ba1fded080f0826b4e",
      "kind": "uups"
    },
    {
      "address": "0xD20Cd854BA0d91303AB9BD678222E8b64b8599a0",
      "txHash": "0xf00a6f47839dcdb73f12c2fb38a335850c4ef42dfed6098d9eedbd0c7e756738",
      "kind": "uups"
    },
    {
      "address": "0xDA1e1a9aF824041Ce45E155f3A7C071cE73A5752",
      "txHash": "0x7656562d8ef30dff34129488f87ce0e13ec3d57348593d48aa064003b87dea59",
      "kind": "uups"
    },
    {
      "address": "0xEF2A9AC52c0bfFb4C494A19FF671352b00b0C805",
      "txHash": "0xbe90d62f36608b1d3e2f3de2a309a411683ae2f8f7178e110f329f414a9a5aa3",
      "kind": "uups"
    },
    {
      "address": "0x6844766AeF7CaAF1A0B07e197E1d08EcBeB25E52",
      "txHash": "0x273d41cb47bc51aec19c6b22b34e64ab5c50313f78926a989ae37f5e6764f6f8",
      "kind": "uups"
    },
    {
      "address": "0x7BdE25c7A7501b91C54C9569eb575C43a08f5DC7",
      "txHash": "0x840760d77f58e0d85c3cf7934cf12289d12319ba902e8226f109fca1d205ab0d",
      "kind": "uups"
    },
    {
      "address": "0xB66e30d362768E1BFFd0F17858Fc4321447bc093",
      "txHash": "0xf04bc0f5cf945bb28fde1891de72cf7188f383e79361eb89721aa94d761dd3e0",
      "kind": "uups"
    },
    {
      "address": "0xAFCF44f92BB2825429b406Dd599B20A25F94ECb4",
      "txHash": "0xb40a65abe19538ff2ac84b9bdc1eabc4c1408d0cc8b6bcb974c9c13cf51ff15d",
      "kind": "uups"
    },
    {
      "address": "0x81dC62dA4DD34725D1a9abB3f7516d69B7F40bb9",
      "txHash": "0x21c7e1ceb67cd7bd8d48f0e0cd3c1b2873a9f39bda2f018c050c6766bde80276",
      "kind": "uups"
    },
    {
      "address": "0x6F4a4b1B315DF93D2D200182D3E04378D4A6d344",
      "txHash": "0x26a057fdd05498344eaaa347704deb8bbf2bcf2b5880c4f2716607f76e1a623f",
      "kind": "uups"
    },
    {
      "address": "0x18D883aa0ff864b1DD18edaac410eaE13a1DFDA7",
      "txHash": "0x3254a07c28dd35cd34f228a79c0999be9bb0e413c26098442c1fbfb2d593fac9",
      "kind": "uups"
    },
    {
      "address": "0x9ddDA595088Ba087835a0FDDD0e60FBA7A3BB155",
      "txHash": "0xe6a42895ba875616ff5996a705a77d2442823d743fba9ddba2a9b2457a544e05",
      "kind": "uups"
    },
    {
      "address": "0xDf59f58Cf4e1F64B23E7B9F3A913D8EA74F4DeE7",
      "txHash": "0x7c88e2a4a98587173808ff69d9ef13a170e54a1817afbfe2520667fa930b3be7",
      "kind": "uups"
    },
    {
      "address": "0x285018618B14Ce3Fd63C6662328c6a088b9Ddbc7",
      "txHash": "0x0e2d4f71b46e10b3143b270449f4553fd7e853c060acea9172240d25d8cafa42",
      "kind": "uups"
    },
    {
      "address": "0xCaA72251eF4C44421C9B8a8DeeC7926D48fF1F50",
      "txHash": "0x30bd232781a9deeaf603c57b4565837930cbc707bb9d8074999f00baf91c165d",
      "kind": "uups"
    },
    {
      "address": "0x6bc1c49aAde442E0428308D3b82473599630063C",
      "txHash": "0xb50d8d6c366a876090d78f21e5561097d408c049a22cc8db821960702ef08e0c",
      "kind": "uups"
    },
    {
      "address": "0xc9360ea9f41a3dbF15FE31a865D6D9475C3A2C42",
      "txHash": "0xa6f84a6d7b3469f740d9ecf3b71f21700957e3959e8ac992f11487c2b1ece405",
      "kind": "uups"
    },
    {
      "address": "0xCD02C61B39dF20214064C06e6b66aa8d3D6d0a58",
      "txHash": "0x99f21e100c304d7b8abc6917e93becb738ec77c14eefb58d6895164ad43bbd1a",
      "kind": "uups"
    },
    {
      "address": "0x2930b8008234b8fFC84747EBDd298C29f132A0F1",
      "txHash": "0x3305757e613ef6888324051f2a6f398113cd5f8536b177017f6310b541c31aef",
      "kind": "uups"
    },
    {
      "address": "0x99738ba6Cf1DFc7c66e2E9a05d1F8942ca5f36E6",
      "txHash": "0xaf528eb26236c5292a82897cd41b9c5d6159bd3c336969614e31a7ddcb5f5810",
      "kind": "uups"
    },
    {
      "address": "0x62dE285F3D58ae7B54274Ef9E1DB0c9D1601609B",
      "txHash": "0xe3ae3219df1f52e5e7cbff4966cb9949b502d1b259299c4c4cda5f5f9956a670",
      "kind": "uups"
    },
    {
      "address": "0x0892bfaB57Fa435c3C9Ca838b16EA12477550449",
      "txHash": "0x167af975cbdd21d260b59e1c181157d8f0a45853381da499588e06219f823c82",
      "kind": "uups"
    },
    {
      "address": "0xE4F1a516728679493082C1DEe3659A4E1ecd5fb7",
      "txHash": "0x1832f3ab19f40e59f9931133be1671363b231b9219db6ceb77eacb0d8f108a51",
      "kind": "uups"
    },
    {
      "address": "0x285791550E6A5fa365a8f092666a750b7Df7FF97",
      "txHash": "0x8f50e995259e21dd367fb302801fb04255dce851a467bc6e65db12aaa5a2f34b",
      "kind": "uups"
    },
    {
      "address": "0x18b09a116f8c4259fD733E17c36CcB5D171A7885",
      "txHash": "0x1401679f17d3453b9b12c07fb7a4745f3683ab81d06d617df487a9ccd563c0a6",
      "kind": "uups"
    },
    {
      "address": "0x8318d669Ce3fe9E8D4a6911F019f6413d77aca94",
      "txHash": "0xadc9456ef86713d4d067b53603381396fcef7a91ef90f045b5a7af8e9b426813",
      "kind": "uups"
    },
    {
      "address": "0xC6554e499c30BAcCE062Ef7a68910c4065dcedc3",
      "txHash": "0x351dd8e49da214f5b143fba00206fbb903d9014c1b04dfff898454d9e90a1582",
      "kind": "uups"
    },
    {
      "address": "0xF2880AE01d867b204fDCfC8FbD48cc1A2Ae6F1f9",
      "txHash": "0xdc28ea625136a9e924458da0b4a4e46234013c6437a3f57cc2736235e974c763",
      "kind": "uups"
    },
    {
      "address": "0xba59Df7eC9499355f6d918DA4c6E8f023ab1aC99",
      "txHash": "0x13ab99db9a27f9b96e5672a9f4ecc790a665c68e7cc71f0a37685ee8a05c6102",
      "kind": "uups"
    },
    {
      "address": "0x46520585c042152B17174Eee8746687A8342B040",
      "txHash": "0x950068509e161054001731b9eee0a357aed430592098f7ba677570a739ed1866",
      "kind": "uups"
    },
    {
      "address": "0xd6D7097fC6692f0D8753Db5E418A840e78ED4b0A",
      "txHash": "0x09e27972c03a5c08293a02e908a06d3940ed65f9eb402e40588e6f372d289ab4",
      "kind": "uups"
    },
    {
      "address": "0x5aeB353a01b2EeAAEc0Cd0B251475706634A4eD3",
      "txHash": "0xe4a5a407433d39c0c08db9b226b05fb0c1be45deb5e7900d9a8823a1fa6dd164",
      "kind": "uups"
    },
    {
      "address": "0x2099C2cF37CF2996bD45d2FF7f1859f58917D766",
      "txHash": "0x74a02de74e215a3f6f15ab71b7fb4eca79d411a9627849e7715952944caf3c8a",
      "kind": "uups"
    },
    {
      "address": "0x43a2fB830C6DfDb6568a3BE712C783d81ef35d4c",
      "txHash": "0x806e42f1171cefd24764297c2914db4fc57f069e8c27878f1d007fa4c0ec05f0",
      "kind": "uups"
    },
    {
      "address": "0xE9Ebd2D00A5eb74B85352277c5CF55738c5aAD38",
      "txHash": "0x9f8c7a678e5b82dc9bab3cbfdd3407a161fe372dfc6a3640a0778554a4c9b87a",
      "kind": "uups"
    },
    {
      "address": "0x6046DC204494D0138F83Cfdbf1488eE486BE11d8",
      "txHash": "0xbe6509944805013532b9537aae596e85253edc5ec5f6d3f989c9c85d8634b777",
      "kind": "uups"
    },
    {
      "address": "0x4BD5CBc39dd13Bca506f5639fb95C70038f94D04",
      "txHash": "0x8cc0d2e7eab140b842645a08c28e97a9a4c5b6d8e97bcb116a0984478742192c",
      "kind": "uups"
    },
    {
      "address": "0x90Cde1a52577490Bc83Bb1C0EBa2E20953551e91",
      "txHash": "0x35367b54fe103a3d541a3c266f545d0a9f4ab149ca33b6ce1cac996bf84aba75",
      "kind": "uups"
    },
    {
      "address": "0x4936ff8324D94EF3da3F2833FD4953aAf6B01274",
      "txHash": "0x809af96c75da7d1269f3af6a378eb439749b9253f9e8f8b91df654ac29a14bad",
      "kind": "uups"
    },
    {
      "address": "0x3C93c2e4B935B1D7e4b0aab83575D47B247380B7",
      "txHash": "0xdf5c5a0a72ed2b0f8a04ef66ddc71c3f04fe04690ca286aaecd92e679e3308d7",
      "kind": "uups"
    },
    {
      "address": "0x635B7992786F2442b6E951d74110Cc8039e29E53",
      "txHash": "0x5e240d54018979cb26bc0ea7f97ac1ff46061df8aca963ed99fbbfcfa761fb02",
      "kind": "uups"
    },
    {
      "address": "0x3a5C1E21165841A7c25003C8EbA825cb0D8fBE15",
      "txHash": "0x1a627c23bec5468e4a400560bac53fb49eeacc6816874ff81be81ac6ca961c14",
      "kind": "uups"
    },
    {
      "address": "0x788dfa089Ae9948CEacfFd19d548D45Aa2c40752",
      "txHash": "0x2d729ef8f8745367b45944f5d9c3038b63d29aaec46a9903c558dfd841b158ed",
      "kind": "uups"
    },
    {
      "address": "0xCdBD222A2d28aF74Ac65C31b4B23a7C6f6c8D3A4",
      "txHash": "0x3c5703f8549f8c61d54bdae6b7b280257af51d1f5bf8fd652af03254f7fef37e",
      "kind": "uups"
    },
    {
      "address": "0xCA858E86fBca8517C188025a2aD10ab0Dba34436",
      "txHash": "0x4f17e5c7b1e1170d491fc524517fca0fb2bce3fd2a127886121d28a437d1d26d",
      "kind": "uups"
    },
    {
      "address": "0xea6486F4065C4931343230695B089477840Fd0f0",
      "txHash": "0x57130af04bf4a9612a1dddb0bfaa1bb1ace786614a1bf857b63fc042d349d369",
      "kind": "uups"
    },
    {
      "address": "0x0870b22F85d59Ff4E138B438cd46e03c0B7e4fc4",
      "txHash": "0x472c9a068020cfe5f803a3007342c1264cbc3b3c8cdf74dedd5b30c111514f1d",
      "kind": "uups"
    },
    {
      "address": "0xA1b917215B370920Eb45Cee83196040d123711eF",
      "txHash": "0x906e58350df0c07e41d129ed4f049513f371d45ec34e0652327b70b2775dd9c7",
      "kind": "uups"
    },
    {
      "address": "0xb6336f042AdFF987e56Ec03b8b69BFe60d59618D",
      "txHash": "0x60ef90517f768e804ffe248fd0bed1045cc2d892fcdc1f37b75a1406a9784833",
      "kind": "uups"
    },
    {
      "address": "0x56690e52bDD3a782D4605FA024EE97951aAc2Ff5",
      "txHash": "0x2c083732cdc186e872d809456655be07335ed98a74144057e0645aac6374b341",
      "kind": "uups"
    },
    {
      "address": "0xbBab7FEF42675C5b8657643c37f5B269851d1eFA",
      "txHash": "0xbb82a69b6ea31795dbac32e86452d87d2c1e0ac1986b5d27132d02e444e80a1e",
      "kind": "uups"
    },
    {
      "address": "0x591FD65CC30AFe103D507873d801e52c5858b92f",
      "txHash": "0x5e5b7aab1c9bf5487a6c8975248428a7122d182bc02fc4fe59fb70705c83eced",
      "kind": "uups"
    },
    {
      "address": "0xEAAa9E1EcD6b26633616f81636380fa61307944e",
      "txHash": "0xa2333eb2cbad0d995bd0aa23b64b9f4dc498c15a1382a99019b396df97cf55c2",
      "kind": "uups"
    },
    {
      "address": "0xAC04f74a9FeFE3EEA654DAC05a3e4755c3ACEd7b",
      "txHash": "0x3295ccb1f0d0b34dc0eae450f42fbea7eecb7d68acf5ef138418258872190889",
      "kind": "uups"
    },
    {
      "address": "0xFD06AB638384B5444cb3709490DeC8A5A00247e8",
      "txHash": "0x6b70cfdd104430a224013d783579f4cd486413b0dce234c5638ab6ae727d28b4",
      "kind": "uups"
    },
    {
      "address": "0x97d9C559C88f47E018743668ad299ce0808BA189",
      "txHash": "0xd55d3910752b5ac6b7f9b182604ddff8ecefc117db411d2a10fdd5453cc7c134",
      "kind": "uups"
    },
    {
      "address": "0xC56210E02E2eE7acb4C5A21d3ffF5c7853569090",
      "txHash": "0xa8434f9bd2160e53f0c515016393698ca210459105546244b6376c0af314b14f",
      "kind": "uups"
    },
    {
      "address": "0x4593904cA5f29d563bc628ec9d709dD23b0472C7",
      "txHash": "0xa9363983699d92edd96ccb79529191ae454ef83a08460411861443b6245ef85a",
      "kind": "uups"
    },
    {
      "address": "0x5ed0Ce2fCf4e5f7ed605A4e7DdE302393d93A989",
      "txHash": "0xd7a398bf867e7ea131929dfdcaa9ed5cd4a4fe1916ea9a8c9439185b390d887e",
      "kind": "uups"
    },
    {
      "address": "0x7C7CFC2d23EB765cd6a5C958EDDB874982ecF24d",
      "txHash": "0xd190a9ba9547a44e44fc76e39c21f44b50be0fdb436b7a0d2cc4f99760900443",
      "kind": "uups"
    },
    {
      "address": "0x681D569770b4D7216bE2E284804b26411D872F6a",
      "txHash": "0x40de77fea274f607a057f8bc223f09f172a29c92f711aafac9c2a4fba3b18a82",
      "kind": "uups"
    },
    {
      "address": "0xe22a078D38E05EB2538Ef77Aaf372a336d9cE08D",
      "txHash": "0x120fd17d60aebdc46d4cb89373ae7ec7fa04dc2537b935f64079990a7cd6c2d2",
      "kind": "uups"
    },
    {
      "address": "0x8bf72473997Dd07D02C7F34dCA244F00bAb6bBbf",
      "txHash": "0x4b839d3c905cdcfaac5acde9c08d004f0c449cbc686e5b7b4a76866333d48bd5",
      "kind": "uups"
    },
    {
      "address": "0x47Ed0A90894EDec81a5fCa3a8873Dfc753d35FB5",
      "txHash": "0xd9919068aa9aa095043fb5b69693b534f71e6ce0026ed379de7ca77b832f6051",
      "kind": "uups"
    },
    {
      "address": "0x2Ee421C7631c7D8a847D584B1e8c6CfBeE82f4c5",
      "txHash": "0x2c34c51c27a7e7d64af73c94c7926ab7109fd8e066ecdaeaa72a413fa449e499",
      "kind": "uups"
    },
    {
      "address": "0xbbaaB248BAc26dA3E0D394508f14B7631B5f8a73",
      "txHash": "0xdcaa77440cf27f0fe844afcd625883ca6ef576a19c0dcbabf345a7c0106b3996",
      "kind": "uups"
    },
    {
      "address": "0xD149fFfAc5e3f3b46f1f0b44c146dFDA9F68de7e",
      "txHash": "0x0363f5617a1a28f14ff6f9d5862b24a26d2b1075aa1abbfa893f286e7574b4b9",
      "kind": "uups"
    },
    {
      "address": "0x49697C5847C63ed63c7F9E7099eF7ed8BFb44EdE",
      "txHash": "0x47db77d4472870eced4ad763e3c6ba1b58b5636bcfe9dc2c705ad274a1654f61",
      "kind": "uups"
    },
    {
      "address": "0x173532DB913B4e47Ecc6940a7580b48850741D8e",
      "txHash": "0xf553d851d093391024b4788bef8c3670ff3d7f0d65297e643f891220559a9418",
      "kind": "uups"
    },
    {
      "address": "0x7eb50AA37425cfE2B96cDF39F24a46D5813d5014",
      "txHash": "0x0f080c6c7cf7e035f926008e7b4bdd73ad311881dd482279a32b1b28709fb592",
      "kind": "uups"
    },
    {
      "address": "0xc9bC4CFfB38562D761B18047e782Cc560826Df5E",
      "txHash": "0x8524609c2be2d494a7635cf105f6018041573fc1b80072162f1c2f2faea12f54",
      "kind": "uups"
    },
    {
      "address": "0x0f9f759A767834D90eBA1eb40532407C974aE33B",
      "txHash": "0x9430e3ac9fb2a9446874880812efd3fccbf43d6a6838dcc824db1c158ed95146",
      "kind": "uups"
    },
    {
      "address": "0xcEFcdC8B24Cfb9d7D06734dc337004a09c7af21F",
      "txHash": "0x6cff9945a7c8bfe4df83a8a579521b5de5ae0c66fb9480b3bda0bcad396e5596",
      "kind": "uups"
    },
    {
      "address": "0x91a95d9D641CFd527f62ADBE3A4907aBf9DCac60",
      "txHash": "0xf654adef247a85cea88aff2b3d3178ee9209114f1bb6ea76511496a39a8f7c96",
      "kind": "uups"
    },
    {
      "address": "0x3A471426B34171faDBf1bb507ef916eA699D215c",
      "txHash": "0x60365295bc585ef612292e533ad817f38de837289776aa8d8cd762e193e1d41b",
      "kind": "uups"
    },
    {
      "address": "0x3f7761CFaDe39B4a742C614E99452d8FE75EAd2F",
      "txHash": "0xf05f39e53739031a73f18e3da50e040c402db65e3a918da495691e56a6aff57a",
      "kind": "uups"
    },
    {
      "address": "0xfe06fCD0e26B3B0973402bf1aE18Cf774F65AC38",
      "txHash": "0x518aed33547fe82a47ea712235f630b562aee8a6b9346ff998907f580cd9af60",
      "kind": "uups"
    },
    {
      "address": "0x5a871430c3DB55F875156a50760eaB51bf9cAFaB",
      "txHash": "0x30940bc53640dd9e838976ce36863352ca11c6264fc237260cb750f49f7ca5e2",
      "kind": "uups"
    },
    {
      "address": "0x6ebB8Aa762c18286cf70956e903eF1e2db3b4542",
      "txHash": "0xd7682fc756738471d3c5850e42b6434b2bcd9f71e96ee10bea4d48046546c652",
      "kind": "uups"
    },
    {
      "address": "0x852492d3618CdFDF8dEF4dF974991d68B482df47",
      "txHash": "0xfe8c96457874932da27d559f7be68165fd5207732fbf1579ec8f093dac7308b7",
      "kind": "uups"
    },
    {
      "address": "0x2E03564bCA002286f89f0AC065883bd475fEB75f",
      "txHash": "0xe23d4c6a81a26e10184f5efdca7ef0c5dbdaeb621ca6b2fb789e86660c1a06dc",
      "kind": "uups"
    },
    {
      "address": "0xAE8208af524C27cCFCd3A0c46281Eb270396f5eD",
      "txHash": "0x71f633ed74cfd5d791521384e9a0ff41192ae80606f244f9ff116f0929979256",
      "kind": "uups"
    },
    {
      "address": "0x870b1e31e2Dc5BAa9094C0D1a616aDbd9aa68671",
      "txHash": "0xe69794d23d08feac7151f9a4a2318289748accb2862e295cf65b8499539f36ff",
      "kind": "uups"
    },
    {
      "address": "0xaE605839Effc41b4eab70B31a1BF2Fa713cb8bbb",
      "txHash": "0x0fe10457bc9aedd54fa58612af07e10d638ef78541b4f026daab9077d5c1d192",
      "kind": "uups"
    },
    {
      "address": "0x14577e9C34a06B149E4e20bB0CA4c26caca72d13",
      "txHash": "0xf3b2e497f0847132ff08a0105e68ebef0c9d83a4d9344d9d9bc5c96435edc3c0",
      "kind": "uups"
    },
    {
      "address": "0xaa81D4b9895c93F41bE754bE539f487fCEf09C42",
      "txHash": "0x894efa8f80de85783627de732a3506f4e7a661f5137841eb1d93dde4595c34bc",
      "kind": "uups"
    },
    {
      "address": "0x79B6d555855Fc3a4047Cee2d262F89A4B9D655aC",
      "txHash": "0xd04203076b8832296ac03b88668a0b3d303cbc7db873874d21544695bd6c86a4",
      "kind": "uups"
    },
    {
      "address": "0x7434cBfe61A8eA7Ef86CD6ca9d449a058B1Ad2d7",
      "txHash": "0x1e0bfd22d8f3ddc46cdedf4b13e468f43169eb005eaa1dd18b2ca7533f5cf65a",
      "kind": "uups"
    },
    {
      "address": "0x68C99Ac870CfAbd93cbe82FE98eD81FFF808BcDb",
      "txHash": "0x2ef68ea7d3dacbd4ce4b836e6f5a5d179532abd7a8e9ea159724e66617f97c8a",
      "kind": "uups"
    },
    {
      "address": "0xaD8978b39Dd43E6203BEc10051F7a4A50FA814fc",
      "txHash": "0x1cd2759dcb1213dba705be147295d26d7b62693bd66e92407f211c78d9aed70e",
      "kind": "uups"
    },
    {
      "address": "0xbbB979C7F7457816A24454761Fc5Be252F344459",
      "txHash": "0xd816954d3c87125755749c61600e7346fbc9f4833eae12f89d966e96de231d40",
      "kind": "uups"
    },
    {
      "address": "0x5CA712Ff572DED562A6A2eD0C6212d071B107935",
      "txHash": "0x78297caa7e99a1593b14881a40f468c68ce380989da6b781ced94b4511aaf022",
      "kind": "uups"
    },
    {
      "address": "0x8E62794beF9de7cD66C771D6DED804D9EAf3699f",
      "txHash": "0x70863f761af35b693ac442c14c8c371f5d9b9dd9d25b3fb1cf68fc909be83b5d",
      "kind": "uups"
    },
    {
      "address": "0xB817d6b6fC570684FEA77FC157241Ef4BaF90b29",
      "txHash": "0x4f9f08a6a0958fe06ba1fbe1a04eab0c27c4860e254c1cd1b11bdf2d9d8514f8",
      "kind": "uups"
    },
    {
      "address": "0x30FD58096f56c3906ecFf6d4B1E1bC0B034DC899",
      "txHash": "0x1fc06db2bcb20c6194335d2aa35b1f27553a72a8620322e7c0c43f5eecdb3e42",
      "kind": "uups"
    },
    {
      "address": "0x86a7057A2D5494cb5c050cc159d7C34dbE0D4b2C",
      "txHash": "0x398e2a92a1afa875986d0a099dbffc7b70e25dc947d03ad77e081bc2889f0e65",
      "kind": "uups"
    },
    {
      "address": "0xd6A9F54641C76C1654Ce051bE7B20cBDAC6D8c05",
      "txHash": "0x93fc6ad1381b0443dd4cdce2628c45c27c3873e548414b1a217e38538dffc763",
      "kind": "uups"
    },
    {
      "address": "0x1E41C37BC18ad1B37De3aaA725aE8b31A23952E8",
      "txHash": "0xdbb94b79d50d720d47e610a3dee58401354d43b866d6953b6d6a0a000d2f88d3",
      "kind": "uups"
    },
    {
      "address": "0xeA45701Fde3712cDB7aAF20533e9582d8452a827",
      "txHash": "0xf8b9170f86bb551d7762df5f97e7e4bc2a7af78c20f1bdae23b4d77d8f8af87f",
      "kind": "uups"
    },
    {
      "address": "0x13f3AE0f9F7f8893D130d8E7449446C5526aF100",
      "txHash": "0xecd1f98e391318728f1c09c14a71dba4d59d2e0c7e140864f551b700ee3841f3",
      "kind": "uups"
    },
    {
      "address": "0x42F1AED22819c77F56F82840e0FB25E37bdd7bE1",
      "txHash": "0x7d49aec4afd66e89d2cbc9374fb7a8ec21cbf0ee1c86857b99694359bcebc8e1",
      "kind": "uups"
    },
    {
      "address": "0xe33Ab4e8eBC9De0845A5055E23BeaF60bcd778b0",
      "txHash": "0x1fc325565551ac100627d9568f8350fc44923a909451dde0b276c93c24f3fdd8",
      "kind": "uups"
    },
    {
      "address": "0x15e4D6834a4857B11bb979666533e26F594bD6a9",
      "txHash": "0x0b254d944136c475b8f1d0e3153dce33ba1ecfaf39523e18d401d6dfc65d9462",
      "kind": "uups"
    },
    {
      "address": "0x8e9Ff6AAb55E810233b7EC649706773E1081f390",
      "txHash": "0xe6fb1f09d0605fdb547eedb51665b710778ddfcc9390e04de03835b46418b434",
      "kind": "uups"
    },
    {
      "address": "0x5dD860182F31F4B986319EE4a011277617Bf0253",
      "txHash": "0x05c0f9a841cbbfa07012bd7bd0f3949313ee11934c71e680d61de15aab729bcc",
      "kind": "uups"
    },
    {
      "address": "0x8dc1a483bd6CE40B4d08fBc29Bd924869e597972",
      "txHash": "0x0fab6c41c3b645f7fd90f60b5d8e9307d2c87096a4b3055cb1e717b918659272",
      "kind": "uups"
    },
    {
      "address": "0xADd3C2AD3637eC8f2041D8Ef211d7AAC9b793B8d",
      "txHash": "0x3a02447b70439dba2e7cae2ab93e74bfdffdcad3d0dc563f0ec757d442ee710f",
      "kind": "uups"
    },
    {
      "address": "0x366b6447c3005AAE9DbBFb67aAa20Fb1cC56679e",
      "txHash": "0xb2a22d5cab3b0578d0fe531d1ce129917e102132bf76c25c7c1bde7aa4b4389e",
      "kind": "uups"
    },
    {
      "address": "0xf0eDF363339358932a5819c54F773b6193552846",
      "txHash": "0xf22d65e1607a9559bad38def0d4ee875a7a67464362c05ca4f36f5bdfb0cd679",
      "kind": "uups"
    },
    {
      "address": "0xbF07b9DFC2bCd101C65F6aAa5764bF1E51c693b5",
      "txHash": "0x4419598cf29ebda7f9871b610726fe500382538738d42ad3474636859c919cf0",
      "kind": "uups"
    },
    {
      "address": "0xa0e1c0acc687d3c24a19e8c1CaE0539D4b5ee558",
      "txHash": "0x946b46a987f224fd6684702a89eed97391d3c2ae45ea227a7b6ffb4dcf72fffa",
      "kind": "uups"
    },
    {
      "address": "0xF115Bd5785D5f0F25c15f6a6d258a5DD8aa1165d",
      "txHash": "0xa1e048b68b1e6de855f9cdd5df211643aeb227aeae15c543124b4389eac4eeec",
      "kind": "uups"
    },
    {
      "address": "0x5723D246fA04f4007d7E9975E96e1B117F39cC2d",
      "txHash": "0xb1797f651f3d3466acde5849627941ec521a39649c3a0932e094c912a2a72cee",
      "kind": "uups"
    },
    {
      "address": "0xf96652A830B4C4b167BC4077dB0Bfd221415Dac8",
      "txHash": "0xa07a9de29c964baea84a3850aa8f769470c6a55cc520a9bee6877682a9b176ee",
      "kind": "uups"
    },
    {
      "address": "0x0Ef05ddF5A71A65c7a4814Ef347f46e62Ff4004c",
      "txHash": "0x3a54a07f1c1e7bf9cef46577852a19bff4e5bfc80d48d82a2ac8ef5ef2262b4e",
      "kind": "uups"
    },
    {
      "address": "0x583E76334AD89dB018947E2c19cc7B2fDA2e89fb",
      "txHash": "0x87272110dac6ab04d584eae88a120d9cfa668ffac8013ac0d43b1ae5c030d2d0",
      "kind": "uups"
    },
    {
      "address": "0xA517FdE54263010969dcbd3dda9F9F5B6d438a58",
      "txHash": "0xf62c959ad5d119f7f995ae239ffa8c4786ac577bed869727020502c8610fc00b",
      "kind": "uups"
    },
    {
      "address": "0xc05241EF9C258aED84418D3C9F8025FB0929672F",
      "txHash": "0xecf7115d50b107536867043b9a5591d756ccdbbbec11c4682a2222fa2b6c4a3c",
      "kind": "uups"
    },
    {
      "address": "0xFe7686d4dD99B686B2e2C258a83934355cb6c1C1",
      "txHash": "0x2e3b56fe9a4a4241c18568560cbd5d3dad551d264c3e7989c98a9b18623ab0bb",
      "kind": "uups"
    },
    {
      "address": "0x43B2159418Fe25c2f16c5D54Ff88A47F7ea86f95",
      "txHash": "0x3f0ffcd4e1e25ee86e732e59b2c41157533a6827ab1c3360019be2f662fad341",
      "kind": "uups"
    },
    {
      "address": "0x6910844f1D94C7CBb16f9a714e786bCa24b5D765",
      "txHash": "0x300d3fcb2ea85a71d34952951cef38d621b31b69b0e6a6b2ef4582f8471f38f6",
      "kind": "uups"
    },
    {
      "address": "0x356D77c7C36c1c6673c376D71cFB1B9a25EFC41f",
      "txHash": "0x0529c50a295304393fb03f62c6247b5db8f5b2402984aa9b38d57c091982f195",
      "kind": "uups"
    },
    {
      "address": "0x1cb7aA9Dee5dC4BF564721d76FF945BBFf32C0bA",
      "txHash": "0x13eaad5e90c02edb3a640274f3391483c26b417c2abecfa1a6cc08b36f65c4cb",
      "kind": "uups"
    },
    {
      "address": "0x6C469dfAf19115eC29F13F14F25787309a2091b9",
      "txHash": "0x8a16354dca880edad3696a977f0e4d4fa56a6dd4fa0672d717dd49f458ba456e",
      "kind": "uups"
    },
    {
      "address": "0xb3B563174f2F768B1ba4906437771E5d0D1f0530",
      "txHash": "0xa25f086b48d15d07ba0f185797b0fda5f039331ce57c3fd395bbf23b85251211",
      "kind": "uups"
    },
    {
      "address": "0x7Ed79545691b82fb7d19aa0F284891c4B25C6A46",
      "txHash": "0xe0a1799610c9926dc9d387e0f7cf16010e4c875f27c941768e917d3782970bfb",
      "kind": "uups"
    },
    {
      "address": "0x9F575B5D19F6BDab883F8dE0473cc1D0Cd14b4EB",
      "txHash": "0xb8339f46793390b88502bcd4f83e512beb5f632ea3ef31b1f24794fad4f3453a",
      "kind": "uups"
    },
    {
      "address": "0xEAE0606f7343e58cf64a88E5B8e1889404E287BA",
      "txHash": "0x673a210d9e9838ff7ea00749cb0ed9a60b0e0274f73a82e8f0a1819637a179de",
      "kind": "uups"
    },
    {
      "address": "0x480edC9c6B446d04a86cD28d3a9B271b17764D67",
      "txHash": "0xaa6b9aeb62951616c1ed324dc6ac5cb17f76f9aa396a01bee93258aa17920863",
      "kind": "uups"
    },
    {
      "address": "0xE8ebB85e07A61CDe9c285D6a7f5CC80F898BAe83",
      "txHash": "0x79ea96e16596d7f36f1a12a5af86fb90f82e5f2d362792d74979a4ed0f90e4ed",
      "kind": "uups"
    },
    {
      "address": "0x706dE132aA8C0857bdAdDa23EfE139871114e77C",
      "txHash": "0x572dc4a359c37df5757b0b596e97b409dea2d7a54577315cc1825533952e8d8b",
      "kind": "uups"
    },
    {
      "address": "0xE726Ae8a451309C0dd3c2a49478bF97A50487413",
      "txHash": "0x759c58638d8cdcb938926b9cc34ab8e607b2af3e444c1cbe78f3bcca775e5ede",
      "kind": "uups"
    },
    {
      "address": "0x77167F325D81043d4ED2e7EC73B1335E1d3dd826",
      "txHash": "0x99a284a26f51a073543d5ab981397d0ffe049ee6958d0ecf6dba9c68966062df",
      "kind": "uups"
    },
    {
      "address": "0xBCD474DD435b8766dD3540A838C2b8cfB24411eE",
      "txHash": "0xa575be9256d289848175a4a8337c2e2d24da417d26c5f8c7cd54013a2555bd0f",
      "kind": "uups"
    },
    {
      "address": "0xFcf23e23c1eEa6e908177a9A7AD434fd26bcB2dA",
      "txHash": "0x7ba1f2c52c3c38ce6dcb43abcc95784fda1c36b7de7af8fa58fd56ab093cd885",
      "kind": "uups"
    },
    {
      "address": "0x563c929fC1Abc6625566365D589b26DfEBe959a6",
      "txHash": "0xb63d392074e1cca20689e7b28e78e42123e6505005c3604f42a6b45e59b60ef0",
      "kind": "uups"
    },
    {
      "address": "0xa12A2de98a34F55a4f2539ef7B9941105c0F2E2D",
      "txHash": "0x6815e9a59a7cb03390a8696ac92467c2924a27406398844c023f426ac14eacd9",
      "kind": "uups"
    },
    {
      "address": "0xA52AE8Ac6c1801919A21De77e885835760197769",
      "txHash": "0xd1e6cf05b9d441c5d4f1c3ad06ba81c7a8f2bfd48680f4dbb13d1f3456ad3286",
      "kind": "uups"
    },
    {
      "address": "0x9D06834049f9726D66a25E1D20CA94B9284461C1",
      "txHash": "0x9f6ef33458cbe3de5846bd502c8b6006efbf3584d1607ca88a748edc48a84c9c",
      "kind": "uups"
    },
    {
      "address": "0xF32B5E72F7AA9BE18b6fB492Bb7f023e97Ab982f",
      "txHash": "0xf6592c15b510528fb76ad2637d12eebce535117aa14df5f32a715e65c9fb8369",
      "kind": "uups"
    },
    {
      "address": "0x742ffC8cC57E8Bc02Fd44cD832cF3187a1e8571f",
      "txHash": "0xb6fe2b2b961bfe4f2eb62d6b0db9e411bedb20444c4e4e80e46e06711f4a93c4",
      "kind": "uups"
    },
    {
      "address": "0x691b47280b478d1FA407aC9830765403b2406488",
      "txHash": "0x6a8053e51579a39394848d9a769e92201e29489c6a0e5030a668eb5d6efed72d",
      "kind": "uups"
    },
    {
      "address": "0x11BF8F3af4C063FA541d5830D2193EeAA290654A",
      "txHash": "0x7b8e4a2428a3a14b5a6ac25b812aec735a2dc57dad613321dae75966b4befdd6",
      "kind": "uups"
    },
    {
      "address": "0x0882A8f27c038f083909e4785682eeBFd142D534",
      "txHash": "0x2e2292439635bb2d71641cb406f1fa5a15a403c3e266880368940cf64146020a",
      "kind": "uups"
    },
    {
      "address": "0x5a57d2b2d56A4A5e5FB358d42c337e981286061a",
      "txHash": "0xbb6eb65472630f38cf1005dd1fbb7d49f6c5b8a53312703a5783d9eed5f20be7",
      "kind": "uups"
    },
    {
      "address": "0x70eda439b6e26e3908AF3Ed24fbcCE559f068fba",
      "txHash": "0x4274919d613a261da4831fc742711d4df0e99bb221fb8e3d79e37295b2b666c8",
      "kind": "uups"
    },
    {
      "address": "0x107fF8139d64119e7138cEFa2D4d70319e87C333",
      "txHash": "0xefc9d3f6e361a2d35d86d632899adab55bef34bd6b1df1ac61e050d44ad595d8",
      "kind": "uups"
    },
    {
      "address": "0xd3C6D9925208506BF225CD04F321Cd434093B6e0",
      "txHash": "0x938bca47d0af844a44a0ce1167e85a6cf066aa43f74129fc0439b17d6e17a729",
      "kind": "uups"
    },
    {
      "address": "0x1705290d57F5AFeB6DAbc20d3a860E7491d33a19",
      "txHash": "0xaf4c5e67dd2bcbf59f272afe8ce89411701cfd8fd73047a6a735486a49253e34",
      "kind": "uups"
    },
    {
      "address": "0xCFA28D353c9B7541896a6879A003470140a2152A",
      "txHash": "0xf898e31ccac7b9f75f2e7fdf55879f04ba57eb765c027494983e5177e78faab4",
      "kind": "uups"
    },
    {
      "address": "0xA1FF755677619c944fa1274059747d86139619Eb",
      "txHash": "0x6b74fbd9e7ffd0d21d354b97e7ef2c0c66f017c11358bbb07c7eb959f08a6905",
      "kind": "uups"
    },
    {
      "address": "0x293f64c1FDb8cf1DC46e162283172bC6eB6551eD",
      "txHash": "0x2c2ee63f3a2a7a6c18e94ddf3b7a259ca583228a70df73f426e83e17c8e04c11",
      "kind": "uups"
    },
    {
      "address": "0x3566a2c98F2b16CfBA969A19698CB101e59cd796",
      "txHash": "0x5752c58a664718ccda677c3f84d24f3d1d3f6cdc9bcc49144829988650256788",
      "kind": "uups"
    },
    {
      "address": "0x36A134ae3372E461313bcd6BeEDFced461aB5Fd5",
      "txHash": "0x554fc28911ef87fc77e7bc9257bcfc662458578ef033bcd4e3acbefed042b313",
      "kind": "uups"
    },
    {
      "address": "0x0842407cA187f9E5709F424fE1F5F6923BCadB7d",
      "txHash": "0xa0b0a547aade674929b09fabb4890574a8d9626a28d1aa8fea845cc76560ff73",
      "kind": "uups"
    },
    {
      "address": "0x37381A562CBcB45133d36B0738b3B577F06D5D0E",
      "txHash": "0xc8c7ff297e1a299f0b8932c6f2fd583f2b9320ce5520ebbf1be68d2381bd779a",
      "kind": "uups"
    },
    {
      "address": "0xe2b1928481AfdFBcEF3a8976128347845003911F",
      "txHash": "0x7366f684e3a4cb5a8f8df4f3000f87b0209fd6a052bf97ca705463c59035c85a",
      "kind": "uups"
    },
    {
      "address": "0x3f90664a3D8C940F8116A7f69B08663cA59f2955",
      "txHash": "0x782860e8e4b154cc0cf080e6027959ec98189b1ec0020d58dc247215026b4fce",
      "kind": "uups"
    },
    {
      "address": "0x7BDFd018dAf4314152fd4278b04cBcC52e5d3089",
      "txHash": "0xa2f43bbb38ac8614cf84a6d98a307b789594924b6a4b9428b808824198431b3c",
      "kind": "uups"
    },
    {
      "address": "0xbcB07439a61792da7119aC0CA7D9a076F2E0E690",
      "txHash": "0x5fcf37ddbe0b6eee9c9eda10f130f0e7f51a7631e8fb75006307191f31c8f50a",
      "kind": "uups"
    },
    {
      "address": "0xfF059cd4D54f342ff422a1ce19c9f6Cf7E26cd15",
      "txHash": "0xe33b040248bd0a95a68eed53e532db859684ba185b2d91ca990dc2c499f0cfad",
      "kind": "uups"
    },
    {
      "address": "0xd4B898037856DcdD21e2325eC0D4e7756d43ecF5",
      "txHash": "0x1978490db068a2d703b5cb7584bc88f0db2ec99a5916508fb4b43826953c126e",
      "kind": "uups"
    },
    {
      "address": "0x9a3b250F6c283A76307451D3Ad4C804650737792",
      "txHash": "0x90435dd9274fd2d8bb6ff6211cb0df633f134f636693d59e672d8d0571642b09",
      "kind": "uups"
    },
    {
      "address": "0x2E1ef377ba2072f16bf12e5860c663e1adC29Fa4",
      "txHash": "0x748d1107f83c295c667d9757263a34382138f1737a6fc85eaf2d55e9f3988c17",
      "kind": "uups"
    },
    {
      "address": "0x7c5711374fF2568A26798D01aE42884f1DF50Cfd",
      "txHash": "0xa96ce9335ea1a6eed068d10567f14ade7f0f35e154029dc3f676f0a185691c44",
      "kind": "uups"
    },
    {
      "address": "0x6b9b84123a152F4D62f793F0454D7c75235B6D4A",
      "txHash": "0xdc01fe90a66da4019499940032c3050901bd5cb274594c1f6169d13ccc8e5c88",
      "kind": "uups"
    },
    {
      "address": "0xa53931172Bae83948934Bb7b72911E328eC73ef3",
      "txHash": "0x1816c03362469747184c62a7a5cc5b1fd7937371f4c4c13fa9feced81558d237",
      "kind": "uups"
    },
    {
      "address": "0x7D80A9497Eee153aeA940caC7F025090BDEa0A3F",
      "txHash": "0x05a56dc377ee08dbd0062d5907d95935f276146b3f64d086aaea945a4de8b001",
      "kind": "uups"
    },
    {
      "address": "0xE1385a9ca969f2d5Cc5daE643b84e493aBdA59c3",
      "txHash": "0x0737590d1890b6b194af743c9e3416d988191dd6e8b2e6e7cd3de3523ba83e6c",
      "kind": "uups"
    },
    {
      "address": "0x213d829C94A01d6808eD7C9F8cc566f274bdDCC8",
      "txHash": "0x864d43e7b1a6edd3e95c63bafa9bc6b6bbbe70ccadc73886917e4405f0c68260",
      "kind": "uups"
    },
    {
      "address": "0x3B69531f33Cd62D3da983cD570F737162cb20Cf4",
      "txHash": "0x2fd2ded03fc68f46efe4f895a03a061a0f0b25280ff7ca9408557e6938ba7084",
      "kind": "uups"
    },
    {
      "address": "0xbF918283F12911c49AeE69F1aEe7c66E4808E976",
      "txHash": "0x51dae7483fbc3fb33a060ed94ffb046a3465381f633976f4e054125464e5bfc1",
      "kind": "uups"
    },
    {
      "address": "0x6b69003573911A6Ba7b4c5e176A8C6014c33f92C",
      "txHash": "0xc3a0afe58e3952027fb5a6fee54d5ad0c4de7f739fdc8779cd77e7db4e636acd",
      "kind": "uups"
    },
    {
      "address": "0x70D7e0F668f4ebbB3Ba505bF7f51F4a3C42fC6ed",
      "txHash": "0x8c5134a967c5b2d8f541ec8cae61250d1e51ffaff6f28c4b8ec936498794c4c7",
      "kind": "uups"
    },
    {
      "address": "0xD68a47c62ddbeC1183f1634aA77FDdBD8d05A870",
      "txHash": "0x63a705a6981afb7e7d79a1cbce06336dafeae8fa1822a8f90dd55a0c02910830",
      "kind": "uups"
    },
    {
      "address": "0x9d04A8979712670Bf3EC77a0907D8a562f65a610",
      "txHash": "0xf5deaac90785f85d213be6a5ebdd226a6c18e44f6369f2df14b7e18af6f913ac",
      "kind": "uups"
    },
    {
      "address": "0xb982CEa9d3348335E66438729019e85DdDd7ED00",
      "txHash": "0xac968afab1efd64ee5b11eaf926e3408db5d4b98ec533de6cdfaab376e5aea31",
      "kind": "uups"
    },
    {
      "address": "0x85E6854690B79cAd7ADe544e5ee7142B6023c902",
      "txHash": "0x5b4a3d989255a961e0f7321bb14e40b11864617133b9e0215d4b7e7ca901c8f9",
      "kind": "uups"
    },
    {
      "address": "0xD7ed2311672C8936cCEeC2266b01B0A5693D32f9",
      "txHash": "0x5283852fb9482c57c96d8106fec41cb21dfebe6615dcd1c463ad5fa3145a9987",
      "kind": "uups"
    },
    {
      "address": "0xe5498b9FB2a3FA1245A7477F030291d1BE505145",
      "txHash": "0x1aaee5b95a4c0536f01cbbb663ed517e78a13cca9958f47a45ae305662e16c4a",
      "kind": "uups"
    },
    {
      "address": "0x633140AAEEE4B78a35759633153E32C0eBF1036d",
      "txHash": "0x2ccf31c326e60d7c832b87c0295392d856abd217cda6e178bcec8949766967f5",
      "kind": "uups"
    },
    {
      "address": "0xE6C9ec49047c8eDE4879625e092e0f8CB1f9755F",
      "txHash": "0xea5e656d3e3b6aad4e672920a1f73b674e613bb2ec20c4a4a0970a7d52327285",
      "kind": "uups"
    },
    {
      "address": "0x409A3506D4734a792E4F368D10477AcAdf2D302a",
      "txHash": "0x8d8045364b1399fc826d2f975d4ef6d7ea745e98c3b2e17d9831b96f5cbd1d32",
      "kind": "uups"
    },
    {
      "address": "0xC3Fc7Ffb29Dd5d45a1e214C5Fac4E8A189A6606B",
      "txHash": "0xa3fd0cb97ac1a7817fca459f99d31a8c487b239e20a475522578c547c412cbdb",
      "kind": "uups"
    },
    {
      "address": "0xb361c801DAc1E821657D2320717b4C9ba8b0D988",
      "txHash": "0x1e23d6d5a5f05ea05d060026eb1c785229309e7decff8304f87f06cf73fee5ba",
      "kind": "uups"
    },
    {
      "address": "0x58Bf350E04BCf0686CcA3fD509cb4c34d11B1093",
      "txHash": "0x49a61984d54d4f2a14900b0fdd55ce75b6a84a4be349547bf37dee8a02a93d88",
      "kind": "uups"
    },
    {
      "address": "0x08E7941b1270d23408b27b628d6E746FA4B3F66B",
      "txHash": "0xcdc4a527890ca69537621cc61c5d0ae19b98eeb00e0eb7d36c5c4ea616c1bc10",
      "kind": "uups"
    },
    {
      "address": "0x15A9BbB6B60ce54a856C8A2ace03529f9d1e605A",
      "txHash": "0xbf66cef22e6d556346809e787f0bef8cc35576dc11e92dd845eceb302adf0f21",
      "kind": "uups"
    },
    {
      "address": "0x7Dd830317cC64CbBBa575004E982842F40EEf9E9",
      "txHash": "0x7c16920c91e3d62e8d1b13b8f76bce5cef649a2a1f49aaf043177c18ee10aef6",
      "kind": "uups"
    },
    {
      "address": "0xB1CA8249f3f8c789D2c0953a4D76380fCbBF9985",
      "txHash": "0x4d5aef7a5a13a52112c4e03217082ea9b93fcd2ecb2a21dfbaa81dc6659cc5b0",
      "kind": "uups"
    },
    {
      "address": "0x4a29b3FCb30e4D993e64780BFcBF33da2e0f91f0",
      "txHash": "0x60f1825bca6ba30e78d98c576653b83a7bd115874515518732b2ef8511c34281",
      "kind": "uups"
    },
    {
      "address": "0x36f7A3342cD5f73E511a8184BD7B92A4624c25b4",
      "txHash": "0x0a7db6989774fe2749c7e84f0ef6101eaa0a87bd9639b156dd7464870bd78591",
      "kind": "uups"
    },
    {
      "address": "0x7Db67140343EEe93D7CC2179D65CA7C3234Ae920",
      "txHash": "0x507b52d8e7db35db2f3db1d7f6df9a29761a8a23e45f7e33514ab5bd8e5d2604",
      "kind": "uups"
    },
    {
      "address": "0x059c1229d42f3b57778078186fC901d75b3871f2",
      "txHash": "0xdf578d971118635d2ac7344ca459293f37f3fc8f449dba1d63adccfc2c121679",
      "kind": "uups"
    },
    {
      "address": "0x8E6dC7d9968C8235beAB032Ffc85124fFb23E603",
      "txHash": "0xeee07180726cf98b4a77c44c44cc77fec0f5c4a15b68143a97fb2a01cce79a3e",
      "kind": "uups"
    },
    {
      "address": "0xa7Cf1Cb38B868cc4f4ddFCa8776c73f53dd419FC",
      "txHash": "0x8db37819589a2def517df463b54c53a2d9b8757a74df0ec2c6be6dd5a9092442",
      "kind": "uups"
    },
    {
      "address": "0x7080c0c4A037b81B546ACB24334b1d6D048406eB",
      "txHash": "0x9de38c4a79c1a0841c9b8f219e4ed8347e408b9f6ef4950af6953e2eb972653a",
      "kind": "uups"
    },
    {
      "address": "0x632f951807f1B06b6FE0b68C27B0e79dBEbee5d1",
      "txHash": "0x785ba22394f7225c76f157a410a9ec706a9f00f5cc9ecebc63ee8190f56d8512",
      "kind": "uups"
    },
    {
      "address": "0xCaF4e778b5290202d32019221Ee58ECB42D8aC51",
      "txHash": "0x578c54c9b8d700358686382221d48487fc9e5b1cf9cf11d59aa8e356e2e80150",
      "kind": "uups"
    },
    {
      "address": "0xB0ED80EebCB985C0EF7F537e83D77F72549e0797",
      "txHash": "0xd4cd11251a9e603462be0e593369610c8cc439e76519bd16c5a3e56f61ea1d58",
      "kind": "uups"
    },
    {
      "address": "0xcb00929081a242AA767E9705D24d98a90dDA7Ad0",
      "txHash": "0xd766ddf5442566b6bf00e05d54516ee1e9eb5a31524ed23b428a25b41ea3ab4f",
      "kind": "uups"
    },
    {
      "address": "0x86C518e8a7a862861887f3340be21cde0c207dCe",
      "txHash": "0xda4f5fca164053f14a36c76c6b14ee9e937771a4cd0a74e116c65e15943ccaf3",
      "kind": "uups"
    },
    {
      "address": "0xbC4A3c5D93fd54C4591571e28F12a0C171e79315",
      "txHash": "0x348a531fccab9451ff3174115e345486702459d6034ce07a686a00329c9fcf46",
      "kind": "uups"
    },
    {
      "address": "0xba6e3779edEb1268092b5766d01EF1f3Aa8a2553",
      "txHash": "0x8b3243c5938eb314535ae560722bad362c1976938a302d02957e2abd376c7b5c",
      "kind": "uups"
    },
    {
      "address": "0x7872C68f8D0A0786A9b4A06A0aa2a0cbC457743D",
      "txHash": "0xa7ab568e8b51b9795c3681f045f215bb08d7a69f584bad8476e270bad9f86428",
      "kind": "uups"
    },
    {
      "address": "0xdc31EDF746017271171f2226d06BBEA9D8F59Bc8",
      "txHash": "0x34b20473acd4ced5731e24fd005dc3745487be81bacd9fa0a964ad077753554e",
      "kind": "uups"
    },
    {
      "address": "0xaf60AD1628C1168D38BdA245DFc79E4390fd7F1a",
      "txHash": "0x6dd4dd48076d594cf1e4380e8a034a28958dd7b9557184822f02a2d9303ba89b",
      "kind": "uups"
    },
    {
      "address": "0x9010B5B6dc60354735F7aB77E8E3a4F248Ed00a4",
      "txHash": "0x8134c9bcfa6673e695aef5bb7189ca6d159fda6a6cc10fd326beb17459f73742",
      "kind": "uups"
    },
    {
      "address": "0x623cA04F377763ca762236Ad4a55D32fe707676F",
      "txHash": "0xc3ae447a211434cab4a5818901229541b2b9fc6f9f9dd0b77eb60e31098715d3",
      "kind": "uups"
    },
    {
      "address": "0x5f6421E18A849F886d013aab6DEbc8FEA1190c83",
      "txHash": "0x8946d06a872f9b04d40dc854d8779df72bd92b9b20f7237933776e71dc93275b",
      "kind": "uups"
    },
    {
      "address": "0xB613043ABdaaa6848591a1A28aC64Ce4485A07B3",
      "txHash": "0x612d47d22384b8587321183d251850cb36989ac279b0b8c762e8aa0aef9cda8e",
      "kind": "uups"
    },
    {
      "address": "0x99211045392A66A054707a70a3eBaF30b8cBA190",
      "txHash": "0x9d382b640f480844fd112566ab01d3859d471ebcc0c87241d28ec1c0ae582c2d",
      "kind": "uups"
    },
    {
      "address": "0x92c7B95cFbc24e4298877DC7FFf8082C5ef2d5bd",
      "txHash": "0x2af50a64e803dcd58d575de2daf16118735cbab747f4c9ec70ce4d28f0b47270",
      "kind": "uups"
    },
    {
      "address": "0xF65404BE269cBD3be1df55a156a509276a3F2C43",
      "txHash": "0x6867c35ec70c522eb7a41736a91342a8044716457f90c9a6b235673715c06308",
      "kind": "uups"
    },
    {
      "address": "0xC840073E29a838965E27E32572B0cF46Dc43e0CC",
      "txHash": "0xbc46f5254f39361322876922f67178c1c6f267d2160690ea06c6a9b515f67be1",
      "kind": "uups"
    },
    {
      "address": "0x2974c6518158b9C9aB2EC49649c32410fbe23a9d",
      "txHash": "0x443e82de08715749ef8d6ab324eec535d1b85e67f5e87bbefbd0f408ac54f6c7",
      "kind": "uups"
    }
  ],
  "impls": {
    "89b6ff9317f93d1bb4386eff2f7b467294a909d7249aa25725b5c6817a8e14d5": {
      "address": "0x9bE8b2DdF9D33660314E03710D8A2f4f45e1cFE9",
      "txHash": "0x6e9895c28c26eb21108d50e6ffc4ab4358e217feed7f2874c0388e1015a4a1d8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:64"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "acceptedToken",
            "type": "t_contract(IERC20MELD)5016",
            "src": "../project:/contracts/NFTStoreStorage.sol:21"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "foundationWallet",
            "type": "t_address",
            "src": "../project:/contracts/NFTStoreStorage.sol:25"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "officialWallet",
            "type": "t_address",
            "src": "../project:/contracts/NFTStoreStorage.sol:26"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "itemByNFT",
            "type": "t_mapping(t_contract(IERC721MelandNFT)4953,t_struct(Item)6828_storage)",
            "src": "../project:/contracts/NFTStoreStorage.sol:35"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "tokenIdsByNFT",
            "type": "t_mapping(t_contract(IERC721MelandNFT)4953,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/NFTStoreStorage.sol:39"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "ownerCutPerMillion",
            "type": "t_uint256",
            "src": "../project:/contracts/NFTStoreStorage.sol:41"
          },
          {
            "contract": "NFTStore",
            "label": "itemIdCounters",
            "type": "t_struct(Counter)3794_storage",
            "src": "../project:/contracts/NFTStore.sol:31"
          }
        ],
        "types": {
          "t_struct(Counter)3794_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IERC20MELD)5016": {
            "label": "contract IERC20MELD"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_contract(IERC721MelandNFT)4953,t_struct(Item)6828_storage)": {
            "label": "mapping(contract IERC721MelandNFT => struct NFTStoreStorage.Item)"
          },
          "t_contract(IERC721MelandNFT)4953": {
            "label": "contract IERC721MelandNFT"
          },
          "t_struct(Item)6828_storage": {
            "label": "struct NFTStoreStorage.Item",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "seller",
                "type": "t_address"
              },
              {
                "label": "tokenIdPool",
                "type": "t_bool"
              },
              {
                "label": "priceInWei",
                "type": "t_uint256"
              },
              {
                "label": "sellsCount",
                "type": "t_uint256"
              },
              {
                "label": "limit",
                "type": "t_uint32"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_contract(IERC721MelandNFT)4953,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(contract IERC721MelandNFT => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "3e2946d30768c7dcec522eae601f302cb710ad87423bdce5f7e503aee42a9849": {
      "address": "0x0C91e65fCA083BE264B1f6a2fBA5E2D126B0AA5a",
      "txHash": "0x6b9a6ebe1624edb2bb0595f66877695312fc88f523b1f9404dc0ddb1197d94b7",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:24"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:33"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:39"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:418"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:23"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:75"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:24"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:27"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:30"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:33"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:171"
          },
          {
            "contract": "BaseLand",
            "label": "baseURI",
            "type": "t_string_storage",
            "src": "../project:/contracts/BaseLand.sol:27"
          },
          {
            "contract": "BaseLand",
            "label": "otherLands",
            "type": "t_array(t_contract(IERC721Land)4988)dyn_storage",
            "src": "../project:/contracts/BaseLand.sol:31"
          }
        ],
        "types": {
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_contract(IERC721Land)4988)dyn_storage": {
            "label": "contract IERC721Land[]"
          },
          "t_contract(IERC721Land)4988": {
            "label": "contract IERC721Land"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          }
        }
      }
    },
    "950a7e6a4766524e69e3f31de9824f7929f190f1867921d01baea3bb1664ac93": {
      "address": "0xf13c385521164f09F523B2BCeE85685BA382065a",
      "txHash": "0x6cec81e44ebccd3dbfc2684f5234ea7fc39b9a3282afc8f20e4abaecc7c852ae",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:24"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:33"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:39"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:418"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:24"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:27"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:30"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:33"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:171"
          },
          {
            "contract": "BaseLand",
            "label": "baseURI",
            "type": "t_string_storage",
            "src": "../project:/contracts/BaseLand.sol:25"
          },
          {
            "contract": "BaseLand",
            "label": "otherLands",
            "type": "t_array(t_contract(IERC721Land)4987)dyn_storage",
            "src": "../project:/contracts/BaseLand.sol:29"
          }
        ],
        "types": {
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_contract(IERC721Land)4987)dyn_storage": {
            "label": "contract IERC721Land[]"
          },
          "t_contract(IERC721Land)4987": {
            "label": "contract IERC721Land"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          }
        }
      }
    },
    "a163f0dde55aa22139f22580479c25b2e2b245d45754e78058538d4200cbde8c": {
      "address": "0x31fdD2149087b222026F5EEB66647D9BCc78efe3",
      "txHash": "0x2c7bb2a0e4b2c2c404483b16f3c4bcf827b468e3410604307f51fe9b12d27ec7",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:64"
          },
          {
            "contract": "MarketplaceStorage",
            "label": "acceptedToken",
            "type": "t_contract(IERC20MELD)5119",
            "src": "../project:/contracts/MarketplaceStorage.sol:9"
          },
          {
            "contract": "MarketplaceStorage",
            "label": "foundationWallet",
            "type": "t_address",
            "src": "../project:/contracts/MarketplaceStorage.sol:13"
          },
          {
            "contract": "MarketplaceStorage",
            "label": "officialWallet",
            "type": "t_address",
            "src": "../project:/contracts/MarketplaceStorage.sol:19"
          },
          {
            "contract": "MarketplaceStorage",
            "label": "orderByAssetId",
            "type": "t_mapping(t_contract(IERC721)4611,t_mapping(t_uint256,t_struct(Order)6359_storage))",
            "src": "../project:/contracts/MarketplaceStorage.sol:44"
          },
          {
            "contract": "MarketplaceStorage",
            "label": "ownerCutPerMillion",
            "type": "t_uint256",
            "src": "../project:/contracts/MarketplaceStorage.sol:50"
          },
          {
            "contract": "MarketplaceStorage",
            "label": "publicationFeeInWei",
            "type": "t_uint256",
            "src": "../project:/contracts/MarketplaceStorage.sol:55"
          }
        ],
        "types": {
          "t_contract(IERC20MELD)5119": {
            "label": "contract IERC20MELD"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_contract(IERC721)4611,t_mapping(t_uint256,t_struct(Order)6359_storage))": {
            "label": "mapping(contract IERC721 => mapping(uint256 => struct MarketplaceStorage.Order))"
          },
          "t_contract(IERC721)4611": {
            "label": "contract IERC721"
          },
          "t_mapping(t_uint256,t_struct(Order)6359_storage)": {
            "label": "mapping(uint256 => struct MarketplaceStorage.Order)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Order)6359_storage": {
            "label": "struct MarketplaceStorage.Order",
            "members": [
              {
                "label": "id",
                "type": "t_bytes32"
              },
              {
                "label": "seller",
                "type": "t_address"
              },
              {
                "label": "assetId",
                "type": "t_uint256"
              },
              {
                "label": "nftAddress",
                "type": "t_contract(IERC721)4611"
              },
              {
                "label": "price",
                "type": "t_uint256"
              },
              {
                "label": "expiresAt",
                "type": "t_uint256"
              }
            ]
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "19b424584427b53e76fda77bd870169958cbf39f8c98a827f4a99c2766d55412": {
      "address": "0xA65e3f9daFA410b77447145b842E1E37f7F7B5cD",
      "txHash": "0x973995b7235e6298994b0c50f4f83c0f1354b74f4342c178c0bdf1dde4a5be2e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "ERC20BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:50"
          },
          {
            "contract": "LiquidityTrap",
            "label": "trapAmount",
            "type": "t_uint128",
            "src": "../project:/contracts/LiquidityTrap.sol:17"
          },
          {
            "contract": "LiquidityTrap",
            "label": "liquidityAddedBlock",
            "type": "t_uint256",
            "src": "../project:/contracts/LiquidityTrap.sol:18"
          },
          {
            "contract": "LiquidityTrap",
            "label": "bought",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/LiquidityTrap.sol:19"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:64"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint128": {
            "label": "uint128"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "2bb1eeb3cb8c55c8a9805471c5ea13c84bafae9d5b67696814e69b2c7139bdc8": {
      "address": "0x7D1B61442e0A54AD319eD60f054186FaB9280DE2",
      "txHash": "0x33936439465008ae0da58404a04a8faa11484df98877954a6479e58b0fe9afc2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "ERC20BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:50"
          },
          {
            "contract": "LiquidityTrap",
            "label": "trapAmount",
            "type": "t_uint128",
            "src": "../project:/contracts/LiquidityTrap.sol:17"
          },
          {
            "contract": "LiquidityTrap",
            "label": "liquidityAddedBlock",
            "type": "t_uint256",
            "src": "../project:/contracts/LiquidityTrap.sol:18"
          },
          {
            "contract": "LiquidityTrap",
            "label": "bought",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/LiquidityTrap.sol:19"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:64"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint128": {
            "label": "uint128"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "a25d4d581f3def5b42f3a6874a96e87344f9bf91418ff747483e3147a14ad527": {
      "address": "0xBFf65a708c21AACC3D0B28b0B99fE9A78b41318A",
      "txHash": "0xb546af4c2efe91fd1ac16b43a6063f5c96deab165f233b11628499636bfb8d83",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:64"
          },
          {
            "contract": "MarketplaceStorage",
            "label": "acceptedToken",
            "type": "t_contract(IERC20MELD)5175",
            "src": "../project:/contracts/MarketplaceStorage.sol:9"
          },
          {
            "contract": "MarketplaceStorage",
            "label": "foundationWallet",
            "type": "t_address",
            "src": "../project:/contracts/MarketplaceStorage.sol:13"
          },
          {
            "contract": "MarketplaceStorage",
            "label": "officialWallet",
            "type": "t_address",
            "src": "../project:/contracts/MarketplaceStorage.sol:19"
          },
          {
            "contract": "MarketplaceStorage",
            "label": "orderByAssetId",
            "type": "t_mapping(t_contract(IERC721)4611,t_mapping(t_uint256,t_struct(Order)6556_storage))",
            "src": "../project:/contracts/MarketplaceStorage.sol:44"
          },
          {
            "contract": "MarketplaceStorage",
            "label": "ownerCutPerMillion",
            "type": "t_uint256",
            "src": "../project:/contracts/MarketplaceStorage.sol:50"
          },
          {
            "contract": "MarketplaceStorage",
            "label": "publicationFeeInWei",
            "type": "t_uint256",
            "src": "../project:/contracts/MarketplaceStorage.sol:55"
          }
        ],
        "types": {
          "t_contract(IERC20MELD)5175": {
            "label": "contract IERC20MELD"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_contract(IERC721)4611,t_mapping(t_uint256,t_struct(Order)6556_storage))": {
            "label": "mapping(contract IERC721 => mapping(uint256 => struct MarketplaceStorage.Order))"
          },
          "t_contract(IERC721)4611": {
            "label": "contract IERC721"
          },
          "t_mapping(t_uint256,t_struct(Order)6556_storage)": {
            "label": "mapping(uint256 => struct MarketplaceStorage.Order)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Order)6556_storage": {
            "label": "struct MarketplaceStorage.Order",
            "members": [
              {
                "label": "id",
                "type": "t_bytes32"
              },
              {
                "label": "seller",
                "type": "t_address"
              },
              {
                "label": "assetId",
                "type": "t_uint256"
              },
              {
                "label": "nftAddress",
                "type": "t_contract(IERC721)4611"
              },
              {
                "label": "price",
                "type": "t_uint256"
              },
              {
                "label": "expiresAt",
                "type": "t_uint256"
              }
            ]
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "320db19d27e93b44cf5c6279a65d1bc866210bc4a21c1fa7bc99fd8a9514063f": {
      "address": "0xd4703c6F47BBb665B9E315956969A23F5734cEd8",
      "txHash": "0x07ab82e874c49575fc4f6838e0c351cac65b0b10a3fab5c6070d04f74fec15a3",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:64"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "acceptedToken",
            "type": "t_contract(IERC20MELD)5163",
            "src": "../project:/contracts/NFTStoreStorage.sol:21"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "foundationWallet",
            "type": "t_address",
            "src": "../project:/contracts/NFTStoreStorage.sol:25"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "officialWallet",
            "type": "t_address",
            "src": "../project:/contracts/NFTStoreStorage.sol:26"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "itemByNFT",
            "type": "t_mapping(t_contract(IERC721MelandNFT)5100,t_struct(Item)7622_storage)",
            "src": "../project:/contracts/NFTStoreStorage.sol:36"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "tokenIdsByNFT",
            "type": "t_mapping(t_contract(IERC721MelandNFT)5100,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/NFTStoreStorage.sol:39"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "nftByCid",
            "type": "t_mapping(t_string_memory_ptr,t_address)",
            "src": "../project:/contracts/NFTStoreStorage.sol:43"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "limitPool",
            "type": "t_mapping(t_contract(IERC721MelandNFT)5100,t_mapping(t_address,t_uint256))",
            "src": "../project:/contracts/NFTStoreStorage.sol:48"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "ownerCutPerMillion",
            "type": "t_uint256",
            "src": "../project:/contracts/NFTStoreStorage.sol:52"
          },
          {
            "contract": "NFTStore",
            "label": "itemIdCounters",
            "type": "t_struct(Counter)3794_storage",
            "src": "../project:/contracts/NFTStore.sol:31"
          }
        ],
        "types": {
          "t_struct(Counter)3794_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IERC20MELD)5163": {
            "label": "contract IERC20MELD"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_contract(IERC721MelandNFT)5100,t_struct(Item)7622_storage)": {
            "label": "mapping(contract IERC721MelandNFT => struct NFTStoreStorage.Item)"
          },
          "t_contract(IERC721MelandNFT)5100": {
            "label": "contract IERC721MelandNFT"
          },
          "t_struct(Item)7622_storage": {
            "label": "struct NFTStoreStorage.Item",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "seller",
                "type": "t_address"
              },
              {
                "label": "tokenIdPool",
                "type": "t_bool"
              },
              {
                "label": "priceInWei",
                "type": "t_uint256"
              },
              {
                "label": "sellsCount",
                "type": "t_uint256"
              },
              {
                "label": "limit",
                "type": "t_uint32"
              },
              {
                "label": "description",
                "type": "t_string_storage"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_contract(IERC721MelandNFT)5100,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(contract IERC721MelandNFT => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_string_memory_ptr,t_address)": {
            "label": "mapping(string => address)"
          },
          "t_mapping(t_contract(IERC721MelandNFT)5100,t_mapping(t_address,t_uint256))": {
            "label": "mapping(contract IERC721MelandNFT => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "09c5dd3ac0f5a3b1500aa3b4df0429f1657f4857d63e4d8e8a6db5da9a0f75ff": {
      "address": "0x007B120fd352Ab03F83f73BFA1A510DC947De564",
      "txHash": "0x0e5b3fee933ececaa7718af403bbe229ce0b342bde1b9577ba780901fcf8ffcc",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:64"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "acceptedToken",
            "type": "t_contract(IERC20MELD)5163",
            "src": "../project:/contracts/NFTStoreStorage.sol:21"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "foundationWallet",
            "type": "t_address",
            "src": "../project:/contracts/NFTStoreStorage.sol:25"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "officialWallet",
            "type": "t_address",
            "src": "../project:/contracts/NFTStoreStorage.sol:26"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "itemByNFT",
            "type": "t_mapping(t_contract(IERC721MelandNFT)5100,t_struct(Item)7625_storage)",
            "src": "../project:/contracts/NFTStoreStorage.sol:36"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "tokenIdsByNFT",
            "type": "t_mapping(t_contract(IERC721MelandNFT)5100,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/NFTStoreStorage.sol:39"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "nftByCid",
            "type": "t_mapping(t_string_memory_ptr,t_address)",
            "src": "../project:/contracts/NFTStoreStorage.sol:43"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "limitPool",
            "type": "t_mapping(t_contract(IERC721MelandNFT)5100,t_mapping(t_address,t_uint256))",
            "src": "../project:/contracts/NFTStoreStorage.sol:48"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "ownerCutPerMillion",
            "type": "t_uint256",
            "src": "../project:/contracts/NFTStoreStorage.sol:52"
          },
          {
            "contract": "NFTStore",
            "label": "itemIdCounters",
            "type": "t_struct(Counter)3794_storage",
            "src": "../project:/contracts/NFTStore.sol:31"
          }
        ],
        "types": {
          "t_struct(Counter)3794_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IERC20MELD)5163": {
            "label": "contract IERC20MELD"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_contract(IERC721MelandNFT)5100,t_struct(Item)7625_storage)": {
            "label": "mapping(contract IERC721MelandNFT => struct NFTStoreStorage.Item)"
          },
          "t_contract(IERC721MelandNFT)5100": {
            "label": "contract IERC721MelandNFT"
          },
          "t_struct(Item)7625_storage": {
            "label": "struct NFTStoreStorage.Item",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "seller",
                "type": "t_address"
              },
              {
                "label": "tokenIdPool",
                "type": "t_bool"
              },
              {
                "label": "priceInWei",
                "type": "t_uint256"
              },
              {
                "label": "sellsCount",
                "type": "t_uint256"
              },
              {
                "label": "limit",
                "type": "t_uint32"
              },
              {
                "label": "description",
                "type": "t_string_storage"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_contract(IERC721MelandNFT)5100,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(contract IERC721MelandNFT => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_string_memory_ptr,t_address)": {
            "label": "mapping(string => address)"
          },
          "t_mapping(t_contract(IERC721MelandNFT)5100,t_mapping(t_address,t_uint256))": {
            "label": "mapping(contract IERC721MelandNFT => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "be4e2b2dc20e9d2d05b834fefc67b50803de55e671a7d4f3094585396e3b0db3": {
      "address": "0x9932f04F928a6c02091AbaFCCfa8345570F11aba",
      "txHash": "0xaa9791dce4a0cbce59678c8290888496bade96e057262d9574a931be52a3c40f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:64"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "acceptedToken",
            "type": "t_contract(IERC20MELD)5163",
            "src": "../project:/contracts/NFTStoreStorage.sol:21"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "foundationWallet",
            "type": "t_address",
            "src": "../project:/contracts/NFTStoreStorage.sol:25"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "officialWallet",
            "type": "t_address",
            "src": "../project:/contracts/NFTStoreStorage.sol:26"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "itemByNFT",
            "type": "t_mapping(t_contract(IERC721MelandNFT)5100,t_struct(Item)7775_storage)",
            "src": "../project:/contracts/NFTStoreStorage.sol:36"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "tokenIdsByNFT",
            "type": "t_mapping(t_contract(IERC721MelandNFT)5100,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/NFTStoreStorage.sol:39"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "nftByCid",
            "type": "t_mapping(t_string_memory_ptr,t_address)",
            "src": "../project:/contracts/NFTStoreStorage.sol:43"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "limitPool",
            "type": "t_mapping(t_contract(IERC721MelandNFT)5100,t_mapping(t_address,t_uint256))",
            "src": "../project:/contracts/NFTStoreStorage.sol:48"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "ownerCutPerMillion",
            "type": "t_uint256",
            "src": "../project:/contracts/NFTStoreStorage.sol:52"
          },
          {
            "contract": "NFTStore",
            "label": "itemIdCounters",
            "type": "t_struct(Counter)3794_storage",
            "src": "../project:/contracts/NFTStore.sol:31"
          }
        ],
        "types": {
          "t_struct(Counter)3794_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IERC20MELD)5163": {
            "label": "contract IERC20MELD"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_contract(IERC721MelandNFT)5100,t_struct(Item)7775_storage)": {
            "label": "mapping(contract IERC721MelandNFT => struct NFTStoreStorage.Item)"
          },
          "t_contract(IERC721MelandNFT)5100": {
            "label": "contract IERC721MelandNFT"
          },
          "t_struct(Item)7775_storage": {
            "label": "struct NFTStoreStorage.Item",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "seller",
                "type": "t_address"
              },
              {
                "label": "tokenIdPool",
                "type": "t_bool"
              },
              {
                "label": "priceInWei",
                "type": "t_uint256"
              },
              {
                "label": "sellsCount",
                "type": "t_uint256"
              },
              {
                "label": "limit",
                "type": "t_uint32"
              },
              {
                "label": "description",
                "type": "t_string_storage"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_contract(IERC721MelandNFT)5100,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(contract IERC721MelandNFT => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_string_memory_ptr,t_address)": {
            "label": "mapping(string => address)"
          },
          "t_mapping(t_contract(IERC721MelandNFT)5100,t_mapping(t_address,t_uint256))": {
            "label": "mapping(contract IERC721MelandNFT => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "b9e2e0675b7a72596f38f900388c10ebba0e1c1121005a857d194046bcae37f5": {
      "address": "0xbc85A5AE17aaC6D35434DBE92B74d1cf58cD4008",
      "txHash": "0xadb783dcbd48c482192739ebe90a759b01e83724b669d310bba4da71f7944ff3",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:64"
          },
          {
            "contract": "NFTFactoryV2",
            "label": "supportNFTs",
            "type": "t_mapping(t_contract(IERC721)4611,t_bool)",
            "src": "../project:/contracts/NFTFactoryV2.sol:19"
          },
          {
            "contract": "NFTFactoryV2",
            "label": "nfts",
            "type": "t_array(t_contract(IERC721)4611)dyn_storage",
            "src": "../project:/contracts/NFTFactoryV2.sol:21"
          }
        ],
        "types": {
          "t_mapping(t_contract(IERC721)4611,t_bool)": {
            "label": "mapping(contract IERC721 => bool)"
          },
          "t_contract(IERC721)4611": {
            "label": "contract IERC721"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_contract(IERC721)4611)dyn_storage": {
            "label": "contract IERC721[]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "48413eb177f3fb5a02493b6862795f48cfb296c64859d4fc8c0cef5ee2c7d152": {
      "address": "0x604348A1C08C82b40fA614021075263885B6cc2B",
      "txHash": "0xdf6c5772980adf10019350ab8197bfee79c82ab63036d317a4febbec5c1e1478",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:64"
          },
          {
            "contract": "VestPool",
            "label": "MELDToken",
            "type": "t_contract(ERC20Upgradeable)1749",
            "src": "../project:/contracts/VestPool.sol:17"
          },
          {
            "contract": "VestPool",
            "label": "tokensToVest",
            "type": "t_uint256",
            "src": "../project:/contracts/VestPool.sol:19"
          },
          {
            "contract": "VestPool",
            "label": "vestingId",
            "type": "t_uint256",
            "src": "../project:/contracts/VestPool.sol:20"
          },
          {
            "contract": "VestPool",
            "label": "vestings",
            "type": "t_mapping(t_uint256,t_struct(Vesting)8437_storage)",
            "src": "../project:/contracts/VestPool.sol:43"
          },
          {
            "contract": "VestPool",
            "label": "vcmap",
            "type": "t_mapping(t_address,t_struct(VC)8452_storage)",
            "src": "../project:/contracts/VestPool.sol:44"
          }
        ],
        "types": {
          "t_contract(ERC20Upgradeable)1749": {
            "label": "contract ERC20Upgradeable"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Vesting)8437_storage)": {
            "label": "mapping(uint256 => struct VestPool.Vesting)"
          },
          "t_struct(Vesting)8437_storage": {
            "label": "struct VestPool.Vesting",
            "members": [
              {
                "label": "releaseTime",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "beneficiary",
                "type": "t_address"
              },
              {
                "label": "released",
                "type": "t_bool"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(VC)8452_storage)": {
            "label": "mapping(address => struct VestPool.VC)"
          },
          "t_struct(VC)8452_storage": {
            "label": "struct VestPool.VC",
            "members": [
              {
                "label": "timeOfTGE",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "cliffMonth",
                "type": "t_uint256"
              },
              {
                "label": "vestingMonth",
                "type": "t_uint256"
              },
              {
                "label": "unlockTGE",
                "type": "t_uint256"
              },
              {
                "label": "beneficiary",
                "type": "t_address"
              },
              {
                "label": "recived",
                "type": "t_bool"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "2fb88c864eef09ce183407c1e940d77cc4599ddd72b35bf34c902680d10a195a": {
      "address": "0xE7b99fa5D07008890A7d34B9f9D564bfb24d51B8",
      "txHash": "0x912b73f44eb9e47fdf65964ca42b2f40e66e2b13b39a95a730a3be80253aef15",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:64"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "acceptedToken",
            "type": "t_contract(IERC20MELD)5175",
            "src": "../project:/contracts/NFTStoreStorage.sol:21"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "foundationWallet",
            "type": "t_address",
            "src": "../project:/contracts/NFTStoreStorage.sol:25"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "officialWallet",
            "type": "t_address",
            "src": "../project:/contracts/NFTStoreStorage.sol:26"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "itemByNFT",
            "type": "t_mapping(t_contract(IERC721MelandNFT)5112,t_struct(Item)8070_storage)",
            "src": "../project:/contracts/NFTStoreStorage.sol:36"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "tokenIdsByNFT",
            "type": "t_mapping(t_contract(IERC721MelandNFT)5112,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/NFTStoreStorage.sol:39"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "nftByCid",
            "type": "t_mapping(t_string_memory_ptr,t_address)",
            "src": "../project:/contracts/NFTStoreStorage.sol:43"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "limitPool",
            "type": "t_mapping(t_contract(IERC721MelandNFT)5112,t_mapping(t_address,t_uint256))",
            "src": "../project:/contracts/NFTStoreStorage.sol:48"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "ownerCutPerMillion",
            "type": "t_uint256",
            "src": "../project:/contracts/NFTStoreStorage.sol:52"
          },
          {
            "contract": "NFTStore",
            "label": "itemIdCounters",
            "type": "t_struct(Counter)3794_storage",
            "src": "../project:/contracts/NFTStore.sol:31"
          }
        ],
        "types": {
          "t_struct(Counter)3794_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IERC20MELD)5175": {
            "label": "contract IERC20MELD"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_contract(IERC721MelandNFT)5112,t_struct(Item)8070_storage)": {
            "label": "mapping(contract IERC721MelandNFT => struct NFTStoreStorage.Item)"
          },
          "t_contract(IERC721MelandNFT)5112": {
            "label": "contract IERC721MelandNFT"
          },
          "t_struct(Item)8070_storage": {
            "label": "struct NFTStoreStorage.Item",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "seller",
                "type": "t_address"
              },
              {
                "label": "tokenIdPool",
                "type": "t_bool"
              },
              {
                "label": "priceInWei",
                "type": "t_uint256"
              },
              {
                "label": "sellsCount",
                "type": "t_uint256"
              },
              {
                "label": "limit",
                "type": "t_uint32"
              },
              {
                "label": "description",
                "type": "t_string_storage"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_contract(IERC721MelandNFT)5112,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(contract IERC721MelandNFT => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_string_memory_ptr,t_address)": {
            "label": "mapping(string => address)"
          },
          "t_mapping(t_contract(IERC721MelandNFT)5112,t_mapping(t_address,t_uint256))": {
            "label": "mapping(contract IERC721MelandNFT => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "3e429965a14d86d437e96dc10aaaac616248fd88292be79537abc8b6ce232d45": {
      "address": "0xb6C1cDc3E38783fE22e92099dcb402bc26B5451b",
      "txHash": "0x6e0dc8f6fa35a76e6402a7cca1bbe8e028c455f2e1bb034b2421eee046128dc1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:24"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:33"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:39"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:418"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:24"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:27"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:30"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:33"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:171"
          },
          {
            "contract": "BaseLand",
            "label": "baseURI",
            "type": "t_string_storage",
            "src": "../project:/contracts/BaseLand.sol:28"
          },
          {
            "contract": "BaseLand",
            "label": "otherLands",
            "type": "t_array(t_contract(IERC721Land)5147)dyn_storage",
            "src": "../project:/contracts/BaseLand.sol:32"
          }
        ],
        "types": {
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_contract(IERC721Land)5147)dyn_storage": {
            "label": "contract IERC721Land[]"
          },
          "t_contract(IERC721Land)5147": {
            "label": "contract IERC721Land"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          }
        }
      }
    },
    "57b54b5d57e5f5f995fcffacbf7da94d665fb9a66c8d05061704f7cf5205039c": {
      "address": "0x2C10b904B6C446533fab5ffeeD2a3839E3a34746",
      "txHash": "0xe337dc42991798720c14741e05c25bc19e96d1b583d7490257af9a2a0426261c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:64"
          },
          {
            "contract": "NFTFactory",
            "label": "supportNFTs",
            "type": "t_mapping(t_contract(IERC721)4611,t_bool)",
            "src": "../project:/contracts/NFTFactory.sol:19"
          }
        ],
        "types": {
          "t_mapping(t_contract(IERC721)4611,t_bool)": {
            "label": "mapping(contract IERC721 => bool)"
          },
          "t_contract(IERC721)4611": {
            "label": "contract IERC721"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "d2cce7273cfe53d379e9172a99cc0f474d37bcca7bc24aa5caa56c3fb6eb150c": {
      "address": "0xB601afC509a6ff3E67062BaC0F9E4CbE6F8B973D",
      "txHash": "0x19a79ec9c28d1342f3082dbe3f9d9da0c38742a878c1dc7471bfcc55f3fb7776",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:64"
          },
          {
            "contract": "VestPool",
            "label": "MELDToken",
            "type": "t_contract(ERC20Upgradeable)1749",
            "src": "../project:/contracts/VestPool.sol:17"
          },
          {
            "contract": "VestPool",
            "label": "tokensToVest",
            "type": "t_uint256",
            "src": "../project:/contracts/VestPool.sol:19"
          },
          {
            "contract": "VestPool",
            "label": "vestingId",
            "type": "t_uint256",
            "src": "../project:/contracts/VestPool.sol:20"
          },
          {
            "contract": "VestPool",
            "label": "vestings",
            "type": "t_mapping(t_uint256,t_struct(Vesting)8530_storage)",
            "src": "../project:/contracts/VestPool.sol:44"
          },
          {
            "contract": "VestPool",
            "label": "vcmap",
            "type": "t_mapping(t_address,t_struct(VC)8545_storage)",
            "src": "../project:/contracts/VestPool.sol:45"
          }
        ],
        "types": {
          "t_contract(ERC20Upgradeable)1749": {
            "label": "contract ERC20Upgradeable"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Vesting)8530_storage)": {
            "label": "mapping(uint256 => struct VestPool.Vesting)"
          },
          "t_struct(Vesting)8530_storage": {
            "label": "struct VestPool.Vesting",
            "members": [
              {
                "label": "releaseTime",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "beneficiary",
                "type": "t_address"
              },
              {
                "label": "released",
                "type": "t_bool"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(VC)8545_storage)": {
            "label": "mapping(address => struct VestPool.VC)"
          },
          "t_struct(VC)8545_storage": {
            "label": "struct VestPool.VC",
            "members": [
              {
                "label": "timeOfTGE",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "cliffMonth",
                "type": "t_uint256"
              },
              {
                "label": "vestingMonth",
                "type": "t_uint256"
              },
              {
                "label": "unlockTGE",
                "type": "t_uint256"
              },
              {
                "label": "beneficiary",
                "type": "t_address"
              },
              {
                "label": "recived",
                "type": "t_bool"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "0b29057ebcacc0d56132a25b6203a41217777b6151fa9ad76b3dbad682a88a1a": {
      "address": "0xd82e5Ea55188ad85a0C4DcC9cc3DE88Bde5aDe6C",
      "txHash": "0x98a153dbe1b73b19a525a37acee405beb6cf30338a6d5cd9c4591ef19d5deeb2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC20BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:50"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:64"
          },
          {
            "contract": "MELD",
            "label": "BP",
            "type": "t_contract(BPContract)4635",
            "src": "../project:/contracts/MELD.sol:21"
          },
          {
            "contract": "MELD",
            "label": "bpEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MELD.sol:22"
          },
          {
            "contract": "MELD",
            "label": "BPDisabledForever",
            "type": "t_bool",
            "src": "../project:/contracts/MELD.sol:23"
          },
          {
            "contract": "MELD",
            "label": "upgradeDelay",
            "type": "t_uint256",
            "src": "../project:/contracts/MELD.sol:25"
          },
          {
            "contract": "MELD",
            "label": "prepareUpgradeImpl",
            "type": "t_struct(PrepareUpgradeImpl)5487_storage",
            "src": "../project:/contracts/MELD.sol:27"
          }
        ],
        "types": {
          "t_contract(BPContract)4635": {
            "label": "contract BPContract"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(PrepareUpgradeImpl)5487_storage": {
            "label": "struct MELD.PrepareUpgradeImpl",
            "members": [
              {
                "label": "newImplementation",
                "type": "t_address"
              },
              {
                "label": "createdAt",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          }
        }
      }
    },
    "ef167f0fbab0b16c52bbfef06f919f1b161425e971fbc53ecfc27e99f408a822": {
      "address": "0x376c568555368Cf151EC78aD8bD80f568eED0Dff",
      "txHash": "0x21732ac69bc482ccb00cb94d72cb273258995ee0b9c7b75461fb6a38651febf1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:64"
          },
          {
            "contract": "VestPool",
            "label": "MELDToken",
            "type": "t_contract(ERC20Upgradeable)1749",
            "src": "../project:/contracts/VestPool.sol:17"
          },
          {
            "contract": "VestPool",
            "label": "tokensToVest",
            "type": "t_uint256",
            "src": "../project:/contracts/VestPool.sol:19"
          },
          {
            "contract": "VestPool",
            "label": "vestingId",
            "type": "t_uint256",
            "src": "../project:/contracts/VestPool.sol:20"
          },
          {
            "contract": "VestPool",
            "label": "vestings",
            "type": "t_mapping(t_uint256,t_struct(Vesting)8530_storage)",
            "src": "../project:/contracts/VestPool.sol:44"
          },
          {
            "contract": "VestPool",
            "label": "vcmap",
            "type": "t_mapping(t_address,t_struct(VC)8545_storage)",
            "src": "../project:/contracts/VestPool.sol:45"
          }
        ],
        "types": {
          "t_contract(ERC20Upgradeable)1749": {
            "label": "contract ERC20Upgradeable"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Vesting)8530_storage)": {
            "label": "mapping(uint256 => struct VestPool.Vesting)"
          },
          "t_struct(Vesting)8530_storage": {
            "label": "struct VestPool.Vesting",
            "members": [
              {
                "label": "releaseTime",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "beneficiary",
                "type": "t_address"
              },
              {
                "label": "released",
                "type": "t_bool"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(VC)8545_storage)": {
            "label": "mapping(address => struct VestPool.VC)"
          },
          "t_struct(VC)8545_storage": {
            "label": "struct VestPool.VC",
            "members": [
              {
                "label": "timeOfTGE",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "cliffMonth",
                "type": "t_uint256"
              },
              {
                "label": "vestingMonth",
                "type": "t_uint256"
              },
              {
                "label": "unlockTGE",
                "type": "t_uint256"
              },
              {
                "label": "beneficiary",
                "type": "t_address"
              },
              {
                "label": "recived",
                "type": "t_bool"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "777821b05190473b2489d3b7c2898b280bfa4636b925f649d35a572c8a4fede2": {
      "address": "0xFB88dE099e13c3ED21F80a7a1E49f8CAEcF10df6",
      "txHash": "0x57fe259f51bc8448a71b1b7de857dc1fa03c0421ccb1c644b0db27b9b442f690",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:24"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:33"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:39"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:418"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:80"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:24"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:27"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:30"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:33"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:171"
          },
          {
            "contract": "BaseLand",
            "label": "baseURI",
            "type": "t_string_storage",
            "src": "../project:/contracts/BaseLand.sol:28"
          },
          {
            "contract": "BaseLand",
            "label": "otherLands",
            "type": "t_array(t_contract(IERC721Land)5181)dyn_storage",
            "src": "../project:/contracts/BaseLand.sol:32"
          }
        ],
        "types": {
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_contract(IERC721Land)5181)dyn_storage": {
            "label": "contract IERC721Land[]"
          },
          "t_contract(IERC721Land)5181": {
            "label": "contract IERC721Land"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          }
        }
      }
    },
    "e8481f720ca43f206fbae73c1f0b4c3474b2ad37d02d6956c1d44e6724f9d060": {
      "address": "0xB613043ABdaaa6848591a1A28aC64Ce4485A07B3",
      "txHash": "0x3e9837c4d83a990bbbe0bcf5b60e3e13f7bf961fa2466d4fdf7daa9c10361b2a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "MarketplaceStorage",
            "label": "acceptedToken",
            "type": "t_contract(IERC20MELD)5227",
            "src": "../project:/contracts/MarketplaceStorage.sol:9"
          },
          {
            "contract": "MarketplaceStorage",
            "label": "foundationWallet",
            "type": "t_address",
            "src": "../project:/contracts/MarketplaceStorage.sol:13"
          },
          {
            "contract": "MarketplaceStorage",
            "label": "officialWallet",
            "type": "t_address",
            "src": "../project:/contracts/MarketplaceStorage.sol:19"
          },
          {
            "contract": "MarketplaceStorage",
            "label": "orderByAssetId",
            "type": "t_mapping(t_contract(IERC721)4663,t_mapping(t_uint256,t_struct(Order)6716_storage))",
            "src": "../project:/contracts/MarketplaceStorage.sol:44"
          },
          {
            "contract": "MarketplaceStorage",
            "label": "ownerCutPerMillion",
            "type": "t_uint256",
            "src": "../project:/contracts/MarketplaceStorage.sol:50"
          },
          {
            "contract": "MarketplaceStorage",
            "label": "publicationFeeInWei",
            "type": "t_uint256",
            "src": "../project:/contracts/MarketplaceStorage.sol:55"
          }
        ],
        "types": {
          "t_contract(IERC20MELD)5227": {
            "label": "contract IERC20MELD"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_contract(IERC721)4663,t_mapping(t_uint256,t_struct(Order)6716_storage))": {
            "label": "mapping(contract IERC721 => mapping(uint256 => struct MarketplaceStorage.Order))"
          },
          "t_contract(IERC721)4663": {
            "label": "contract IERC721"
          },
          "t_mapping(t_uint256,t_struct(Order)6716_storage)": {
            "label": "mapping(uint256 => struct MarketplaceStorage.Order)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Order)6716_storage": {
            "label": "struct MarketplaceStorage.Order",
            "members": [
              {
                "label": "id",
                "type": "t_bytes32"
              },
              {
                "label": "seller",
                "type": "t_address"
              },
              {
                "label": "assetId",
                "type": "t_uint256"
              },
              {
                "label": "nftAddress",
                "type": "t_contract(IERC721)4663"
              },
              {
                "label": "price",
                "type": "t_uint256"
              },
              {
                "label": "expiresAt",
                "type": "t_uint256"
              }
            ]
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "2ad5029ac77bcf2487a43e46b9cdef822cd41ca2839f2ad108c0b162f09068cc": {
      "address": "0xeCf9855b4CfdA93Aa81CeffAb49d8399B4E3d513",
      "txHash": "0xd373a8774b28c5e250ad2f7f5af2564bdf612b5bbdc0e98d279cfd8285ac6756",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "NFTFactory",
            "label": "supportNFTs",
            "type": "t_mapping(t_contract(IERC721)4663,t_bool)",
            "src": "../project:/contracts/NFTFactory.sol:19"
          },
          {
            "contract": "NFTFactory",
            "label": "supportRFCs",
            "type": "t_mapping(t_contract(IERC721)4663,t_struct(RFC)6897_storage)",
            "src": "../project:/contracts/NFTFactory.sol:22"
          },
          {
            "contract": "NFTFactory",
            "label": "nfts",
            "type": "t_array(t_contract(IERC721)4663)dyn_storage",
            "src": "../project:/contracts/NFTFactory.sol:23"
          }
        ],
        "types": {
          "t_mapping(t_contract(IERC721)4663,t_bool)": {
            "label": "mapping(contract IERC721 => bool)"
          },
          "t_contract(IERC721)4663": {
            "label": "contract IERC721"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_contract(IERC721)4663,t_struct(RFC)6897_storage)": {
            "label": "mapping(contract IERC721 => struct NFTFactory.RFC)"
          },
          "t_struct(RFC)6897_storage": {
            "label": "struct NFTFactory.RFC",
            "members": [
              {
                "label": "proposer",
                "type": "t_address"
              },
              {
                "label": "proposalTime",
                "type": "t_uint256"
              },
              {
                "label": "approved",
                "type": "t_bool"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_contract(IERC721)4663)dyn_storage": {
            "label": "contract IERC721[]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "8050da0648e84fee1854918e698994b3364eb80b42574386dfca3f3037aa44c9": {
      "address": "0xdd9eb8eAaE04FdD27031D95e3B400f8B6803c6E7",
      "txHash": "0x23cd5d64e587814b813c7f2752758659b2dd1ad1402c48849610b60714916513",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "VestPool",
            "label": "MELDToken",
            "type": "t_contract(ERC20Upgradeable)1786",
            "src": "../project:/contracts/VestPool.sol:17"
          },
          {
            "contract": "VestPool",
            "label": "tokensToVest",
            "type": "t_uint256",
            "src": "../project:/contracts/VestPool.sol:19"
          },
          {
            "contract": "VestPool",
            "label": "vestingId",
            "type": "t_uint256",
            "src": "../project:/contracts/VestPool.sol:20"
          },
          {
            "contract": "VestPool",
            "label": "vestings",
            "type": "t_mapping(t_uint256,t_struct(Vesting)8658_storage)",
            "src": "../project:/contracts/VestPool.sol:44"
          },
          {
            "contract": "VestPool",
            "label": "vcmap",
            "type": "t_mapping(t_address,t_struct(VC)8673_storage)",
            "src": "../project:/contracts/VestPool.sol:45"
          }
        ],
        "types": {
          "t_contract(ERC20Upgradeable)1786": {
            "label": "contract ERC20Upgradeable"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Vesting)8658_storage)": {
            "label": "mapping(uint256 => struct VestPool.Vesting)"
          },
          "t_struct(Vesting)8658_storage": {
            "label": "struct VestPool.Vesting",
            "members": [
              {
                "label": "releaseTime",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "beneficiary",
                "type": "t_address"
              },
              {
                "label": "released",
                "type": "t_bool"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(VC)8673_storage)": {
            "label": "mapping(address => struct VestPool.VC)"
          },
          "t_struct(VC)8673_storage": {
            "label": "struct VestPool.VC",
            "members": [
              {
                "label": "timeOfTGE",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "cliffMonth",
                "type": "t_uint256"
              },
              {
                "label": "vestingMonth",
                "type": "t_uint256"
              },
              {
                "label": "unlockTGE",
                "type": "t_uint256"
              },
              {
                "label": "beneficiary",
                "type": "t_address"
              },
              {
                "label": "recived",
                "type": "t_bool"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "fe78de6b38576fb0570266303c3d4ca4e85c636a1a995daad1f155cb9515aba3": {
      "address": "0xe772D091d64Cdc4f24742FeA8e0abB4785eA6e19",
      "txHash": "0x5b1cd12c7c9a721862346909a2980e72003fb3e88e00842c0ee24d4b90799c58",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "VestPoolV2",
            "label": "MELDToken",
            "type": "t_contract(ERC20Upgradeable)1786",
            "src": "../project:/contracts/VestPoolV2.sol:17"
          },
          {
            "contract": "VestPoolV2",
            "label": "tokensToVest",
            "type": "t_uint256",
            "src": "../project:/contracts/VestPoolV2.sol:19"
          },
          {
            "contract": "VestPoolV2",
            "label": "vestingId",
            "type": "t_uint256",
            "src": "../project:/contracts/VestPoolV2.sol:20"
          },
          {
            "contract": "VestPoolV2",
            "label": "vestings",
            "type": "t_mapping(t_uint256,t_struct(Vesting)9259_storage)",
            "src": "../project:/contracts/VestPoolV2.sol:44"
          },
          {
            "contract": "VestPoolV2",
            "label": "vcmap",
            "type": "t_mapping(t_address,t_struct(VC)9274_storage)",
            "src": "../project:/contracts/VestPoolV2.sol:45"
          }
        ],
        "types": {
          "t_contract(ERC20Upgradeable)1786": {
            "label": "contract ERC20Upgradeable"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Vesting)9259_storage)": {
            "label": "mapping(uint256 => struct VestPoolV2.Vesting)"
          },
          "t_struct(Vesting)9259_storage": {
            "label": "struct VestPoolV2.Vesting",
            "members": [
              {
                "label": "releaseTime",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "beneficiary",
                "type": "t_address"
              },
              {
                "label": "released",
                "type": "t_bool"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(VC)9274_storage)": {
            "label": "mapping(address => struct VestPoolV2.VC)"
          },
          "t_struct(VC)9274_storage": {
            "label": "struct VestPoolV2.VC",
            "members": [
              {
                "label": "timeOfTGE",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "cliffMonth",
                "type": "t_uint256"
              },
              {
                "label": "vestingMonth",
                "type": "t_uint256"
              },
              {
                "label": "unlockTGE",
                "type": "t_uint256"
              },
              {
                "label": "beneficiary",
                "type": "t_address"
              },
              {
                "label": "recived",
                "type": "t_bool"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "8ad4f6698158bf8d885e0764517e25aa7c503ee4276bab18a941cdc54c6bab1e": {
      "address": "0xef9A7335c5a0D5cb5a025a5a291A4250F975e18e",
      "txHash": "0x8731afac1fbbff42ea751cb81600f111fbf62c6c60667f1882d35569004505ef",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "VestPoolV2",
            "label": "MELDToken",
            "type": "t_contract(ERC20Upgradeable)1786",
            "src": "../project:/contracts/VestPoolV2.sol:17"
          },
          {
            "contract": "VestPoolV2",
            "label": "tokensToVest",
            "type": "t_uint256",
            "src": "../project:/contracts/VestPoolV2.sol:19"
          },
          {
            "contract": "VestPoolV2",
            "label": "vestingId",
            "type": "t_uint256",
            "src": "../project:/contracts/VestPoolV2.sol:20"
          },
          {
            "contract": "VestPoolV2",
            "label": "vestings",
            "type": "t_mapping(t_uint256,t_struct(Vesting)9259_storage)",
            "src": "../project:/contracts/VestPoolV2.sol:44"
          },
          {
            "contract": "VestPoolV2",
            "label": "vcmap",
            "type": "t_mapping(t_address,t_struct(VC)9274_storage)",
            "src": "../project:/contracts/VestPoolV2.sol:45"
          }
        ],
        "types": {
          "t_contract(ERC20Upgradeable)1786": {
            "label": "contract ERC20Upgradeable"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Vesting)9259_storage)": {
            "label": "mapping(uint256 => struct VestPoolV2.Vesting)"
          },
          "t_struct(Vesting)9259_storage": {
            "label": "struct VestPoolV2.Vesting",
            "members": [
              {
                "label": "releaseTime",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "beneficiary",
                "type": "t_address"
              },
              {
                "label": "released",
                "type": "t_bool"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(VC)9274_storage)": {
            "label": "mapping(address => struct VestPoolV2.VC)"
          },
          "t_struct(VC)9274_storage": {
            "label": "struct VestPoolV2.VC",
            "members": [
              {
                "label": "timeOfTGE",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "cliffMonth",
                "type": "t_uint256"
              },
              {
                "label": "vestingMonth",
                "type": "t_uint256"
              },
              {
                "label": "unlockTGE",
                "type": "t_uint256"
              },
              {
                "label": "beneficiary",
                "type": "t_address"
              },
              {
                "label": "recived",
                "type": "t_bool"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "afa6812810e840fc98c0564879dc28276748bcc6c5c81f18567a13f7cc8c18c6": {
      "address": "0x623cA04F377763ca762236Ad4a55D32fe707676F",
      "txHash": "0xa21b4c56bbc8dfe5bbf5e872affe23d6d21e5fd5ba97a15b5b295dd932735bee",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MelandStakesStorage",
            "label": "_stakePoolIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandStakesStorage.sol:11"
          },
          {
            "contract": "MelandStakesStorage",
            "label": "acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/MelandStakesStorage.sol:14"
          },
          {
            "contract": "MelandStakesStorage",
            "label": "_defaultStakePoolId",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandStakesStorage.sol:17"
          },
          {
            "contract": "MelandStakesStorage",
            "label": "stakePoolById",
            "type": "t_mapping(t_uint256,t_struct(StakePool)8385_storage)",
            "src": "../project:/contracts/MelandStakesStorage.sol:19"
          },
          {
            "contract": "MelandStakesStorage",
            "label": "stakePoolSaleCountByStakePoolId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandStakesStorage.sol:23"
          },
          {
            "contract": "MelandStakesStorage",
            "label": "stakeById",
            "type": "t_mapping(t_bytes32,t_struct(Stake)8398_storage)",
            "src": "../project:/contracts/MelandStakesStorage.sol:25"
          },
          {
            "contract": "MelandStakesStorage",
            "label": "stakePoolIdsByStaker",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandStakesStorage.sol:27"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(StakePool)8385_storage)": {
            "label": "mapping(uint256 => struct MelandStakesStorage.StakePool)"
          },
          "t_struct(StakePool)8385_storage": {
            "label": "struct MelandStakesStorage.StakePool",
            "members": [
              {
                "label": "ditaminLD",
                "type": "t_uint256"
              },
              {
                "label": "ditaminC",
                "type": "t_uint256"
              },
              {
                "label": "numberOfMELD",
                "type": "t_uint256"
              },
              {
                "label": "landC",
                "type": "t_uint8"
              },
              {
                "label": "vipname",
                "type": "t_bytes_storage"
              },
              {
                "label": "stakeApyPercent",
                "type": "t_uint8"
              },
              {
                "label": "gameApyPercent",
                "type": "t_uint8"
              },
              {
                "label": "freezeTime",
                "type": "t_uint256"
              },
              {
                "label": "totalVolume",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(Stake)8398_storage)": {
            "label": "mapping(bytes32 => struct MelandStakesStorage.Stake)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(Stake)8398_storage": {
            "label": "struct MelandStakesStorage.Stake",
            "members": [
              {
                "label": "stakePoolId",
                "type": "t_uint256"
              },
              {
                "label": "staker",
                "type": "t_address"
              },
              {
                "label": "lastRecivedAt",
                "type": "t_uint256"
              },
              {
                "label": "stakedAt",
                "type": "t_uint256"
              },
              {
                "label": "expiredAt",
                "type": "t_uint256"
              },
              {
                "label": "claimed",
                "type": "t_bool"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "f364d799729f60142e937fd8992305260d0c99f215090e489591941fb2332e50": {
      "address": "0x9FBDa871d559710256a2502A2517b794B482Db40",
      "txHash": "0x7e0faca4f33bade60f14bb260f50be73575ed5543e33f6da29aa6454551f1fd9",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MelandStakesStorage",
            "label": "_stakePoolIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandStakesStorage.sol:11"
          },
          {
            "contract": "MelandStakesStorage",
            "label": "acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/MelandStakesStorage.sol:14"
          },
          {
            "contract": "MelandStakesStorage",
            "label": "_defaultStakePoolId",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandStakesStorage.sol:17"
          },
          {
            "contract": "MelandStakesStorage",
            "label": "stakePoolById",
            "type": "t_mapping(t_uint256,t_struct(StakePool)8351_storage)",
            "src": "../project:/contracts/MelandStakesStorage.sol:19"
          },
          {
            "contract": "MelandStakesStorage",
            "label": "stakePoolSaleCountByStakePoolId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandStakesStorage.sol:23"
          },
          {
            "contract": "MelandStakesStorage",
            "label": "stakeById",
            "type": "t_mapping(t_bytes32,t_struct(Stake)8364_storage)",
            "src": "../project:/contracts/MelandStakesStorage.sol:25"
          },
          {
            "contract": "MelandStakesStorage",
            "label": "stakePoolIdsByStaker",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandStakesStorage.sol:27"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(StakePool)8351_storage)": {
            "label": "mapping(uint256 => struct MelandStakesStorage.StakePool)"
          },
          "t_struct(StakePool)8351_storage": {
            "label": "struct MelandStakesStorage.StakePool",
            "members": [
              {
                "label": "ditaminLD",
                "type": "t_uint256"
              },
              {
                "label": "ditaminC",
                "type": "t_uint256"
              },
              {
                "label": "numberOfMELD",
                "type": "t_uint256"
              },
              {
                "label": "landC",
                "type": "t_uint8"
              },
              {
                "label": "vipname",
                "type": "t_bytes_storage"
              },
              {
                "label": "stakeApyPercent",
                "type": "t_uint8"
              },
              {
                "label": "gameApyPercent",
                "type": "t_uint8"
              },
              {
                "label": "freezeTime",
                "type": "t_uint256"
              },
              {
                "label": "totalVolume",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(Stake)8364_storage)": {
            "label": "mapping(bytes32 => struct MelandStakesStorage.Stake)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(Stake)8364_storage": {
            "label": "struct MelandStakesStorage.Stake",
            "members": [
              {
                "label": "stakePoolId",
                "type": "t_uint256"
              },
              {
                "label": "staker",
                "type": "t_address"
              },
              {
                "label": "lastRecivedAt",
                "type": "t_uint256"
              },
              {
                "label": "stakedAt",
                "type": "t_uint256"
              },
              {
                "label": "expiredAt",
                "type": "t_uint256"
              },
              {
                "label": "claimed",
                "type": "t_bool"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "a6f5100907694c8752f8fcf228a4d9933d4be1060289208b0721b32dec2fbe4a": {
      "address": "0x6764579CcB291B9f7CB1BC0F7Cd279a96bA5d20E",
      "txHash": "0x35160e94723a7d88542ce05cefc59e885f2496439242a8662e17250ed3d8d76a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MelandStakesStorage",
            "label": "_stakePoolIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandStakesStorage.sol:11"
          },
          {
            "contract": "MelandStakesStorage",
            "label": "acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/MelandStakesStorage.sol:14"
          },
          {
            "contract": "MelandStakesStorage",
            "label": "_defaultStakePoolId",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandStakesStorage.sol:17"
          },
          {
            "contract": "MelandStakesStorage",
            "label": "stakePoolById",
            "type": "t_mapping(t_uint256,t_struct(StakePool)8395_storage)",
            "src": "../project:/contracts/MelandStakesStorage.sol:19"
          },
          {
            "contract": "MelandStakesStorage",
            "label": "stakePoolSaleCountByStakePoolId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandStakesStorage.sol:23"
          },
          {
            "contract": "MelandStakesStorage",
            "label": "stakeById",
            "type": "t_mapping(t_bytes32,t_struct(Stake)8408_storage)",
            "src": "../project:/contracts/MelandStakesStorage.sol:25"
          },
          {
            "contract": "MelandStakesStorage",
            "label": "stakePoolIdsByStaker",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandStakesStorage.sol:27"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(StakePool)8395_storage)": {
            "label": "mapping(uint256 => struct MelandStakesStorage.StakePool)"
          },
          "t_struct(StakePool)8395_storage": {
            "label": "struct MelandStakesStorage.StakePool",
            "members": [
              {
                "label": "ditaminLD",
                "type": "t_uint256"
              },
              {
                "label": "ditaminC",
                "type": "t_uint256"
              },
              {
                "label": "numberOfMELD",
                "type": "t_uint256"
              },
              {
                "label": "landC",
                "type": "t_uint8"
              },
              {
                "label": "vipname",
                "type": "t_bytes_storage"
              },
              {
                "label": "stakeApyPercent",
                "type": "t_uint8"
              },
              {
                "label": "gameApyPercent",
                "type": "t_uint8"
              },
              {
                "label": "freezeTime",
                "type": "t_uint256"
              },
              {
                "label": "totalVolume",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(Stake)8408_storage)": {
            "label": "mapping(bytes32 => struct MelandStakesStorage.Stake)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(Stake)8408_storage": {
            "label": "struct MelandStakesStorage.Stake",
            "members": [
              {
                "label": "stakePoolId",
                "type": "t_uint256"
              },
              {
                "label": "staker",
                "type": "t_address"
              },
              {
                "label": "lastRecivedAt",
                "type": "t_uint256"
              },
              {
                "label": "stakedAt",
                "type": "t_uint256"
              },
              {
                "label": "expiredAt",
                "type": "t_uint256"
              },
              {
                "label": "claimed",
                "type": "t_bool"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "8ec492cf044f746747b21da722458b6b0bd4db8f784bf37f5466234828b01524": {
      "address": "0x4cC36011Bc0d67b8c9216fE9a42d50F6B12014C9",
      "txHash": "0x690270b923a507ba92c3bb99b096acf2962e9ee7cc4c97566593723828dc5666",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12214",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13856",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeItemBySymbol",
            "type": "t_mapping(t_bytes32,t_struct(StoreItem)9902_storage)",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155Land",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155Land.sol:27"
          },
          {
            "contract": "Meland1155Land",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155Land.sol:28"
          },
          {
            "contract": "Meland1155Land",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Land.sol:29"
          },
          {
            "contract": "Meland1155Land",
            "label": "ticketlandIds",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/Meland1155Land.sol:31"
          }
        ],
        "types": {
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)100_storage": {
            "label": "uint256[100]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)13856": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_mapping(t_bytes32,t_struct(StoreItem)9902_storage)": {
            "label": "mapping(bytes32 => struct Meland1155StoreItem.StoreItem)"
          },
          "t_struct(StoreItem)9902_storage": {
            "label": "struct Meland1155StoreItem.StoreItem",
            "members": [
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "price",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)12214": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "1d0ce3aede28bb5d29262a9217adb3eb9099d89e901c9b7fd6321cff8a6bb853": {
      "address": "0x579ab79928cf1018b8C73FB0a5b690461f23AE02",
      "txHash": "0x03ad4c496472a5062c39662a396949623f18fcbb869529de8cd2253de97256e0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12214",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13856",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeItemBySymbol",
            "type": "t_mapping(t_bytes32,t_struct(StoreItem)9902_storage)",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)13856": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_mapping(t_bytes32,t_struct(StoreItem)9902_storage)": {
            "label": "mapping(bytes32 => struct Meland1155StoreItem.StoreItem)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(StoreItem)9902_storage": {
            "label": "struct Meland1155StoreItem.StoreItem",
            "members": [
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "price",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12214": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "bb5df1997cf689b872fbbbb057990bed6593c7095299cdb51d68aab0cefee200": {
      "address": "0x513217E7c2E24C417B14263F3d85AbBDDE75E68C",
      "txHash": "0x08ba72ba595062d04b07fbc89139be7c21240787a7d19d40e2fa0eea809b060c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12179",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13821",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeItemBySymbol",
            "type": "t_mapping(t_bytes32,t_struct(StoreItem)9902_storage)",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155Land",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155Land.sol:27"
          },
          {
            "contract": "Meland1155Land",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155Land.sol:28"
          },
          {
            "contract": "Meland1155Land",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Land.sol:29"
          },
          {
            "contract": "Meland1155Land",
            "label": "ticketlandIds",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/Meland1155Land.sol:31"
          }
        ],
        "types": {
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)100_storage": {
            "label": "uint256[100]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)13821": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_mapping(t_bytes32,t_struct(StoreItem)9902_storage)": {
            "label": "mapping(bytes32 => struct Meland1155StoreItem.StoreItem)"
          },
          "t_struct(StoreItem)9902_storage": {
            "label": "struct Meland1155StoreItem.StoreItem",
            "members": [
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "price",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)12179": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "ea730d49433c25ad2b20325b4b8c6ec2ec59971d48f5a02477e5e7c23e4c93ec": {
      "address": "0x189C5149D619F206d42C213fC0A565248e5A40a2",
      "txHash": "0x942b3ddf77e424556401c11bf56c027f6ea4086c6998286357355ee0ea9fac1b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12218",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13860",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeItemBySymbol",
            "type": "t_mapping(t_bytes32,t_struct(StoreItem)9902_storage)",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155Land",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155Land.sol:27"
          },
          {
            "contract": "Meland1155Land",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155Land.sol:28"
          },
          {
            "contract": "Meland1155Land",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Land.sol:29"
          },
          {
            "contract": "Meland1155Land",
            "label": "ticketlandIds",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/Meland1155Land.sol:31"
          }
        ],
        "types": {
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)100_storage": {
            "label": "uint256[100]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)13860": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_mapping(t_bytes32,t_struct(StoreItem)9902_storage)": {
            "label": "mapping(bytes32 => struct Meland1155StoreItem.StoreItem)"
          },
          "t_struct(StoreItem)9902_storage": {
            "label": "struct Meland1155StoreItem.StoreItem",
            "members": [
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "price",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)12218": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "dc2da6b3d0ca7cead96ca086042cbed113b40725536431c471c8f8ed235e4c58": {
      "address": "0xb95EA90A62193702785c167673d902b384A0FdF8",
      "txHash": "0x0c1451040c475c68f709b31487739837ee335e5cbb3b399f1af67130356678f5",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12218",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13860",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeItemBySymbol",
            "type": "t_mapping(t_bytes32,t_struct(StoreItem)9902_storage)",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)13860": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_mapping(t_bytes32,t_struct(StoreItem)9902_storage)": {
            "label": "mapping(bytes32 => struct Meland1155StoreItem.StoreItem)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(StoreItem)9902_storage": {
            "label": "struct Meland1155StoreItem.StoreItem",
            "members": [
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "price",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12218": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "f729625b2190f4f9dc66ae30bac11d4ac89c20e4ee90e7f2c158f6cb2f5aca48": {
      "address": "0x80931397EA9047f4627A58948C3e687804AdBACE",
      "txHash": "0x542402dcc48d1a9c9c9a47c6440cdb5d198f896581bbbff4605b06f1c75c0a27",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12203",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13845",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeItemBySymbol",
            "type": "t_mapping(t_bytes32,t_struct(StoreItem)9902_storage)",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155Land",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155Land.sol:27"
          },
          {
            "contract": "Meland1155Land",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155Land.sol:28"
          },
          {
            "contract": "Meland1155Land",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Land.sol:29"
          },
          {
            "contract": "Meland1155Land",
            "label": "ticketlandIds",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/Meland1155Land.sol:31"
          }
        ],
        "types": {
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)100_storage": {
            "label": "uint256[100]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)13845": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_mapping(t_bytes32,t_struct(StoreItem)9902_storage)": {
            "label": "mapping(bytes32 => struct Meland1155StoreItem.StoreItem)"
          },
          "t_struct(StoreItem)9902_storage": {
            "label": "struct Meland1155StoreItem.StoreItem",
            "members": [
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "price",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)12203": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "6de2afe8a7eff388cbae84d2dbbf78bebfef053d84749141560dfe20a679d44f": {
      "address": "0x1f1b9eA749F549F8656A4305a822408740ed8De7",
      "txHash": "0xc68186cd7990864f6cd9f869700eea76cbb83eeb21ab362f60ee8658bd1a63c7",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12203",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13845",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeItemBySymbol",
            "type": "t_mapping(t_bytes32,t_struct(StoreItem)9902_storage)",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)13845": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_mapping(t_bytes32,t_struct(StoreItem)9902_storage)": {
            "label": "mapping(bytes32 => struct Meland1155StoreItem.StoreItem)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(StoreItem)9902_storage": {
            "label": "struct Meland1155StoreItem.StoreItem",
            "members": [
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "price",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12203": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "5a2ad6e43d9fdba6f069f7b16b163b9f506718a8f95a021140c3f88e8337146e": {
      "address": "0xE9487bbFAEf5F6a81C07Cd9Fa22e6d0D4FC8d831",
      "txHash": "0x11f9342690d94b8d89dc487552e53e74c57ecf5c63d53790c0372141a73f3c41",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12210",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13852",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeItemBySymbol",
            "type": "t_mapping(t_bytes32,t_struct(StoreItem)9902_storage)",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155Land",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155Land.sol:27"
          },
          {
            "contract": "Meland1155Land",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155Land.sol:28"
          },
          {
            "contract": "Meland1155Land",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Land.sol:29"
          },
          {
            "contract": "Meland1155Land",
            "label": "ticketlandIds",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/Meland1155Land.sol:31"
          }
        ],
        "types": {
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)100_storage": {
            "label": "uint256[100]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)13852": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_mapping(t_bytes32,t_struct(StoreItem)9902_storage)": {
            "label": "mapping(bytes32 => struct Meland1155StoreItem.StoreItem)"
          },
          "t_struct(StoreItem)9902_storage": {
            "label": "struct Meland1155StoreItem.StoreItem",
            "members": [
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "price",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)12210": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "25f27fc7bd962ce600b1d3598990f7896aa251e71c3f12b63717d29bf042d509": {
      "address": "0x9D94eF7316B748bC1a3C0eEd24A1D3e93478EbCC",
      "txHash": "0x5e80c2a62782ab2d4664c9289cf90da9e7d9772bd37771efa5c969ae4c8bfb97",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12210",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13852",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeItemBySymbol",
            "type": "t_mapping(t_bytes32,t_struct(StoreItem)9902_storage)",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)13852": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_mapping(t_bytes32,t_struct(StoreItem)9902_storage)": {
            "label": "mapping(bytes32 => struct Meland1155StoreItem.StoreItem)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(StoreItem)9902_storage": {
            "label": "struct Meland1155StoreItem.StoreItem",
            "members": [
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "price",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12210": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "17c58a009e22f9dcda49f00bceded596a31952317c36d362dc53e5af1cd23be8": {
      "address": "0x9A3de0740F018C0f39b41B2C484A428059c3504D",
      "txHash": "0xbee7c6dcea59f61fd69ed169eeaa87a7e3f713321a07224455bbc5f4bdbba23b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12227",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13869",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeItemBySymbol",
            "type": "t_mapping(t_bytes32,t_struct(StoreItem)9902_storage)",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155Land",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155Land.sol:27"
          },
          {
            "contract": "Meland1155Land",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155Land.sol:28"
          },
          {
            "contract": "Meland1155Land",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Land.sol:29"
          },
          {
            "contract": "Meland1155Land",
            "label": "ticketlandIds",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/Meland1155Land.sol:31"
          }
        ],
        "types": {
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)100_storage": {
            "label": "uint256[100]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)13869": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_mapping(t_bytes32,t_struct(StoreItem)9902_storage)": {
            "label": "mapping(bytes32 => struct Meland1155StoreItem.StoreItem)"
          },
          "t_struct(StoreItem)9902_storage": {
            "label": "struct Meland1155StoreItem.StoreItem",
            "members": [
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "price",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)12227": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "91f080303b4583eab9620e2b6b4ff306d5efbb684349ff4b173f645e555faa8e": {
      "address": "0x990241D17f3EB32369B13BB8bDd2685Ac05C7670",
      "txHash": "0x6da7d177c1f5cdd85945597cc85f911892e44cd08024342b9a65091fdcf7fcaf",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12227",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13869",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeItemBySymbol",
            "type": "t_mapping(t_bytes32,t_struct(StoreItem)9902_storage)",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)13869": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_mapping(t_bytes32,t_struct(StoreItem)9902_storage)": {
            "label": "mapping(bytes32 => struct Meland1155StoreItem.StoreItem)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(StoreItem)9902_storage": {
            "label": "struct Meland1155StoreItem.StoreItem",
            "members": [
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "price",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12227": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "09e2557bbf262b62020bc45bc4a403a0b76184ed49e40d8454c673d9dc00e3b2": {
      "address": "0x7bcc3D850Fa4FF8f8912508467E91b1d4f6D8618",
      "txHash": "0x5584e471591cbe4b32e11a73fbbe440e451ea0b5f670b50f37e64f5778e32036",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12209",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13851",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeItemBySymbol",
            "type": "t_mapping(t_bytes32,t_struct(StoreItem)9902_storage)",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155Land",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155Land.sol:27"
          },
          {
            "contract": "Meland1155Land",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155Land.sol:28"
          },
          {
            "contract": "Meland1155Land",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Land.sol:29"
          },
          {
            "contract": "Meland1155Land",
            "label": "ticketlandIds",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/Meland1155Land.sol:31"
          }
        ],
        "types": {
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)100_storage": {
            "label": "uint256[100]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)13851": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_mapping(t_bytes32,t_struct(StoreItem)9902_storage)": {
            "label": "mapping(bytes32 => struct Meland1155StoreItem.StoreItem)"
          },
          "t_struct(StoreItem)9902_storage": {
            "label": "struct Meland1155StoreItem.StoreItem",
            "members": [
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "price",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)12209": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "4dc80b8dd50ed0a246b550cbc1fa9a7477304d298872bc983257998ddd6a8274": {
      "address": "0x22597939D710C95f9b45b2019Cb2404A3869210D",
      "txHash": "0x203121c5e6f7bae85821ec3795bacb72e7020888f2b0c65ace3565f84a258cdf",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12209",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13851",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeItemBySymbol",
            "type": "t_mapping(t_bytes32,t_struct(StoreItem)9902_storage)",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)13851": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_mapping(t_bytes32,t_struct(StoreItem)9902_storage)": {
            "label": "mapping(bytes32 => struct Meland1155StoreItem.StoreItem)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(StoreItem)9902_storage": {
            "label": "struct Meland1155StoreItem.StoreItem",
            "members": [
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "price",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12209": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "b21e570588649573cadbd736e83eb8b2b9f90c9525b577a74a4806652de05230": {
      "address": "0x364da5A1eA19232815702ca1D32cC17B3F5792aF",
      "txHash": "0x9e643d772713b6dfacffb512323171c85f834f3b477cf42801e2bfccbfa2ac41",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12215",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13857",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeItemBySymbol",
            "type": "t_mapping(t_bytes32,t_struct(StoreItem)9902_storage)",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155Land",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155Land.sol:27"
          },
          {
            "contract": "Meland1155Land",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155Land.sol:28"
          },
          {
            "contract": "Meland1155Land",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Land.sol:29"
          },
          {
            "contract": "Meland1155Land",
            "label": "ticketlandIds",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/Meland1155Land.sol:31"
          }
        ],
        "types": {
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)100_storage": {
            "label": "uint256[100]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)13857": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_mapping(t_bytes32,t_struct(StoreItem)9902_storage)": {
            "label": "mapping(bytes32 => struct Meland1155StoreItem.StoreItem)"
          },
          "t_struct(StoreItem)9902_storage": {
            "label": "struct Meland1155StoreItem.StoreItem",
            "members": [
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "price",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)12215": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "fb2c30823094f6ea5c5a3986a69596c0c6ba2ae4036c166eb6f8c1c3f9dc3cd5": {
      "address": "0xcd2a77ab27A0159a6846bA75B60efc00Ae91cf46",
      "txHash": "0x7416832066a0a83a28a9b9898235bca784ca9847649e7d6949e0339e88224712",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12215",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13857",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeItemBySymbol",
            "type": "t_mapping(t_bytes32,t_struct(StoreItem)9902_storage)",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)13857": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_mapping(t_bytes32,t_struct(StoreItem)9902_storage)": {
            "label": "mapping(bytes32 => struct Meland1155StoreItem.StoreItem)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(StoreItem)9902_storage": {
            "label": "struct Meland1155StoreItem.StoreItem",
            "members": [
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "price",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12215": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "3947a22c38604c192221d9a79ada9362a0db151947bb3ce807cda9e9bfd36f01": {
      "address": "0x1B587B2B726594EC7Ef2Ff30ABb38D6738D85810",
      "txHash": "0x4f2e97adfce92f4b88a5f62b91832bfed38404e821b74fd91a71b6fdad4e5a1b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12227",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13869",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeItemBySymbol",
            "type": "t_mapping(t_bytes32,t_struct(StoreItem)9902_storage)",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155Land",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155Land.sol:27"
          },
          {
            "contract": "Meland1155Land",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155Land.sol:28"
          },
          {
            "contract": "Meland1155Land",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Land.sol:29"
          },
          {
            "contract": "Meland1155Land",
            "label": "ticketlandIds",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/Meland1155Land.sol:31"
          }
        ],
        "types": {
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)100_storage": {
            "label": "uint256[100]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)13869": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_mapping(t_bytes32,t_struct(StoreItem)9902_storage)": {
            "label": "mapping(bytes32 => struct Meland1155StoreItem.StoreItem)"
          },
          "t_struct(StoreItem)9902_storage": {
            "label": "struct Meland1155StoreItem.StoreItem",
            "members": [
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "price",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)12227": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "07914db7667c0a43df2e0a5393eec1ae00c3d78f087d3db7b7cf03e21a70991d": {
      "address": "0x1071f34ca170344fB7cd31616b95e4C7b936aA1C",
      "txHash": "0xceca4b86eead28da538889164325898cb7c17383d7eb8b74d3bc3062ed64b851",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12227",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13869",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeItemBySymbol",
            "type": "t_mapping(t_bytes32,t_struct(StoreItem)9902_storage)",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)13869": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_mapping(t_bytes32,t_struct(StoreItem)9902_storage)": {
            "label": "mapping(bytes32 => struct Meland1155StoreItem.StoreItem)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(StoreItem)9902_storage": {
            "label": "struct Meland1155StoreItem.StoreItem",
            "members": [
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "price",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12227": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "c6b27662aa60a244c249e3f94f4cfc3aa774ae5f190fa1ab32009f968b4d8d33": {
      "address": "0xd59FFe6402E9B00E6E4bF1Ec12C9759A2F6Be9bF",
      "txHash": "0xfb358a6544a7971bf44b13ded4ece2d03c6711da731e9199a1704242a266adb5",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12198",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13840",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155Land",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155Land.sol:27"
          },
          {
            "contract": "Meland1155Land",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155Land.sol:28"
          },
          {
            "contract": "Meland1155Land",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Land.sol:29"
          },
          {
            "contract": "Meland1155Land",
            "label": "ticketlandIds",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/Meland1155Land.sol:31"
          }
        ],
        "types": {
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)100_storage": {
            "label": "uint256[100]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)13840": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)12198": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "4373bff968db2ddeff226e5e0032f3f179b8d8b3c7a8c305e52db9d18579c79f": {
      "address": "0x60c1352cF584F03A2b1bc59BCDaBf358D8782D2e",
      "txHash": "0x3cd69975589c209d60192bd9ed767efa45d84efa637757e1723af33ad08c1821",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12198",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13840",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)13840": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12198": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "2ff83431502f09bcbd0f25009e87fbda99b2d34d78e8d6e325e51f8553a0dd96": {
      "address": "0x0Bc5ab375bCefF46302E1a23286aE9Fe6B5FB266",
      "txHash": "0xa390bddaef69d2019604ee9b407a3b2fcd5e5e03686cc5a7df825f7d419267a2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12195",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13837",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155Land",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155Land.sol:27"
          },
          {
            "contract": "Meland1155Land",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155Land.sol:28"
          },
          {
            "contract": "Meland1155Land",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Land.sol:29"
          },
          {
            "contract": "Meland1155Land",
            "label": "ticketlandIds",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/Meland1155Land.sol:31"
          }
        ],
        "types": {
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)100_storage": {
            "label": "uint256[100]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)13837": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)12195": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "cb2464913f2b024de81c4db4bd9532f227a93c56d46ba56d4d118867ae11fc88": {
      "address": "0x9820a661279E952a93062d2028E8e8CD80943afF",
      "txHash": "0xa0829cf31e9bf7699244a3b89ad3d2cbd82fc37058bb97dbd2d39952bc5d669f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12195",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13837",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)13837": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12195": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "cc90acde72cccd5eff331db26c784043902dea5c28c8a66a08af7429f4c9412b": {
      "address": "0x29FD35771fDA762Eb1a54F8Ea5E60c41402D1737",
      "txHash": "0x8b2d3f5801da389c80bad1e3ada71b8b48efc7ff22a90f7ed3ed337e16c170a4",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12188",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13830",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155Land",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155Land.sol:27"
          },
          {
            "contract": "Meland1155Land",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155Land.sol:28"
          },
          {
            "contract": "Meland1155Land",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Land.sol:29"
          },
          {
            "contract": "Meland1155Land",
            "label": "ticketlandIds",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/Meland1155Land.sol:31"
          }
        ],
        "types": {
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)100_storage": {
            "label": "uint256[100]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)13830": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)12188": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "ae1e1d968ce014ce46123c22506c25688c38575000935dc8c8d14c2edfaeeefc": {
      "address": "0x01C299a1Ba46eC7629cD808D70Ad1f70e7582E3f",
      "txHash": "0x08931d68eb1f063ad71603de8780a9f1c42736784ea7a15d6d4752c47866c768",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12188",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13830",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)13830": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12188": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "6a2552a8cd9058b4a1889191cf8e6c3ceb55e03e9e2416ef9a0cff1199ee5635": {
      "address": "0x768D8b7E432A9515d03863E84F82bca250423C7c",
      "txHash": "0xdb46f01ac7faa2edd5e67934a1776e89ee9e913ef6170e3f6ae139fae1bf9017",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12214",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13856",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155Land",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155Land.sol:27"
          },
          {
            "contract": "Meland1155Land",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155Land.sol:28"
          },
          {
            "contract": "Meland1155Land",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Land.sol:29"
          },
          {
            "contract": "Meland1155Land",
            "label": "ticketlandIds",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/Meland1155Land.sol:31"
          }
        ],
        "types": {
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)100_storage": {
            "label": "uint256[100]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)13856": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)12214": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "6c034add3d309865eff73684d4b68722a420458a4ce89d7b624dfd32f3e3aedd": {
      "address": "0xd1787F47FFf2e58242090b3CAc9D0eE2b907B169",
      "txHash": "0xad83de73494ed61d912ce8c082ae314dea19ec1e2f801cd5556eca9d98e7efc2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12214",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13856",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)13856": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12214": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "fe3285dedc52d2854559edf0c5e030717664628b5bd55eebb39cebcbb3e92821": {
      "address": "0x48fe0AE7bafb31d0B7E38fC1beA4A3136Ae346Fa",
      "txHash": "0x6966da1caf74d4c72a50c7c0d6852778b5465d90b919e015641cc23462be6738",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12149",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13791",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155Land",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155Land.sol:27"
          },
          {
            "contract": "Meland1155Land",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155Land.sol:28"
          },
          {
            "contract": "Meland1155Land",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Land.sol:29"
          },
          {
            "contract": "Meland1155Land",
            "label": "ticketlandIds",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/Meland1155Land.sol:31"
          }
        ],
        "types": {
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)100_storage": {
            "label": "uint256[100]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)13791": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)12149": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "559746a38a611afda6406257f2c98e53be2916490af30c7ebcc712370c6b63f6": {
      "address": "0xA6653282Dd707a6FF2ead092fA06b07678eB3F04",
      "txHash": "0xce3fcdfd9cdd6fa72528735607c2f2e23e03dae14d70c9a208a3b5e3f643bdb8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12149",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13791",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)13791": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12149": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "57d6109bac061d0c07a2d853c05ee3234a35221b5578dd4fa90f64b8816224c0": {
      "address": "0x8fDb9d74C5774c7E16a9B1818D3dFdC45C6E7142",
      "txHash": "0xf25b725d609545fd6b596dddc275b6c64e63c123a3b30443aae997d3ba776b8a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12180",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13822",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155Land",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155Land.sol:27"
          },
          {
            "contract": "Meland1155Land",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155Land.sol:28"
          },
          {
            "contract": "Meland1155Land",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Land.sol:29"
          },
          {
            "contract": "Meland1155Land",
            "label": "ticketlandIds",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/Meland1155Land.sol:31"
          }
        ],
        "types": {
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)100_storage": {
            "label": "uint256[100]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)13822": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)12180": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "5f0080b505e15b57d388e8f962beeb1ef73b1536ae6f5a9734257368d7a40525": {
      "address": "0x6bE2B5f6ef7fF21f24248D39b39eA0F1bf5061E6",
      "txHash": "0xbc7b5ba76e0ddf497254e8cb40884ceaf5f94f44b75fa14149a0d554fbb16f26",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12180",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13822",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)13822": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12180": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "aa505e3d6e8a780c45c1a4a6927e8685dee49cfcedc27f7b14f520f641f50cf6": {
      "address": "0x0B5f22A8A468d5Bc32180a35f2c6e4bf1b55f52B",
      "txHash": "0x558261427f3d154b499fce87a224fa48c304ee4eaef1f937cfd0086e6ac51b71",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12195",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13837",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155Land",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155Land.sol:27"
          },
          {
            "contract": "Meland1155Land",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155Land.sol:28"
          },
          {
            "contract": "Meland1155Land",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Land.sol:29"
          },
          {
            "contract": "Meland1155Land",
            "label": "ticketlandIds",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/Meland1155Land.sol:31"
          }
        ],
        "types": {
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)100_storage": {
            "label": "uint256[100]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)13837": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)12195": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "3e58bde2200b4608977072733383c1d32538d5b59b5d9c5513676abc983b0966": {
      "address": "0x7F6de8CF388Bf639802dCABad45D8067B517aE29",
      "txHash": "0x7fbe31c83ff73271868b6da88e254a97b17c4161ebb9ef694a49942290e78532",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12195",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13837",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)13837": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12195": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "83eae147d00b607d8ac9c69301ed29c8daa15a5ef57feb294eae0c1cb1117cbe": {
      "address": "0x2d94aEBba40F1f58a1e9310AE5e3b5203CC6eabb",
      "txHash": "0x99cda9135a380b61fc242dd09cafd22e7588e2b9dfb5c2a6898dda4d9590372d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12183",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13825",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155Land",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155Land.sol:27"
          },
          {
            "contract": "Meland1155Land",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155Land.sol:28"
          },
          {
            "contract": "Meland1155Land",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Land.sol:29"
          },
          {
            "contract": "Meland1155Land",
            "label": "ticketlandIds",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/Meland1155Land.sol:31"
          }
        ],
        "types": {
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)100_storage": {
            "label": "uint256[100]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)13825": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)12183": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "f241c6f334dddf33c3ee0265eaf3e1aeae8508377f0c77c9aaaa73f02aadd8ae": {
      "address": "0x031Dd0EB345F46d914D616ca356615B41B744fEC",
      "txHash": "0xdee2504c858c3524fe291f6efe84447fd983fd002520862a24fe0695d0c11e51",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12183",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13825",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)13825": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12183": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "35392b0ccc56a7f4dcdf9b5874cfb1c843912a10f9157f1c72c2ba5a2c448771": {
      "address": "0x07ee3F8B5ffA4E635dD8d23d7D4090412C05BeE3",
      "txHash": "0x0e1ce620cae2141421265fb3cf2d35c4cb4b5652100ccc881b697349a838ddcc",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12177",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13819",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155Land",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155Land.sol:27"
          },
          {
            "contract": "Meland1155Land",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155Land.sol:28"
          },
          {
            "contract": "Meland1155Land",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Land.sol:29"
          },
          {
            "contract": "Meland1155Land",
            "label": "ticketlandIds",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/Meland1155Land.sol:31"
          }
        ],
        "types": {
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)100_storage": {
            "label": "uint256[100]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)13819": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)12177": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "5ddca13c51b93f83a284ac8acaca94165b4cc2df605dc01e7644b389114d28b1": {
      "address": "0xb67F025BBEEe9Ea12CAa9759Fa4781dC066fb3D7",
      "txHash": "0x147a186baa4b36b9620d283c87e89c6eacc893b3a4a558d44ab90886cd1911ed",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12177",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13819",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)13819": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12177": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "0d9d0abfe3c63fed0f2d828e458ec7d9dd927710ca570c463554e723755514e7": {
      "address": "0xCF9c8d655f12C2F556f1c9Fc046FB803eC8849Fb",
      "txHash": "0xb79d5547c594e31f232fc72339f0ebf1ab3d5430a3b60b8566656b6121f34549",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12175",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13817",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155Land",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155Land.sol:27"
          },
          {
            "contract": "Meland1155Land",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155Land.sol:28"
          },
          {
            "contract": "Meland1155Land",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Land.sol:29"
          },
          {
            "contract": "Meland1155Land",
            "label": "ticketlandIds",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/Meland1155Land.sol:31"
          }
        ],
        "types": {
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)100_storage": {
            "label": "uint256[100]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)13817": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)12175": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "6a78e37ed302520364a492de4f20b2ce3c43c959ed518049723cb9e348de7d35": {
      "address": "0x1E34D9eBF0d33321c1EEc74dc0611506D9A3D154",
      "txHash": "0x19b2fe7a1ace565cabc8f6e4f9a29e1af92c7f28c7219c487829aaba15309dec",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12175",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13817",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)13817": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12175": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "6461b3c450e68b18767cada4ecf526d1535cae1003cadcab6db8216935644134": {
      "address": "0x705399977fc25DCd85740adCd0441D287916DeAe",
      "txHash": "0xf1a44345f7cb670bb2618ab507f7c570ab0b9bbbc57c143a75b57d3d26bc371e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12185",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13827",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155Land",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155Land.sol:27"
          },
          {
            "contract": "Meland1155Land",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155Land.sol:28"
          },
          {
            "contract": "Meland1155Land",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Land.sol:29"
          },
          {
            "contract": "Meland1155Land",
            "label": "ticketlandIds",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/Meland1155Land.sol:31"
          }
        ],
        "types": {
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)100_storage": {
            "label": "uint256[100]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)13827": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)12185": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "5ca2e05622fd5d82cf3113f1901b44b3ebb7a6b149d83dc9ddec83bc137666ae": {
      "address": "0xD41A8Be3A806F9443E193a0022f5a89786D99EF6",
      "txHash": "0x6e62c7702ad44d1a9e7d8bda58ab7e21110ee1e41537cf2e8c3130f0536f33f2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12185",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13827",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)13827": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12185": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "65e0006a4ea708135beb9329d13e49f9862cb4b814bf46dff0afe7be99dbecab": {
      "address": "0x623CA990f232b85Df2fE2Dd551056C57A2A913F9",
      "txHash": "0xe17cb25cbe330e62fe887152268bffd9caf206f8c42ccfa32e8fea640f1200de",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12207",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13849",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155Land",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155Land.sol:27"
          },
          {
            "contract": "Meland1155Land",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155Land.sol:28"
          },
          {
            "contract": "Meland1155Land",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Land.sol:29"
          },
          {
            "contract": "Meland1155Land",
            "label": "ticketlandIds",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/Meland1155Land.sol:31"
          }
        ],
        "types": {
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)100_storage": {
            "label": "uint256[100]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)13849": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)12207": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "370e10cc4029d65d0af35bc690c1de5e2c755f632fb116467eb8a22550a0bac8": {
      "address": "0x8aCc9292882ab0f6d46a89BD3dcE223649C8B984",
      "txHash": "0xe2045678034c405f4e93166ff20f167b348337ef663301a4257a924ac4483e29",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12207",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13849",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)13849": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12207": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "f3d71a0796dd1791727269b12919e342d8fa6631f170b159769988b5f6a580e8": {
      "address": "0x82A7752C6717EfED4bD22d3e0aF3A7bAC646CAaB",
      "txHash": "0x4334b93b0b77986864071f1c68691586c29f6fcb395b2583541f10be96163219",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12210",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13852",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155Land",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155Land.sol:27"
          },
          {
            "contract": "Meland1155Land",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155Land.sol:28"
          },
          {
            "contract": "Meland1155Land",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Land.sol:29"
          },
          {
            "contract": "Meland1155Land",
            "label": "ticketlandIds",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/Meland1155Land.sol:31"
          }
        ],
        "types": {
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)100_storage": {
            "label": "uint256[100]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)13852": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)12210": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "c56d7b886787243594bab4031930eb4e36bb50825e0ed7b05ae391a2f8083822": {
      "address": "0xc1Caa2C69E501afF7f44BD5E60F837DCCcBb77a4",
      "txHash": "0x16db1295a5fbf56b08f76fdec8a2029c3bd6dfe4a99f2baf57e706b9f8df261c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12210",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13852",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)13852": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12210": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "a02444eb5d1e6408fbf179d5c5daa92e056a4607619f0262bb0bcbb879a9d185": {
      "address": "0x2aD796126f7aF346D0086ae4765d9279D3BbCCF6",
      "txHash": "0x5c4d46c7f13738e269599be1d3f91b1c278e03ae8d972efa0adaa85b15231f51",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_rewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:14"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc1155RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:15"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc721RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:16"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc20RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:17"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc721RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC721Reward)12331_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:41"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc20RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Reward)12337_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:42"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc1155RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC1155Reward)12325_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:43"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardById",
            "type": "t_mapping(t_uint256,t_struct(Reward)12315_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:44"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:48"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:52"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:56"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:60"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardTransferedByRewardId",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../project:/contracts/MelandTierStorage.sol:63"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:40"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_uint256,t_struct(ERC721Reward)12331_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC721Reward)"
          },
          "t_struct(ERC721Reward)12331_storage": {
            "label": "struct MelandTierStorage.ERC721Reward",
            "members": [
              {
                "label": "erc721",
                "type": "t_contract(IERC721Upgradeable)3628"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC721Upgradeable)3628": {
            "label": "contract IERC721Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Reward)12337_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC20Reward)"
          },
          "t_struct(ERC20Reward)12337_storage": {
            "label": "struct MelandTierStorage.ERC20Reward",
            "members": [
              {
                "label": "erc20",
                "type": "t_contract(IERC20Upgradeable)3400"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC1155Reward)12325_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC1155Reward)"
          },
          "t_struct(ERC1155Reward)12325_storage": {
            "label": "struct MelandTierStorage.ERC1155Reward",
            "members": [
              {
                "label": "erc1155",
                "type": "t_contract(IERC1155Upgradeable)2499"
              },
              {
                "label": "tokenIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "amounts",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_contract(IERC1155Upgradeable)2499": {
            "label": "contract IERC1155Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(Reward)12315_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.Reward)"
          },
          "t_struct(Reward)12315_storage": {
            "label": "struct MelandTierStorage.Reward",
            "members": [
              {
                "label": "erc1155RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc721RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc20RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "e8e4d8ade49283958efb3ee043c16f4379c4c1dd4c9d704ab638b96ba7fc26dd": {
      "address": "0x41EDaC2a15508926940411FBA4DF5b1cA8773D82",
      "txHash": "0x949997860ec61d684318fc8a6447e3a888794bb6d2bcc7b2479c4d7ceba01d1e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12271",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13913",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)13913": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12271": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "1f8735f404d7d9bde7f5190321b9c7973fd939fcba36b8e59edfb099e9c417c4": {
      "address": "0x5010a08587c16017CbA4C885D007310FFF9276B9",
      "txHash": "0xf3336060a5820adc36fd99f5df19f7a2c611d2deb8a5a5832556ebb0d12cadb1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_rewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:14"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc1155RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:15"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc721RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:16"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc20RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:17"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc721RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC721Reward)12392_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:41"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc20RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Reward)12398_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:42"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc1155RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC1155Reward)12386_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:43"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardById",
            "type": "t_mapping(t_uint256,t_struct(Reward)12376_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:44"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:48"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:52"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:56"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:60"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardTransferedByRewardId",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../project:/contracts/MelandTierStorage.sol:63"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:40"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_uint256,t_struct(ERC721Reward)12392_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC721Reward)"
          },
          "t_struct(ERC721Reward)12392_storage": {
            "label": "struct MelandTierStorage.ERC721Reward",
            "members": [
              {
                "label": "erc721",
                "type": "t_contract(IERC721Upgradeable)3628"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC721Upgradeable)3628": {
            "label": "contract IERC721Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Reward)12398_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC20Reward)"
          },
          "t_struct(ERC20Reward)12398_storage": {
            "label": "struct MelandTierStorage.ERC20Reward",
            "members": [
              {
                "label": "erc20",
                "type": "t_contract(IERC20Upgradeable)3400"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC1155Reward)12386_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC1155Reward)"
          },
          "t_struct(ERC1155Reward)12386_storage": {
            "label": "struct MelandTierStorage.ERC1155Reward",
            "members": [
              {
                "label": "erc1155",
                "type": "t_contract(IERC1155Upgradeable)2499"
              },
              {
                "label": "tokenIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "amounts",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_contract(IERC1155Upgradeable)2499": {
            "label": "contract IERC1155Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(Reward)12376_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.Reward)"
          },
          "t_struct(Reward)12376_storage": {
            "label": "struct MelandTierStorage.Reward",
            "members": [
              {
                "label": "erc1155RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc721RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc20RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "0e0185f6af57c9bba29ba9e6db4e8af1e968b8d2438ed0e5dd8252e321523025": {
      "address": "0x713b19Bf5a7904266f2070624B4617c35a3b3263",
      "txHash": "0x3d5e28deb8b86eef562d81487c29fd5224866b32bf94b8a5a6c9111b8068290f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_rewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:14"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc1155RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:15"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc721RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:16"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc20RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:17"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc721RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC721Reward)12392_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:41"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc20RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Reward)12398_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:42"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc1155RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC1155Reward)12386_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:43"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardById",
            "type": "t_mapping(t_uint256,t_struct(Reward)12376_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:44"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:48"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:52"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:56"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:60"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardTransferedByRewardId",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../project:/contracts/MelandTierStorage.sol:63"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:40"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_uint256,t_struct(ERC721Reward)12392_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC721Reward)"
          },
          "t_struct(ERC721Reward)12392_storage": {
            "label": "struct MelandTierStorage.ERC721Reward",
            "members": [
              {
                "label": "erc721",
                "type": "t_contract(IERC721Upgradeable)3628"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC721Upgradeable)3628": {
            "label": "contract IERC721Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Reward)12398_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC20Reward)"
          },
          "t_struct(ERC20Reward)12398_storage": {
            "label": "struct MelandTierStorage.ERC20Reward",
            "members": [
              {
                "label": "erc20",
                "type": "t_contract(IERC20Upgradeable)3400"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC1155Reward)12386_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC1155Reward)"
          },
          "t_struct(ERC1155Reward)12386_storage": {
            "label": "struct MelandTierStorage.ERC1155Reward",
            "members": [
              {
                "label": "erc1155",
                "type": "t_contract(IERC1155Upgradeable)2499"
              },
              {
                "label": "tokenIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "amounts",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_contract(IERC1155Upgradeable)2499": {
            "label": "contract IERC1155Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(Reward)12376_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.Reward)"
          },
          "t_struct(Reward)12376_storage": {
            "label": "struct MelandTierStorage.Reward",
            "members": [
              {
                "label": "erc1155RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc721RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc20RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "b8bf9dc259771587acbf773ecb87ae8dc24a7c7c2a12b87064dc1373c2c4df4f": {
      "address": "0x52c7aa23072fB443b6ba0316438e75444258Ec95",
      "txHash": "0xce5728ba2af97caa762b3789a137c804b8fc9c710da8e742565143eb21a2635e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_rewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:14"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc1155RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:15"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc721RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:16"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc20RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:17"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc721RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC721Reward)12392_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:41"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc20RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Reward)12398_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:42"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc1155RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC1155Reward)12386_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:43"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardById",
            "type": "t_mapping(t_uint256,t_struct(Reward)12376_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:44"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:48"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:52"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:56"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:60"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardTransferedByRewardId",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../project:/contracts/MelandTierStorage.sol:63"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:40"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_uint256,t_struct(ERC721Reward)12392_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC721Reward)"
          },
          "t_struct(ERC721Reward)12392_storage": {
            "label": "struct MelandTierStorage.ERC721Reward",
            "members": [
              {
                "label": "erc721",
                "type": "t_contract(IERC721Upgradeable)3628"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC721Upgradeable)3628": {
            "label": "contract IERC721Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Reward)12398_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC20Reward)"
          },
          "t_struct(ERC20Reward)12398_storage": {
            "label": "struct MelandTierStorage.ERC20Reward",
            "members": [
              {
                "label": "erc20",
                "type": "t_contract(IERC20Upgradeable)3400"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC1155Reward)12386_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC1155Reward)"
          },
          "t_struct(ERC1155Reward)12386_storage": {
            "label": "struct MelandTierStorage.ERC1155Reward",
            "members": [
              {
                "label": "erc1155",
                "type": "t_contract(IERC1155Upgradeable)2499"
              },
              {
                "label": "tokenIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "amounts",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_contract(IERC1155Upgradeable)2499": {
            "label": "contract IERC1155Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(Reward)12376_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.Reward)"
          },
          "t_struct(Reward)12376_storage": {
            "label": "struct MelandTierStorage.Reward",
            "members": [
              {
                "label": "erc1155RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc721RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc20RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "2ed26180d59d2fe5b4622172b07e7e0f01e621480b8c8c44e43431e417c4ee86": {
      "address": "0x329Bd9ce990fF64BA10082b3762D7441aa5A2071",
      "txHash": "0xe9d0190398d9d72bc933ddb1ad290e08acf56735ad654fdbc563c827acc1ac79",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_rewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:14"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc1155RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:15"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc721RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:16"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc20RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:17"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc721RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC721Reward)12392_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:41"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc20RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Reward)12398_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:42"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc1155RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC1155Reward)12386_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:43"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardById",
            "type": "t_mapping(t_uint256,t_struct(Reward)12376_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:44"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:48"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:52"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:56"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:60"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardTransferedByRewardId",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../project:/contracts/MelandTierStorage.sol:63"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:40"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_uint256,t_struct(ERC721Reward)12392_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC721Reward)"
          },
          "t_struct(ERC721Reward)12392_storage": {
            "label": "struct MelandTierStorage.ERC721Reward",
            "members": [
              {
                "label": "erc721",
                "type": "t_contract(IERC721Upgradeable)3628"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC721Upgradeable)3628": {
            "label": "contract IERC721Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Reward)12398_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC20Reward)"
          },
          "t_struct(ERC20Reward)12398_storage": {
            "label": "struct MelandTierStorage.ERC20Reward",
            "members": [
              {
                "label": "erc20",
                "type": "t_contract(IERC20Upgradeable)3400"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC1155Reward)12386_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC1155Reward)"
          },
          "t_struct(ERC1155Reward)12386_storage": {
            "label": "struct MelandTierStorage.ERC1155Reward",
            "members": [
              {
                "label": "erc1155",
                "type": "t_contract(IERC1155Upgradeable)2499"
              },
              {
                "label": "tokenIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "amounts",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_contract(IERC1155Upgradeable)2499": {
            "label": "contract IERC1155Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(Reward)12376_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.Reward)"
          },
          "t_struct(Reward)12376_storage": {
            "label": "struct MelandTierStorage.Reward",
            "members": [
              {
                "label": "erc1155RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc721RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc20RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "bfda36264511567addb01269bd2fbdb80d3ac02bd7b970afc4e1c3b53a3322af": {
      "address": "0x6a1D8679888aC84160342b0E6d2A0Df05251a254",
      "txHash": "0xb14033b11de0a88ed587b8afccf9fb5cb576564312023e3d633e393df783a5cb",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_rewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:14"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc1155RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:15"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc721RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:16"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc20RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:17"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc721RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC721Reward)12392_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:41"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc20RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Reward)12398_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:42"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc1155RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC1155Reward)12386_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:43"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardById",
            "type": "t_mapping(t_uint256,t_struct(Reward)12376_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:44"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:48"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:52"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:56"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:60"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardTransferedByRewardId",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../project:/contracts/MelandTierStorage.sol:63"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:40"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_uint256,t_struct(ERC721Reward)12392_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC721Reward)"
          },
          "t_struct(ERC721Reward)12392_storage": {
            "label": "struct MelandTierStorage.ERC721Reward",
            "members": [
              {
                "label": "erc721",
                "type": "t_contract(IERC721Upgradeable)3628"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC721Upgradeable)3628": {
            "label": "contract IERC721Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Reward)12398_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC20Reward)"
          },
          "t_struct(ERC20Reward)12398_storage": {
            "label": "struct MelandTierStorage.ERC20Reward",
            "members": [
              {
                "label": "erc20",
                "type": "t_contract(IERC20Upgradeable)3400"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC1155Reward)12386_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC1155Reward)"
          },
          "t_struct(ERC1155Reward)12386_storage": {
            "label": "struct MelandTierStorage.ERC1155Reward",
            "members": [
              {
                "label": "erc1155",
                "type": "t_contract(IERC1155Upgradeable)2499"
              },
              {
                "label": "tokenIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "amounts",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_contract(IERC1155Upgradeable)2499": {
            "label": "contract IERC1155Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(Reward)12376_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.Reward)"
          },
          "t_struct(Reward)12376_storage": {
            "label": "struct MelandTierStorage.Reward",
            "members": [
              {
                "label": "erc1155RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc721RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc20RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "737b2aab1563de9fa584eb7bc70a7a8b012e9b59725774a7eef2aeb364c78368": {
      "address": "0x99211045392A66A054707a70a3eBaF30b8cBA190",
      "txHash": "0x7488cb0084913d669090effc6f72fa0a36963521d58ab5511960852b5cdf80a8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12269",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13922",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)13922": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12269": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "13a03bcb7b8e288d7edf5bdf36afa157b77daa33045eeda47def423807767411": {
      "address": "0x9c6aCE85CD7217f4ae2035b8DCc0554F7E3f7aD0",
      "txHash": "0x7b5d110371d1532c72f3fe6b58866ac49c431292c9929435a47c4e94afd7df96",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_rewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:14"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc1155RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:15"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc721RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:16"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc20RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:17"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc721RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC721Reward)12394_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:41"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc20RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Reward)12400_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:42"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc1155RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC1155Reward)12388_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:43"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardById",
            "type": "t_mapping(t_uint256,t_struct(Reward)12378_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:44"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:48"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:52"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:56"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:60"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardTransferedByRewardId",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../project:/contracts/MelandTierStorage.sol:63"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:40"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_uint256,t_struct(ERC721Reward)12394_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC721Reward)"
          },
          "t_struct(ERC721Reward)12394_storage": {
            "label": "struct MelandTierStorage.ERC721Reward",
            "members": [
              {
                "label": "erc721",
                "type": "t_contract(IERC721Upgradeable)3628"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC721Upgradeable)3628": {
            "label": "contract IERC721Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Reward)12400_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC20Reward)"
          },
          "t_struct(ERC20Reward)12400_storage": {
            "label": "struct MelandTierStorage.ERC20Reward",
            "members": [
              {
                "label": "erc20",
                "type": "t_contract(IERC20Upgradeable)3400"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC1155Reward)12388_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC1155Reward)"
          },
          "t_struct(ERC1155Reward)12388_storage": {
            "label": "struct MelandTierStorage.ERC1155Reward",
            "members": [
              {
                "label": "erc1155",
                "type": "t_contract(IERC1155Upgradeable)2499"
              },
              {
                "label": "tokenIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "amounts",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_contract(IERC1155Upgradeable)2499": {
            "label": "contract IERC1155Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(Reward)12378_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.Reward)"
          },
          "t_struct(Reward)12378_storage": {
            "label": "struct MelandTierStorage.Reward",
            "members": [
              {
                "label": "erc1155RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc721RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc20RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "92d8e0abcc2c4fbfa9b88d2a2435a58e28692c1f4f21ab1d1317bbb4a5141c3d": {
      "address": "0xe73941183c506737A230bF79212C3ecf3644f68f",
      "txHash": "0x22166908c4000efb7861ad4efb86aa386efd0b193fa8ce10826e0253d54d91b3",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_rewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:14"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc1155RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:15"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc721RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:16"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc20RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:17"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc721RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC721Reward)12392_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:41"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc20RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Reward)12398_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:42"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc1155RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC1155Reward)12386_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:43"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardById",
            "type": "t_mapping(t_uint256,t_struct(Reward)12376_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:44"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:48"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:52"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:56"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:60"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardTransferedByRewardId",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../project:/contracts/MelandTierStorage.sol:63"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:40"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_uint256,t_struct(ERC721Reward)12392_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC721Reward)"
          },
          "t_struct(ERC721Reward)12392_storage": {
            "label": "struct MelandTierStorage.ERC721Reward",
            "members": [
              {
                "label": "erc721",
                "type": "t_contract(IERC721Upgradeable)3628"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC721Upgradeable)3628": {
            "label": "contract IERC721Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Reward)12398_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC20Reward)"
          },
          "t_struct(ERC20Reward)12398_storage": {
            "label": "struct MelandTierStorage.ERC20Reward",
            "members": [
              {
                "label": "erc20",
                "type": "t_contract(IERC20Upgradeable)3400"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC1155Reward)12386_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC1155Reward)"
          },
          "t_struct(ERC1155Reward)12386_storage": {
            "label": "struct MelandTierStorage.ERC1155Reward",
            "members": [
              {
                "label": "erc1155",
                "type": "t_contract(IERC1155Upgradeable)2499"
              },
              {
                "label": "tokenIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "amounts",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_contract(IERC1155Upgradeable)2499": {
            "label": "contract IERC1155Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(Reward)12376_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.Reward)"
          },
          "t_struct(Reward)12376_storage": {
            "label": "struct MelandTierStorage.Reward",
            "members": [
              {
                "label": "erc1155RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc721RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc20RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "ed74a53ac630de876a15b398606cf36b1db847077d356dc06889342fac41b6b7": {
      "address": "0xFd4D37cf28C723601BDcc9466a9DD3De46ED72F9",
      "txHash": "0x009cfb71d2c17a69dd8e1edbe9690ebbf4b24e6d0d3fd7609fbf18cade38c1d8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12271",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13922",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155Land",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155Land.sol:26"
          },
          {
            "contract": "Meland1155Land",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155Land.sol:27"
          },
          {
            "contract": "Meland1155Land",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Land.sol:28"
          },
          {
            "contract": "Meland1155Land",
            "label": "ticketlandIds",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/Meland1155Land.sol:30"
          }
        ],
        "types": {
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)100_storage": {
            "label": "uint256[100]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)13922": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)12271": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "f1235a411750a5c1bf4601930920afca0dbc5d8295e10a7256355d51602fb6a3": {
      "address": "0xA64c1BE8548d3F822d4afb31f19E69bA788b43E7",
      "txHash": "0x392a6244129f63a362ebcb44cba35ceafdf6ef5cac712838624457c2510b9ce2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_rewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:14"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc1155RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:15"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc721RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:16"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc20RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:17"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc721RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC721Reward)12392_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:41"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc20RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Reward)12398_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:42"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc1155RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC1155Reward)12386_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:43"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardById",
            "type": "t_mapping(t_uint256,t_struct(Reward)12376_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:44"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:48"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:52"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:56"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:60"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardTransferedByRewardId",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../project:/contracts/MelandTierStorage.sol:63"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:40"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_uint256,t_struct(ERC721Reward)12392_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC721Reward)"
          },
          "t_struct(ERC721Reward)12392_storage": {
            "label": "struct MelandTierStorage.ERC721Reward",
            "members": [
              {
                "label": "erc721",
                "type": "t_contract(IERC721Upgradeable)3628"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC721Upgradeable)3628": {
            "label": "contract IERC721Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Reward)12398_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC20Reward)"
          },
          "t_struct(ERC20Reward)12398_storage": {
            "label": "struct MelandTierStorage.ERC20Reward",
            "members": [
              {
                "label": "erc20",
                "type": "t_contract(IERC20Upgradeable)3400"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC1155Reward)12386_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC1155Reward)"
          },
          "t_struct(ERC1155Reward)12386_storage": {
            "label": "struct MelandTierStorage.ERC1155Reward",
            "members": [
              {
                "label": "erc1155",
                "type": "t_contract(IERC1155Upgradeable)2499"
              },
              {
                "label": "tokenIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "amounts",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_contract(IERC1155Upgradeable)2499": {
            "label": "contract IERC1155Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(Reward)12376_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.Reward)"
          },
          "t_struct(Reward)12376_storage": {
            "label": "struct MelandTierStorage.Reward",
            "members": [
              {
                "label": "erc1155RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc721RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc20RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "093f5dad99c1764de8c815590f5465f4c8a0cd1a86177e4c7d0f0358a432a985": {
      "address": "0x7796126D7Ef07E486C348F648fD4d8337fEaC104",
      "txHash": "0x1a20d3aca31b70c0a96646b6cdec4c1d37d70b1b959ca1623057fb38d7bd43b0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12280",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13935",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3411",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155Land",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155Land.sol:26"
          },
          {
            "contract": "Meland1155Land",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155Land.sol:27"
          },
          {
            "contract": "Meland1155Land",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Land.sol:28"
          },
          {
            "contract": "Meland1155Land",
            "label": "ticketlandIds",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/Meland1155Land.sol:30"
          }
        ],
        "types": {
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)100_storage": {
            "label": "uint256[100]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)13935": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3411": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)12280": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "90d02dda402ecafc9b9f37bc706d0930757d2d4a6f13dad06e21c7caf13b7c32": {
      "address": "0x2B91ff3b37E6CBd12719783B204a2a4613E2Abd4",
      "txHash": "0x85e1745acbb35651c9b8f36295a81cb7962e0d3a6f95e2b8fb34ed89c5dc1830",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3934_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12280",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13935",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3411",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)13935": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3411": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12280": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3934_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "bf5ef181edbba9e9d0da59e4efa9ae595dc4d8a674412e8c6d32a78dd74dcd70": {
      "address": "0xe2bc2B0Eae4a3FF5C8C4b2D26954BAA746C84d0d",
      "txHash": "0x14ecf9408d25442bda006c8085ea63ed97d610eda3f09f347eac84120e1f00c9",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_rewardIdCounter",
            "type": "t_struct(Counter)3934_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:14"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc1155RewardIdCounter",
            "type": "t_struct(Counter)3934_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:15"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc721RewardIdCounter",
            "type": "t_struct(Counter)3934_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:16"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc20RewardIdCounter",
            "type": "t_struct(Counter)3934_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:17"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc721RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC721Reward)12403_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:41"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc20RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Reward)12409_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:42"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc1155RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC1155Reward)12397_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:43"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardById",
            "type": "t_mapping(t_uint256,t_struct(Reward)12387_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:44"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:48"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:52"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:56"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:60"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardTransferedByRewardId",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../project:/contracts/MelandTierStorage.sol:63"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3934_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:40"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)3934_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_uint256,t_struct(ERC721Reward)12403_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC721Reward)"
          },
          "t_struct(ERC721Reward)12403_storage": {
            "label": "struct MelandTierStorage.ERC721Reward",
            "members": [
              {
                "label": "erc721",
                "type": "t_contract(IERC721Upgradeable)3639"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC721Upgradeable)3639": {
            "label": "contract IERC721Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Reward)12409_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC20Reward)"
          },
          "t_struct(ERC20Reward)12409_storage": {
            "label": "struct MelandTierStorage.ERC20Reward",
            "members": [
              {
                "label": "erc20",
                "type": "t_contract(IERC20Upgradeable)3411"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3411": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC1155Reward)12397_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC1155Reward)"
          },
          "t_struct(ERC1155Reward)12397_storage": {
            "label": "struct MelandTierStorage.ERC1155Reward",
            "members": [
              {
                "label": "erc1155",
                "type": "t_contract(IERC1155Upgradeable)2510"
              },
              {
                "label": "tokenIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "amounts",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_contract(IERC1155Upgradeable)2510": {
            "label": "contract IERC1155Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(Reward)12387_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.Reward)"
          },
          "t_struct(Reward)12387_storage": {
            "label": "struct MelandTierStorage.Reward",
            "members": [
              {
                "label": "erc1155RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc721RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc20RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "2afc29535d81721892cd033ef1c1ff2927882f72004106e74d64d292f4c4ac10": {
      "address": "0xD1947352982a29EE8B9c91F07772c578f6870072",
      "txHash": "0xd2924df1b66960cce3fcbd58140250176abe9c05e834dbf332f79dc753f4e1c5",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12279",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13934",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3410",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155Land",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155Land.sol:26"
          },
          {
            "contract": "Meland1155Land",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155Land.sol:27"
          },
          {
            "contract": "Meland1155Land",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Land.sol:28"
          },
          {
            "contract": "Meland1155Land",
            "label": "ticketlandIds",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/Meland1155Land.sol:30"
          }
        ],
        "types": {
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)100_storage": {
            "label": "uint256[100]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)13934": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3410": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)12279": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "6ca79b309b12dda0167c55e72470cf0e598d319dca28ebcc02549666efaf42fc": {
      "address": "0xCEF357EeCB22D410A6Af06B7f7fc5ae9C4efB030",
      "txHash": "0x1e3262c9998731cad1c77d820cee2d8d531e795184536391cec136cfe407ae8f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3933_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12279",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13934",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3410",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)13934": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3410": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12279": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3933_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "d8b816ce604712f0b91d6cf83c0b028b5c68c657af099252ca2b3feed959fa08": {
      "address": "0xE8812b886e358A28dF125c2Aa26DCd6A5B6f3AaC",
      "txHash": "0xf4b308493504b7cd86e625b8d10a29c7eb27d6ce6b9ec9f691b18e337f633ca8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_rewardIdCounter",
            "type": "t_struct(Counter)3933_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:14"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc1155RewardIdCounter",
            "type": "t_struct(Counter)3933_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:15"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc721RewardIdCounter",
            "type": "t_struct(Counter)3933_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:16"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc20RewardIdCounter",
            "type": "t_struct(Counter)3933_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:17"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc721RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC721Reward)12402_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:41"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc20RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Reward)12408_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:42"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc1155RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC1155Reward)12396_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:43"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardById",
            "type": "t_mapping(t_uint256,t_struct(Reward)12386_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:44"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:48"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:52"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:56"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:60"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardTransferedByRewardId",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../project:/contracts/MelandTierStorage.sol:63"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3933_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:40"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)3933_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_uint256,t_struct(ERC721Reward)12402_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC721Reward)"
          },
          "t_struct(ERC721Reward)12402_storage": {
            "label": "struct MelandTierStorage.ERC721Reward",
            "members": [
              {
                "label": "erc721",
                "type": "t_contract(IERC721Upgradeable)3638"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC721Upgradeable)3638": {
            "label": "contract IERC721Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Reward)12408_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC20Reward)"
          },
          "t_struct(ERC20Reward)12408_storage": {
            "label": "struct MelandTierStorage.ERC20Reward",
            "members": [
              {
                "label": "erc20",
                "type": "t_contract(IERC20Upgradeable)3410"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3410": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC1155Reward)12396_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC1155Reward)"
          },
          "t_struct(ERC1155Reward)12396_storage": {
            "label": "struct MelandTierStorage.ERC1155Reward",
            "members": [
              {
                "label": "erc1155",
                "type": "t_contract(IERC1155Upgradeable)2509"
              },
              {
                "label": "tokenIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "amounts",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_contract(IERC1155Upgradeable)2509": {
            "label": "contract IERC1155Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(Reward)12386_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.Reward)"
          },
          "t_struct(Reward)12386_storage": {
            "label": "struct MelandTierStorage.Reward",
            "members": [
              {
                "label": "erc1155RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc721RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc20RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "9130a06ab72e4515b06fca828091d53adf6ddd1f89f11ac9d242621cbd719b87": {
      "address": "0x6Ff09bdFA4790f64b39188Abab45e374404fC9e5",
      "txHash": "0xe27b19266cf27db24ca57c698a60ac566880699aca9b7c44486dc7ca49dd3369",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12276",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13931",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3407",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155Land",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155Land.sol:26"
          },
          {
            "contract": "Meland1155Land",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155Land.sol:27"
          },
          {
            "contract": "Meland1155Land",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Land.sol:28"
          },
          {
            "contract": "Meland1155Land",
            "label": "ticketlandIds",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/Meland1155Land.sol:30"
          }
        ],
        "types": {
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)100_storage": {
            "label": "uint256[100]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)13931": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3407": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)12276": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "610f4f38037a751649d9e1e2a312b33e55b30800e9fb4f513a81736578eb427d": {
      "address": "0xa2198B8b596c3340853db1361DDB1d8028128F9c",
      "txHash": "0x045d593d473c350170d9e8eadca8b0cb065ba718b1aa5a2cd6e562a66e6af9d0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3930_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12276",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13931",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3407",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)13931": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3407": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12276": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3930_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "607734816eca3891a7b52004fa6082a63ab350b70f5d1e36a5005312ab595243": {
      "address": "0xB94c3ab5bf9a655C5d42F1f7D6bE122c3064399E",
      "txHash": "0xb76554e8f669edddeb05e55389b057b5d35c05bfaf8cd8868b31d2962216f2f2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_rewardIdCounter",
            "type": "t_struct(Counter)3930_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:14"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc1155RewardIdCounter",
            "type": "t_struct(Counter)3930_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:15"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc721RewardIdCounter",
            "type": "t_struct(Counter)3930_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:16"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc20RewardIdCounter",
            "type": "t_struct(Counter)3930_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:17"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc721RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC721Reward)12399_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:41"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc20RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Reward)12405_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:42"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc1155RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC1155Reward)12393_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:43"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardById",
            "type": "t_mapping(t_uint256,t_struct(Reward)12383_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:44"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:48"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:52"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:56"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:60"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardTransferedByRewardId",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../project:/contracts/MelandTierStorage.sol:63"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3930_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:40"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)3930_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_uint256,t_struct(ERC721Reward)12399_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC721Reward)"
          },
          "t_struct(ERC721Reward)12399_storage": {
            "label": "struct MelandTierStorage.ERC721Reward",
            "members": [
              {
                "label": "erc721",
                "type": "t_contract(IERC721Upgradeable)3635"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC721Upgradeable)3635": {
            "label": "contract IERC721Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Reward)12405_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC20Reward)"
          },
          "t_struct(ERC20Reward)12405_storage": {
            "label": "struct MelandTierStorage.ERC20Reward",
            "members": [
              {
                "label": "erc20",
                "type": "t_contract(IERC20Upgradeable)3407"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3407": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC1155Reward)12393_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC1155Reward)"
          },
          "t_struct(ERC1155Reward)12393_storage": {
            "label": "struct MelandTierStorage.ERC1155Reward",
            "members": [
              {
                "label": "erc1155",
                "type": "t_contract(IERC1155Upgradeable)2506"
              },
              {
                "label": "tokenIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "amounts",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_contract(IERC1155Upgradeable)2506": {
            "label": "contract IERC1155Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(Reward)12383_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.Reward)"
          },
          "t_struct(Reward)12383_storage": {
            "label": "struct MelandTierStorage.Reward",
            "members": [
              {
                "label": "erc1155RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc721RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc20RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "c8eede3cc407bf9570f24d211fb13cbcc3619a411a8e27270cf0079a2ced119c": {
      "address": "0xFF947834B36a5986f1763C58961E45CB028106d5",
      "txHash": "0xe56c4f30b969368e86526b1c1c5ede7e1b8a0612a74390f78a9cc01f4e929968",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12277",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13932",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3408",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155Land",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155Land.sol:26"
          },
          {
            "contract": "Meland1155Land",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155Land.sol:27"
          },
          {
            "contract": "Meland1155Land",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Land.sol:28"
          },
          {
            "contract": "Meland1155Land",
            "label": "ticketlandIds",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/Meland1155Land.sol:30"
          }
        ],
        "types": {
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)100_storage": {
            "label": "uint256[100]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)13932": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3408": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)12277": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "38fd346d2674aa09897491b58b07c81c89cbe702539caa560785cb06413996ce": {
      "address": "0x0f4AF4BC5C7D9660843B54136Bb964dd911CF7E4",
      "txHash": "0xa41f47854198f31a724f369a7520858a43eb1589873157e0dda3b8557f6eec01",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3931_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12277",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13932",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3408",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)13932": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3408": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12277": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3931_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "00ff085006ae2424fbfcd5c02a0381754ae3814931a31c6586a04bc4274e46c1": {
      "address": "0x5214657a52284A0A4b8e43b334A816b35874B662",
      "txHash": "0x0d75e6f79ddea444f69c1ab4e4905330180dcaf7cc16165e8c505a106193ea66",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_rewardIdCounter",
            "type": "t_struct(Counter)3931_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:14"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc1155RewardIdCounter",
            "type": "t_struct(Counter)3931_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:15"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc721RewardIdCounter",
            "type": "t_struct(Counter)3931_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:16"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc20RewardIdCounter",
            "type": "t_struct(Counter)3931_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:17"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc721RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC721Reward)12400_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:41"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc20RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Reward)12406_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:42"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc1155RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC1155Reward)12394_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:43"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardById",
            "type": "t_mapping(t_uint256,t_struct(Reward)12384_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:44"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:48"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:52"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:56"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:60"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardTransferedByRewardId",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../project:/contracts/MelandTierStorage.sol:63"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3931_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:40"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)3931_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_uint256,t_struct(ERC721Reward)12400_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC721Reward)"
          },
          "t_struct(ERC721Reward)12400_storage": {
            "label": "struct MelandTierStorage.ERC721Reward",
            "members": [
              {
                "label": "erc721",
                "type": "t_contract(IERC721Upgradeable)3636"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC721Upgradeable)3636": {
            "label": "contract IERC721Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Reward)12406_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC20Reward)"
          },
          "t_struct(ERC20Reward)12406_storage": {
            "label": "struct MelandTierStorage.ERC20Reward",
            "members": [
              {
                "label": "erc20",
                "type": "t_contract(IERC20Upgradeable)3408"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3408": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC1155Reward)12394_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC1155Reward)"
          },
          "t_struct(ERC1155Reward)12394_storage": {
            "label": "struct MelandTierStorage.ERC1155Reward",
            "members": [
              {
                "label": "erc1155",
                "type": "t_contract(IERC1155Upgradeable)2507"
              },
              {
                "label": "tokenIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "amounts",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_contract(IERC1155Upgradeable)2507": {
            "label": "contract IERC1155Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(Reward)12384_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.Reward)"
          },
          "t_struct(Reward)12384_storage": {
            "label": "struct MelandTierStorage.Reward",
            "members": [
              {
                "label": "erc1155RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc721RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc20RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "04139bf62ee0f6d4d832aa15f384fa06425902c5d34bb92e30ae9f41504daac8": {
      "address": "0x41628C7C9e17526c3C35189054c61ce034D306C5",
      "txHash": "0x0662e61852e2c2273afbcddacc09b0cb305c772c57019f2c2df84b7bde4af200",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12283",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13938",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3414",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155Land",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155Land.sol:26"
          },
          {
            "contract": "Meland1155Land",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155Land.sol:27"
          },
          {
            "contract": "Meland1155Land",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Land.sol:28"
          },
          {
            "contract": "Meland1155Land",
            "label": "ticketlandIds",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/Meland1155Land.sol:30"
          }
        ],
        "types": {
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)100_storage": {
            "label": "uint256[100]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)13938": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3414": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)12283": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "0230666e3ab490e726d7550c88a3c2c75ef639a28fe15378f712ae71b7cc52ac": {
      "address": "0x04Eb542D06d722Ee24938726f87f1eB1c2513Bbf",
      "txHash": "0x7a11ad4e9c870fc95849da11eb3ac7216709e934b99e59bdcedb91da45aa53d9",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3937_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12283",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13938",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3414",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)13938": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3414": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12283": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3937_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "7953db2fe69949603bbd9a70892852940bbe66217f28951a85b31525b50d0507": {
      "address": "0x6483b738E6260619F96FFCb967c8526789fD2523",
      "txHash": "0x3296f1987b01d6960888642c89b8b4ccba7ce9ab45168be4440b0b3278bf4b92",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_rewardIdCounter",
            "type": "t_struct(Counter)3937_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:14"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc1155RewardIdCounter",
            "type": "t_struct(Counter)3937_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:15"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc721RewardIdCounter",
            "type": "t_struct(Counter)3937_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:16"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc20RewardIdCounter",
            "type": "t_struct(Counter)3937_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:17"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc721RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC721Reward)12406_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:41"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc20RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Reward)12412_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:42"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc1155RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC1155Reward)12400_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:43"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardById",
            "type": "t_mapping(t_uint256,t_struct(Reward)12390_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:44"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:48"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:52"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:56"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:60"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardTransferedByRewardId",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../project:/contracts/MelandTierStorage.sol:63"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3937_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:40"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)3937_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_uint256,t_struct(ERC721Reward)12406_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC721Reward)"
          },
          "t_struct(ERC721Reward)12406_storage": {
            "label": "struct MelandTierStorage.ERC721Reward",
            "members": [
              {
                "label": "erc721",
                "type": "t_contract(IERC721Upgradeable)3642"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC721Upgradeable)3642": {
            "label": "contract IERC721Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Reward)12412_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC20Reward)"
          },
          "t_struct(ERC20Reward)12412_storage": {
            "label": "struct MelandTierStorage.ERC20Reward",
            "members": [
              {
                "label": "erc20",
                "type": "t_contract(IERC20Upgradeable)3414"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3414": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC1155Reward)12400_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC1155Reward)"
          },
          "t_struct(ERC1155Reward)12400_storage": {
            "label": "struct MelandTierStorage.ERC1155Reward",
            "members": [
              {
                "label": "erc1155",
                "type": "t_contract(IERC1155Upgradeable)2513"
              },
              {
                "label": "tokenIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "amounts",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_contract(IERC1155Upgradeable)2513": {
            "label": "contract IERC1155Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(Reward)12390_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.Reward)"
          },
          "t_struct(Reward)12390_storage": {
            "label": "struct MelandTierStorage.Reward",
            "members": [
              {
                "label": "erc1155RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc721RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc20RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "004db8bcea081df594d0d94c56e7e8b44067bb70fc6279436b1cfb14d0a7f51d": {
      "address": "0x4981A5a0BE7D4B0e006a3965174b3B384938EFBa",
      "txHash": "0xf16f71d0cb3925a3fe46f8bdc72097f2913c310c31041f49466289a6f4d20e89",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12277",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13932",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3408",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155Land",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155Land.sol:26"
          },
          {
            "contract": "Meland1155Land",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155Land.sol:27"
          },
          {
            "contract": "Meland1155Land",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Land.sol:28"
          },
          {
            "contract": "Meland1155Land",
            "label": "ticketlandIds",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/Meland1155Land.sol:30"
          }
        ],
        "types": {
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)100_storage": {
            "label": "uint256[100]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)13932": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3408": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)12277": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "cd765105a8e53ff5cbce684cc7a8db5f75bca789b18eeff872f447a3e39eff51": {
      "address": "0x70AEC73D0100f08046b66069Ea15e7fD8dB342b5",
      "txHash": "0x8566024c32b1c34a88d6787dc3302c7f12b81e41d1f576d59168e064a964ceff",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3931_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12277",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)13932",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3408",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)13932": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3408": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12277": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3931_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "96008fa4fd95587104e2fe2d23e0b9957249f6c601f0577a1997e13e137f2a17": {
      "address": "0x2ceB774Db6F84AD0d11853B622123918B898852D",
      "txHash": "0xf544e1567ef864f9baf5c1a6f0fff01f607739be7974cd8b82c63ea7aae19090",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_rewardIdCounter",
            "type": "t_struct(Counter)3931_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:14"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc1155RewardIdCounter",
            "type": "t_struct(Counter)3931_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:15"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc721RewardIdCounter",
            "type": "t_struct(Counter)3931_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:16"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc20RewardIdCounter",
            "type": "t_struct(Counter)3931_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:17"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc721RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC721Reward)12400_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:41"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc20RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Reward)12406_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:42"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc1155RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC1155Reward)12394_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:43"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardById",
            "type": "t_mapping(t_uint256,t_struct(Reward)12384_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:44"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:48"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:52"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:56"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:60"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardTransferedByRewardId",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../project:/contracts/MelandTierStorage.sol:63"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3931_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:40"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)3931_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_uint256,t_struct(ERC721Reward)12400_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC721Reward)"
          },
          "t_struct(ERC721Reward)12400_storage": {
            "label": "struct MelandTierStorage.ERC721Reward",
            "members": [
              {
                "label": "erc721",
                "type": "t_contract(IERC721Upgradeable)3636"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC721Upgradeable)3636": {
            "label": "contract IERC721Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Reward)12406_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC20Reward)"
          },
          "t_struct(ERC20Reward)12406_storage": {
            "label": "struct MelandTierStorage.ERC20Reward",
            "members": [
              {
                "label": "erc20",
                "type": "t_contract(IERC20Upgradeable)3408"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3408": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC1155Reward)12394_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC1155Reward)"
          },
          "t_struct(ERC1155Reward)12394_storage": {
            "label": "struct MelandTierStorage.ERC1155Reward",
            "members": [
              {
                "label": "erc1155",
                "type": "t_contract(IERC1155Upgradeable)2507"
              },
              {
                "label": "tokenIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "amounts",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_contract(IERC1155Upgradeable)2507": {
            "label": "contract IERC1155Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(Reward)12384_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.Reward)"
          },
          "t_struct(Reward)12384_storage": {
            "label": "struct MelandTierStorage.Reward",
            "members": [
              {
                "label": "erc1155RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc721RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc20RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "47ab6f1a030cdafb3ac20aeba0a9c57c44ed56c0b4188cb7361334bb6c6e93ec": {
      "address": "0x70056936b361dBB7dF8dC4e443B20D18eF445B73",
      "txHash": "0xaba2f1f92319ce2401084b9fcfcf52a5e6c2084aaa739930f44b4cd556458c01",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:493"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12373",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)14028",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3504",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155Land",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155Land.sol:26"
          },
          {
            "contract": "Meland1155Land",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155Land.sol:27"
          },
          {
            "contract": "Meland1155Land",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Land.sol:28"
          },
          {
            "contract": "Meland1155Land",
            "label": "ticketlandIds",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/Meland1155Land.sol:30"
          }
        ],
        "types": {
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)100_storage": {
            "label": "uint256[100]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)14028": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3504": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)12373": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "872eeea92a1ea411026deea19296060ba0b0b09ec8c749c611c88b0b49434bdd": {
      "address": "0x1eB846F5ABF7285288c363eF712F8db3AdD58a6b",
      "txHash": "0x96f943c08e2e2687bbbaa89bfd7abede7060d40eb98823c4ae4288c18f3ecaf7",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:493"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)4027_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12373",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)14028",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3504",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)14028": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3504": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12373": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)4027_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "8050e73b11fc54f108ba310acb47d6ca19b2271b8f7b78fd930743539563bffa": {
      "address": "0x219C58851c39cde1aF37b6D180c8F1fFac74a6E3",
      "txHash": "0xadac9418da056e47f7781466a8a6274fc75b3708fe69afc3e3566fc82c5e9af0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_rewardIdCounter",
            "type": "t_struct(Counter)4027_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:14"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc1155RewardIdCounter",
            "type": "t_struct(Counter)4027_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:15"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc721RewardIdCounter",
            "type": "t_struct(Counter)4027_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:16"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc20RewardIdCounter",
            "type": "t_struct(Counter)4027_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:17"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc721RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC721Reward)12496_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:41"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc20RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Reward)12502_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:42"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc1155RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC1155Reward)12490_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:43"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardById",
            "type": "t_mapping(t_uint256,t_struct(Reward)12480_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:44"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:48"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:52"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:56"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:60"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardTransferedByRewardId",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../project:/contracts/MelandTierStorage.sol:63"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:493"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)4027_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:40"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)4027_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_uint256,t_struct(ERC721Reward)12496_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC721Reward)"
          },
          "t_struct(ERC721Reward)12496_storage": {
            "label": "struct MelandTierStorage.ERC721Reward",
            "members": [
              {
                "label": "erc721",
                "type": "t_contract(IERC721Upgradeable)3732"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC721Upgradeable)3732": {
            "label": "contract IERC721Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Reward)12502_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC20Reward)"
          },
          "t_struct(ERC20Reward)12502_storage": {
            "label": "struct MelandTierStorage.ERC20Reward",
            "members": [
              {
                "label": "erc20",
                "type": "t_contract(IERC20Upgradeable)3504"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3504": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC1155Reward)12490_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC1155Reward)"
          },
          "t_struct(ERC1155Reward)12490_storage": {
            "label": "struct MelandTierStorage.ERC1155Reward",
            "members": [
              {
                "label": "erc1155",
                "type": "t_contract(IERC1155Upgradeable)2603"
              },
              {
                "label": "tokenIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "amounts",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_contract(IERC1155Upgradeable)2603": {
            "label": "contract IERC1155Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(Reward)12480_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.Reward)"
          },
          "t_struct(Reward)12480_storage": {
            "label": "struct MelandTierStorage.Reward",
            "members": [
              {
                "label": "erc1155RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc721RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc20RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "5d07358a5eeca93731021edd11266a413c8912b8dbe0fc19940f4b8acb8d33c7": {
      "address": "0x64fFDFf39222d6Da9B74057503aD85d287918E05",
      "txHash": "0x4bfd178fa2db911f4e2aa17f62f837423e6d2b742bd4002c36839d622d98768a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:493"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12377",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)14032",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3508",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155Land",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155Land.sol:26"
          },
          {
            "contract": "Meland1155Land",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155Land.sol:27"
          },
          {
            "contract": "Meland1155Land",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Land.sol:28"
          },
          {
            "contract": "Meland1155Land",
            "label": "ticketlandIds",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/Meland1155Land.sol:30"
          }
        ],
        "types": {
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)100_storage": {
            "label": "uint256[100]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)14032": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3508": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)12377": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "83302b30be0d1fdb9ed7f1e8fb2cf7c647a52d6971ddc2ff919b08ebfa63fda5": {
      "address": "0x84F639da36181297a69e14c209614b49d5FEfD7d",
      "txHash": "0xc9462d5d362006937cf3608c8ff9280e2df3c472e69be8ed94bfde4f18a8f978",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:493"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)4031_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12377",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)14032",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3508",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)14032": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3508": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12377": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)4031_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "bed56cecf1fa8e92ac117ecdc703ab78d2ffb5a140e322ff7c13490596d15b10": {
      "address": "0xcEcE931229085a325b4567B9E46477786B71D50e",
      "txHash": "0xe58a7e69445f96e04657da45128975a44f033fff875bb1b254ab7554b7709bb0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_rewardIdCounter",
            "type": "t_struct(Counter)4031_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:14"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc1155RewardIdCounter",
            "type": "t_struct(Counter)4031_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:15"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc721RewardIdCounter",
            "type": "t_struct(Counter)4031_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:16"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc20RewardIdCounter",
            "type": "t_struct(Counter)4031_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:17"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc721RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC721Reward)12500_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:41"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc20RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Reward)12506_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:42"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc1155RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC1155Reward)12494_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:43"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardById",
            "type": "t_mapping(t_uint256,t_struct(Reward)12484_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:44"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:48"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:52"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:56"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:60"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardTransferedByRewardId",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../project:/contracts/MelandTierStorage.sol:63"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:493"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)4031_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:40"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)4031_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_uint256,t_struct(ERC721Reward)12500_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC721Reward)"
          },
          "t_struct(ERC721Reward)12500_storage": {
            "label": "struct MelandTierStorage.ERC721Reward",
            "members": [
              {
                "label": "erc721",
                "type": "t_contract(IERC721Upgradeable)3736"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC721Upgradeable)3736": {
            "label": "contract IERC721Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Reward)12506_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC20Reward)"
          },
          "t_struct(ERC20Reward)12506_storage": {
            "label": "struct MelandTierStorage.ERC20Reward",
            "members": [
              {
                "label": "erc20",
                "type": "t_contract(IERC20Upgradeable)3508"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3508": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC1155Reward)12494_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC1155Reward)"
          },
          "t_struct(ERC1155Reward)12494_storage": {
            "label": "struct MelandTierStorage.ERC1155Reward",
            "members": [
              {
                "label": "erc1155",
                "type": "t_contract(IERC1155Upgradeable)2607"
              },
              {
                "label": "tokenIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "amounts",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_contract(IERC1155Upgradeable)2607": {
            "label": "contract IERC1155Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(Reward)12484_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.Reward)"
          },
          "t_struct(Reward)12484_storage": {
            "label": "struct MelandTierStorage.Reward",
            "members": [
              {
                "label": "erc1155RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc721RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc20RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "4fc1bd77f70c3ecb944019e4ae30bb7b95098e4410738b43a4620cca8c440cae": {
      "address": "0x87A788fB31BabDCab34C765d2290560D65bDC876",
      "txHash": "0x5aaf6396379178015664f88c2810c555141e047a1efa20519e7f92091074a6ae",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:509"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12526",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)14181",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3657",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155Land",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155Land.sol:26"
          },
          {
            "contract": "Meland1155Land",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155Land.sol:27"
          },
          {
            "contract": "Meland1155Land",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Land.sol:28"
          },
          {
            "contract": "Meland1155Land",
            "label": "ticketlandIds",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/Meland1155Land.sol:30"
          }
        ],
        "types": {
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)100_storage": {
            "label": "uint256[100]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)14181": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3657": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)12526": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "c90255b0da667ea6711ae3c1e09baaa4342dc47c4143600b9fc8434f0de159ff": {
      "address": "0x5f1E92E4692877891A087D9373C8309414A218D6",
      "txHash": "0xbfc6704b2e2e76dcd1cd491f24ddb3aae5c02fee8cf4c3c17c6959685bf53cb9",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:509"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)4180_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12526",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)14181",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3657",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)14181": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3657": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12526": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)4180_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "c91d1b1140f560bcc019a12a6859655a843c8f8ad223486eefe1ca9a0343b920": {
      "address": "0x349a14fEB5b5312EBEd03E6cc8b08CEB853528Eb",
      "txHash": "0x7577599536a3e0ba8f680ab9c4f2d9089087799bc2327a896ca37d90e1f040bd",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_rewardIdCounter",
            "type": "t_struct(Counter)4180_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:14"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc1155RewardIdCounter",
            "type": "t_struct(Counter)4180_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:15"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc721RewardIdCounter",
            "type": "t_struct(Counter)4180_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:16"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc20RewardIdCounter",
            "type": "t_struct(Counter)4180_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:17"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc721RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC721Reward)12649_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:41"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc20RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Reward)12655_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:42"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc1155RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC1155Reward)12643_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:43"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardById",
            "type": "t_mapping(t_uint256,t_struct(Reward)12633_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:44"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:48"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:52"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:56"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:60"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardTransferedByRewardId",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../project:/contracts/MelandTierStorage.sol:63"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:509"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)4180_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:40"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)4180_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_uint256,t_struct(ERC721Reward)12649_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC721Reward)"
          },
          "t_struct(ERC721Reward)12649_storage": {
            "label": "struct MelandTierStorage.ERC721Reward",
            "members": [
              {
                "label": "erc721",
                "type": "t_contract(IERC721Upgradeable)3885"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC721Upgradeable)3885": {
            "label": "contract IERC721Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Reward)12655_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC20Reward)"
          },
          "t_struct(ERC20Reward)12655_storage": {
            "label": "struct MelandTierStorage.ERC20Reward",
            "members": [
              {
                "label": "erc20",
                "type": "t_contract(IERC20Upgradeable)3657"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3657": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC1155Reward)12643_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC1155Reward)"
          },
          "t_struct(ERC1155Reward)12643_storage": {
            "label": "struct MelandTierStorage.ERC1155Reward",
            "members": [
              {
                "label": "erc1155",
                "type": "t_contract(IERC1155Upgradeable)2756"
              },
              {
                "label": "tokenIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "amounts",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_contract(IERC1155Upgradeable)2756": {
            "label": "contract IERC1155Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(Reward)12633_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.Reward)"
          },
          "t_struct(Reward)12633_storage": {
            "label": "struct MelandTierStorage.Reward",
            "members": [
              {
                "label": "erc1155RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc721RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc20RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "38174db680306830f92bcfcb367bf6ece1b954444d64b49fba61052896fdd57f": {
      "address": "0xED5781777Bec8B62eF2f507075428c425C8618Ef",
      "txHash": "0xc58682882b7671153244ce6ad09a6cc538bb38bcadc84474063ed97ddd58f84c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:509"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12529",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)14184",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3660",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155Land",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155Land.sol:26"
          },
          {
            "contract": "Meland1155Land",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155Land.sol:27"
          },
          {
            "contract": "Meland1155Land",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Land.sol:28"
          },
          {
            "contract": "Meland1155Land",
            "label": "ticketlandIds",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/Meland1155Land.sol:30"
          }
        ],
        "types": {
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)100_storage": {
            "label": "uint256[100]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)14184": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3660": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)12529": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "b974267d5ce84c036a845b99d4c75769aa256e0551d3dd7d8d54d91b7606ac13": {
      "address": "0xa1380F55Ae49E87EE73a0acc6539276e1Ff87f11",
      "txHash": "0xcbf7a2f2e470f5cd6f1a4cbb4ed885907b6ab8f057bfff5ba79d3dddfa4669bc",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:509"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)4183_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12529",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)14184",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3660",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)14184": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3660": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12529": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)4183_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "42f67d2bc6250ce5c33aeefb842a2673cbe3e2e42d2afe5bf249bab9a81a198f": {
      "address": "0xDA3a306F5cead2E32dc52B56209538BEE3d3F069",
      "txHash": "0x71bd45d55505f4ec9dc0dc32b507d0cff791d5ffe9b0abc8d10ddbc63ee7f9c7",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_rewardIdCounter",
            "type": "t_struct(Counter)4183_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:14"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc1155RewardIdCounter",
            "type": "t_struct(Counter)4183_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:15"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc721RewardIdCounter",
            "type": "t_struct(Counter)4183_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:16"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc20RewardIdCounter",
            "type": "t_struct(Counter)4183_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:17"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc721RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC721Reward)12652_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:41"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc20RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Reward)12658_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:42"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc1155RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC1155Reward)12646_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:43"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardById",
            "type": "t_mapping(t_uint256,t_struct(Reward)12636_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:44"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:48"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:52"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:56"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:60"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardTransferedByRewardId",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../project:/contracts/MelandTierStorage.sol:63"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:509"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)4183_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:40"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)4183_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_uint256,t_struct(ERC721Reward)12652_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC721Reward)"
          },
          "t_struct(ERC721Reward)12652_storage": {
            "label": "struct MelandTierStorage.ERC721Reward",
            "members": [
              {
                "label": "erc721",
                "type": "t_contract(IERC721Upgradeable)3888"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC721Upgradeable)3888": {
            "label": "contract IERC721Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Reward)12658_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC20Reward)"
          },
          "t_struct(ERC20Reward)12658_storage": {
            "label": "struct MelandTierStorage.ERC20Reward",
            "members": [
              {
                "label": "erc20",
                "type": "t_contract(IERC20Upgradeable)3660"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3660": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC1155Reward)12646_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC1155Reward)"
          },
          "t_struct(ERC1155Reward)12646_storage": {
            "label": "struct MelandTierStorage.ERC1155Reward",
            "members": [
              {
                "label": "erc1155",
                "type": "t_contract(IERC1155Upgradeable)2759"
              },
              {
                "label": "tokenIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "amounts",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_contract(IERC1155Upgradeable)2759": {
            "label": "contract IERC1155Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(Reward)12636_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.Reward)"
          },
          "t_struct(Reward)12636_storage": {
            "label": "struct MelandTierStorage.Reward",
            "members": [
              {
                "label": "erc1155RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc721RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc20RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "eef5d0815fe60161b13053e5b99f7b417c84aa29c088d75587fce77c2ef58495": {
      "address": "0xA8B1224F7c3eb101Fc9425B0e249A9B1A0Aa93d4",
      "txHash": "0x4d177f58d3a6b29e839d9ac4f39ede1c6a259258405b569c0f14c93e7190d116",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_rewardIdCounter",
            "type": "t_struct(Counter)4183_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:14"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc1155RewardIdCounter",
            "type": "t_struct(Counter)4183_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:15"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc721RewardIdCounter",
            "type": "t_struct(Counter)4183_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:16"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc20RewardIdCounter",
            "type": "t_struct(Counter)4183_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:17"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc721RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC721Reward)12652_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:41"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc20RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Reward)12658_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:42"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc1155RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC1155Reward)12646_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:43"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardById",
            "type": "t_mapping(t_uint256,t_struct(Reward)12636_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:44"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:48"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:52"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:56"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:60"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardTransferedByRewardId",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../project:/contracts/MelandTierStorage.sol:63"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:509"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)4183_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:40"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)4183_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_uint256,t_struct(ERC721Reward)12652_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC721Reward)"
          },
          "t_struct(ERC721Reward)12652_storage": {
            "label": "struct MelandTierStorage.ERC721Reward",
            "members": [
              {
                "label": "erc721",
                "type": "t_contract(IERC721Upgradeable)3888"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC721Upgradeable)3888": {
            "label": "contract IERC721Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Reward)12658_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC20Reward)"
          },
          "t_struct(ERC20Reward)12658_storage": {
            "label": "struct MelandTierStorage.ERC20Reward",
            "members": [
              {
                "label": "erc20",
                "type": "t_contract(IERC20Upgradeable)3660"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3660": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC1155Reward)12646_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC1155Reward)"
          },
          "t_struct(ERC1155Reward)12646_storage": {
            "label": "struct MelandTierStorage.ERC1155Reward",
            "members": [
              {
                "label": "erc1155",
                "type": "t_contract(IERC1155Upgradeable)2759"
              },
              {
                "label": "tokenIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "amounts",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_contract(IERC1155Upgradeable)2759": {
            "label": "contract IERC1155Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(Reward)12636_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.Reward)"
          },
          "t_struct(Reward)12636_storage": {
            "label": "struct MelandTierStorage.Reward",
            "members": [
              {
                "label": "erc1155RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc721RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc20RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "46898b6ddee57b8b93fee2d611bce0bdebbf22c769ef06b57d586dacfe3fbb67": {
      "address": "0x6F57fCe9D08Acc348919Fc6Bfab60357A6e0e199",
      "txHash": "0x1c7507d10db02a9afec0f64116063850f975b2fa198af01a1a62843f6ed9b03f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:509"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12536",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)14191",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3667",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155Land",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155Land.sol:26"
          },
          {
            "contract": "Meland1155Land",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155Land.sol:27"
          },
          {
            "contract": "Meland1155Land",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Land.sol:28"
          },
          {
            "contract": "Meland1155Land",
            "label": "ticketlandIds",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/Meland1155Land.sol:30"
          }
        ],
        "types": {
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)100_storage": {
            "label": "uint256[100]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)14191": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3667": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)12536": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "4e662557e4dc02d1d00665dd6ed29177e341a154d46cc0b147f38c21961583bc": {
      "address": "0xB4aC561B464c4c048050095Ac6B750F10f887E6B",
      "txHash": "0x3717ed3ace00e788c7e8d6653fe272036865de27f251e541a4918b934e2d101e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:509"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)4190_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12536",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)14191",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3667",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)14191": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3667": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12536": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)4190_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "e4959ce73219bde87d7371ae1c10a85f05c7af090d4b5874bf37523a81e308fa": {
      "address": "0x50979865f8214B7124997ff24c35aBAFF3ab040b",
      "txHash": "0xa17084b68391c384ec9ee79ecf9a64b66f443ed326d61089e37c777944d48631",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_rewardIdCounter",
            "type": "t_struct(Counter)4190_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:14"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc1155RewardIdCounter",
            "type": "t_struct(Counter)4190_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:15"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc721RewardIdCounter",
            "type": "t_struct(Counter)4190_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:16"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc20RewardIdCounter",
            "type": "t_struct(Counter)4190_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:17"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc721RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC721Reward)12659_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:41"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc20RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Reward)12665_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:42"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc1155RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC1155Reward)12653_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:43"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardById",
            "type": "t_mapping(t_uint256,t_struct(Reward)12643_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:44"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:48"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:52"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:56"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:60"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardTransferedByRewardId",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../project:/contracts/MelandTierStorage.sol:63"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:509"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)4190_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:40"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)4190_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_uint256,t_struct(ERC721Reward)12659_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC721Reward)"
          },
          "t_struct(ERC721Reward)12659_storage": {
            "label": "struct MelandTierStorage.ERC721Reward",
            "members": [
              {
                "label": "erc721",
                "type": "t_contract(IERC721Upgradeable)3895"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC721Upgradeable)3895": {
            "label": "contract IERC721Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Reward)12665_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC20Reward)"
          },
          "t_struct(ERC20Reward)12665_storage": {
            "label": "struct MelandTierStorage.ERC20Reward",
            "members": [
              {
                "label": "erc20",
                "type": "t_contract(IERC20Upgradeable)3667"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3667": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC1155Reward)12653_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC1155Reward)"
          },
          "t_struct(ERC1155Reward)12653_storage": {
            "label": "struct MelandTierStorage.ERC1155Reward",
            "members": [
              {
                "label": "erc1155",
                "type": "t_contract(IERC1155Upgradeable)2766"
              },
              {
                "label": "tokenIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "amounts",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_contract(IERC1155Upgradeable)2766": {
            "label": "contract IERC1155Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(Reward)12643_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.Reward)"
          },
          "t_struct(Reward)12643_storage": {
            "label": "struct MelandTierStorage.Reward",
            "members": [
              {
                "label": "erc1155RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc721RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc20RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "833be2ffd710857504b6b9423df266ff01b8b3faa06830c50cbb26f155830a5c": {
      "address": "0x24e3836FA0c1C333d8f7FbFEb544f1149244103b",
      "txHash": "0x31f2df8b2a6c9928065bc31aad895e185192f1d259a3a20bcb38d56db5c7cf0e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:509"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12536",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)14187",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3667",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155Land",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155Land.sol:26"
          },
          {
            "contract": "Meland1155Land",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155Land.sol:27"
          },
          {
            "contract": "Meland1155Land",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Land.sol:28"
          },
          {
            "contract": "Meland1155Land",
            "label": "ticketlandIds",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/Meland1155Land.sol:30"
          }
        ],
        "types": {
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)100_storage": {
            "label": "uint256[100]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)14187": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3667": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)12536": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "70b9c5fab7b9080800bf8eccd4e1c44fc1357721a6f54f1aa1a49b9401cd7648": {
      "address": "0x8eA75373e23b7bDC47778966e2Ddc3658207B3b0",
      "txHash": "0x406c9f0429eb3ccd32c6372b822045b48d26fe0b7da605dd65d69c8e27f42638",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:509"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)4190_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12536",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)14187",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3667",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)14187": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3667": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12536": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)4190_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "74267222e39e11ae290e701616971e48fab4cdf8a3606a3930956a93f05cf693": {
      "address": "0x64564c8b9b193090544796F32fD9A6c3E9Bc6A4c",
      "txHash": "0x50e701faa93ea6104e02588afb014854f55bdf72a6f0c24388abdcde9df55b0b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_rewardIdCounter",
            "type": "t_struct(Counter)4190_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:14"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc1155RewardIdCounter",
            "type": "t_struct(Counter)4190_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:15"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc721RewardIdCounter",
            "type": "t_struct(Counter)4190_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:16"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc20RewardIdCounter",
            "type": "t_struct(Counter)4190_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:17"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc721RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC721Reward)12657_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:41"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc20RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Reward)12663_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:42"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc1155RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC1155Reward)12651_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:43"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardById",
            "type": "t_mapping(t_uint256,t_struct(Reward)12641_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:44"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:48"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:52"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:56"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:60"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardTransferedByRewardId",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../project:/contracts/MelandTierStorage.sol:63"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:509"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)4190_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:40"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)4190_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_uint256,t_struct(ERC721Reward)12657_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC721Reward)"
          },
          "t_struct(ERC721Reward)12657_storage": {
            "label": "struct MelandTierStorage.ERC721Reward",
            "members": [
              {
                "label": "erc721",
                "type": "t_contract(IERC721Upgradeable)3895"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC721Upgradeable)3895": {
            "label": "contract IERC721Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Reward)12663_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC20Reward)"
          },
          "t_struct(ERC20Reward)12663_storage": {
            "label": "struct MelandTierStorage.ERC20Reward",
            "members": [
              {
                "label": "erc20",
                "type": "t_contract(IERC20Upgradeable)3667"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3667": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC1155Reward)12651_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC1155Reward)"
          },
          "t_struct(ERC1155Reward)12651_storage": {
            "label": "struct MelandTierStorage.ERC1155Reward",
            "members": [
              {
                "label": "erc1155",
                "type": "t_contract(IERC1155Upgradeable)2766"
              },
              {
                "label": "tokenIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "amounts",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_contract(IERC1155Upgradeable)2766": {
            "label": "contract IERC1155Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(Reward)12641_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.Reward)"
          },
          "t_struct(Reward)12641_storage": {
            "label": "struct MelandTierStorage.Reward",
            "members": [
              {
                "label": "erc1155RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc721RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc20RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "185e665b5f96824fca6a950834c934c40aaf7a36a71ff590921f93856685aa32": {
      "address": "0xc49E606070862C17A0e8114293F3B2e300E33875",
      "txHash": "0xf9d280e18bd862e0a2779dbc4779760e6b32c7f1244a77646265c244ce4886cd",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:509"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)4190_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12534",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)14201",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3667",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)14201": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3667": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12534": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)4190_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "f2d274979d89da0103b0fc4d85a78eae9e9eebb8b32b9d8b48fcbaf92a23ceae": {
      "address": "0xC90e0Aa6F5c65388F594945A8188A31CCb771d68",
      "txHash": "0x2946be95e342c97b4b0e916e3a2aa1adfdd5011da209c57f6f03091753f06159",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_rewardIdCounter",
            "type": "t_struct(Counter)4190_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:14"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc1155RewardIdCounter",
            "type": "t_struct(Counter)4190_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:15"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc721RewardIdCounter",
            "type": "t_struct(Counter)4190_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:16"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc20RewardIdCounter",
            "type": "t_struct(Counter)4190_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:17"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc721RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC721Reward)12655_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:41"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc20RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Reward)12661_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:42"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc1155RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC1155Reward)12649_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:43"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardById",
            "type": "t_mapping(t_uint256,t_struct(Reward)12639_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:44"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:48"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:52"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:56"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:60"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardTransferedByRewardId",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../project:/contracts/MelandTierStorage.sol:63"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:509"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)4190_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:40"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)4190_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_uint256,t_struct(ERC721Reward)12655_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC721Reward)"
          },
          "t_struct(ERC721Reward)12655_storage": {
            "label": "struct MelandTierStorage.ERC721Reward",
            "members": [
              {
                "label": "erc721",
                "type": "t_contract(IERC721Upgradeable)3895"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC721Upgradeable)3895": {
            "label": "contract IERC721Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Reward)12661_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC20Reward)"
          },
          "t_struct(ERC20Reward)12661_storage": {
            "label": "struct MelandTierStorage.ERC20Reward",
            "members": [
              {
                "label": "erc20",
                "type": "t_contract(IERC20Upgradeable)3667"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3667": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC1155Reward)12649_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC1155Reward)"
          },
          "t_struct(ERC1155Reward)12649_storage": {
            "label": "struct MelandTierStorage.ERC1155Reward",
            "members": [
              {
                "label": "erc1155",
                "type": "t_contract(IERC1155Upgradeable)2766"
              },
              {
                "label": "tokenIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "amounts",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_contract(IERC1155Upgradeable)2766": {
            "label": "contract IERC1155Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(Reward)12639_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.Reward)"
          },
          "t_struct(Reward)12639_storage": {
            "label": "struct MelandTierStorage.Reward",
            "members": [
              {
                "label": "erc1155RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc721RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc20RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "7934d7598d9bb0470da35c35b42899d1365a681fc693955d697fd0608eb09f9a": {
      "address": "0xc97Dd7AA20cA1893c49eC87E0af40684cc01E7b2",
      "txHash": "0x483e474d0f6d2ce804b35d68856d14ff03a270f046e3601e370a194c3320e25c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_rewardIdCounter",
            "type": "t_struct(Counter)4190_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:14"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc1155RewardIdCounter",
            "type": "t_struct(Counter)4190_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:15"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc721RewardIdCounter",
            "type": "t_struct(Counter)4190_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:16"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc20RewardIdCounter",
            "type": "t_struct(Counter)4190_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:17"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc721RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC721Reward)12655_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:41"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc20RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Reward)12661_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:42"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc1155RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC1155Reward)12649_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:43"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardById",
            "type": "t_mapping(t_uint256,t_struct(Reward)12639_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:44"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:48"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:52"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:56"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:60"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardTransferedByRewardId",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../project:/contracts/MelandTierStorage.sol:63"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:509"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)4190_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:40"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)4190_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_uint256,t_struct(ERC721Reward)12655_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC721Reward)"
          },
          "t_struct(ERC721Reward)12655_storage": {
            "label": "struct MelandTierStorage.ERC721Reward",
            "members": [
              {
                "label": "erc721",
                "type": "t_contract(IERC721Upgradeable)3895"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC721Upgradeable)3895": {
            "label": "contract IERC721Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Reward)12661_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC20Reward)"
          },
          "t_struct(ERC20Reward)12661_storage": {
            "label": "struct MelandTierStorage.ERC20Reward",
            "members": [
              {
                "label": "erc20",
                "type": "t_contract(IERC20Upgradeable)3667"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3667": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC1155Reward)12649_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC1155Reward)"
          },
          "t_struct(ERC1155Reward)12649_storage": {
            "label": "struct MelandTierStorage.ERC1155Reward",
            "members": [
              {
                "label": "erc1155",
                "type": "t_contract(IERC1155Upgradeable)2766"
              },
              {
                "label": "tokenIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "amounts",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_contract(IERC1155Upgradeable)2766": {
            "label": "contract IERC1155Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(Reward)12639_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.Reward)"
          },
          "t_struct(Reward)12639_storage": {
            "label": "struct MelandTierStorage.Reward",
            "members": [
              {
                "label": "erc1155RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc721RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc20RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "5dab9d779cfd9272e6f355c8d6ceb690bf77efaf342fd36394f5c12c1a6a2565": {
      "address": "0xC749f78b9020557E9152cFaD9D5E0E7E8eC29353",
      "txHash": "0xff104478bb14d326a1e473359549f3841b2c3a924dea0d7f1662286581a622b8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_rewardIdCounter",
            "type": "t_struct(Counter)4190_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:14"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc1155RewardIdCounter",
            "type": "t_struct(Counter)4190_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:15"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc721RewardIdCounter",
            "type": "t_struct(Counter)4190_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:16"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc20RewardIdCounter",
            "type": "t_struct(Counter)4190_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:17"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc721RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC721Reward)12655_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:41"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc20RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Reward)12661_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:42"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc1155RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC1155Reward)12649_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:43"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardById",
            "type": "t_mapping(t_uint256,t_struct(Reward)12639_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:44"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:48"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:52"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:56"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:60"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardTransferedByRewardId",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../project:/contracts/MelandTierStorage.sol:63"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:509"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)4190_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:40"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)4190_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_uint256,t_struct(ERC721Reward)12655_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC721Reward)"
          },
          "t_struct(ERC721Reward)12655_storage": {
            "label": "struct MelandTierStorage.ERC721Reward",
            "members": [
              {
                "label": "erc721",
                "type": "t_contract(IERC721Upgradeable)3895"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC721Upgradeable)3895": {
            "label": "contract IERC721Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Reward)12661_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC20Reward)"
          },
          "t_struct(ERC20Reward)12661_storage": {
            "label": "struct MelandTierStorage.ERC20Reward",
            "members": [
              {
                "label": "erc20",
                "type": "t_contract(IERC20Upgradeable)3667"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3667": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC1155Reward)12649_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC1155Reward)"
          },
          "t_struct(ERC1155Reward)12649_storage": {
            "label": "struct MelandTierStorage.ERC1155Reward",
            "members": [
              {
                "label": "erc1155",
                "type": "t_contract(IERC1155Upgradeable)2766"
              },
              {
                "label": "tokenIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "amounts",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_contract(IERC1155Upgradeable)2766": {
            "label": "contract IERC1155Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(Reward)12639_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.Reward)"
          },
          "t_struct(Reward)12639_storage": {
            "label": "struct MelandTierStorage.Reward",
            "members": [
              {
                "label": "erc1155RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc721RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc20RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "9a08cf2da54cc245748bda89552d6ade9f57959006c9eb715902abf75cd07f55": {
      "address": "0xc4e1A4937547ee36F66e032F2807eed629B28C03",
      "txHash": "0x5c12283c9e88e910614d773e904e11167639341ca3bf127091721a4cb728ec55",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12515",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)14174",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155Land",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155Land.sol:26"
          },
          {
            "contract": "Meland1155Land",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155Land.sol:27"
          },
          {
            "contract": "Meland1155Land",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Land.sol:28"
          },
          {
            "contract": "Meland1155Land",
            "label": "ticketlandIds",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/Meland1155Land.sol:30"
          }
        ],
        "types": {
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)100_storage": {
            "label": "uint256[100]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)14174": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)12515": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "fdbaa69fa240a9c340fa467e675c1d3d0db70c8fdab038d03b4948cf41ec5bc1": {
      "address": "0xcaaB92D6b91C05157887CB74f757Be3514e2d493",
      "txHash": "0x8c88ad7aeaf4cb080fc19dd2940c1bb5fc07ee2d2e61104bd534a3f637b88023",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12515",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)14174",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)14174": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12515": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "afe30bf9eb75d1b8a38b416c6d09d9816ea8a82d0a18111e5cc556c4266b8fc8": {
      "address": "0x09c82Ec5991cF8B2de6D604b0C3f1f8196343DaE",
      "txHash": "0xa3587dd05e7cf30d15c8e6d1469ddcb6f0161187bba36ad9e7a65eef2b86d1d9",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_rewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:14"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc1155RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:15"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc721RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:16"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc20RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:17"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc721RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC721Reward)12636_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:41"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc20RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Reward)12642_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:42"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc1155RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC1155Reward)12630_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:43"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardById",
            "type": "t_mapping(t_uint256,t_struct(Reward)12620_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:44"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:48"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:52"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:56"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:60"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardTransferedByRewardId",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../project:/contracts/MelandTierStorage.sol:63"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:40"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_uint256,t_struct(ERC721Reward)12636_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC721Reward)"
          },
          "t_struct(ERC721Reward)12636_storage": {
            "label": "struct MelandTierStorage.ERC721Reward",
            "members": [
              {
                "label": "erc721",
                "type": "t_contract(IERC721Upgradeable)3628"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC721Upgradeable)3628": {
            "label": "contract IERC721Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Reward)12642_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC20Reward)"
          },
          "t_struct(ERC20Reward)12642_storage": {
            "label": "struct MelandTierStorage.ERC20Reward",
            "members": [
              {
                "label": "erc20",
                "type": "t_contract(IERC20Upgradeable)3400"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC1155Reward)12630_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC1155Reward)"
          },
          "t_struct(ERC1155Reward)12630_storage": {
            "label": "struct MelandTierStorage.ERC1155Reward",
            "members": [
              {
                "label": "erc1155",
                "type": "t_contract(IERC1155Upgradeable)2499"
              },
              {
                "label": "tokenIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "amounts",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_contract(IERC1155Upgradeable)2499": {
            "label": "contract IERC1155Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(Reward)12620_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.Reward)"
          },
          "t_struct(Reward)12620_storage": {
            "label": "struct MelandTierStorage.Reward",
            "members": [
              {
                "label": "erc1155RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc721RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc20RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "1cbf2d9ca5508d7f4a34ac35b7599ea5305261525b9d10d715cc1b31a08fe533": {
      "address": "0xab56643A734C2e604Cf3E1A5e3C0e6782E553166",
      "txHash": "0xaf8e07183482452f2482595e7add2555800a1fb17482a1c428fd0b7f08c50c74",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "foundationWallet",
            "type": "t_address",
            "src": "../project:/contracts/NFTStoreStorage.sol:9"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "officialWallet",
            "type": "t_address",
            "src": "../project:/contracts/NFTStoreStorage.sol:12"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "bidbackWallet",
            "type": "t_address",
            "src": "../project:/contracts/NFTStoreStorage.sol:17"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "ownerCutPerMillion",
            "type": "t_uint256",
            "src": "../project:/contracts/NFTStoreStorage.sol:19"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "itemUploadedMap",
            "type": "t_mapping(t_contract(IMelandStoreItems)6537,t_bool)",
            "src": "../project:/contracts/NFTStoreStorage.sol:21"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "itemSymbolSales",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/NFTStoreStorage.sol:23"
          },
          {
            "contract": "NFTStore",
            "label": "itemIdCounters",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/NFTStore.sol:23"
          }
        ],
        "types": {
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_contract(IMelandStoreItems)6537,t_bool)": {
            "label": "mapping(contract IMelandStoreItems => bool)"
          },
          "t_contract(IMelandStoreItems)6537": {
            "label": "contract IMelandStoreItems"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "4de1fa228619b44d074fa4cfafb113c5dbf636bcab80e341ad594ceaec94a69e": {
      "address": "0xbD0492B47e63Ae015B12557C253A89C982465C93",
      "txHash": "0x23f5d9124bff5c2c80546c2ff075be8d536bb3336007a754bb8d3c514758ce86",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_rewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:14"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc1155RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:15"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc721RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:16"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc20RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:17"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc721RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC721Reward)12636_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:41"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc20RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Reward)12642_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:42"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc1155RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC1155Reward)12630_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:43"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardById",
            "type": "t_mapping(t_uint256,t_struct(Reward)12620_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:44"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:48"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:52"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:56"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:60"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardTransferedByRewardId",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../project:/contracts/MelandTierStorage.sol:63"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:40"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_uint256,t_struct(ERC721Reward)12636_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC721Reward)"
          },
          "t_struct(ERC721Reward)12636_storage": {
            "label": "struct MelandTierStorage.ERC721Reward",
            "members": [
              {
                "label": "erc721",
                "type": "t_contract(IERC721Upgradeable)3628"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC721Upgradeable)3628": {
            "label": "contract IERC721Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Reward)12642_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC20Reward)"
          },
          "t_struct(ERC20Reward)12642_storage": {
            "label": "struct MelandTierStorage.ERC20Reward",
            "members": [
              {
                "label": "erc20",
                "type": "t_contract(IERC20Upgradeable)3400"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC1155Reward)12630_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC1155Reward)"
          },
          "t_struct(ERC1155Reward)12630_storage": {
            "label": "struct MelandTierStorage.ERC1155Reward",
            "members": [
              {
                "label": "erc1155",
                "type": "t_contract(IERC1155Upgradeable)2499"
              },
              {
                "label": "tokenIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "amounts",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_contract(IERC1155Upgradeable)2499": {
            "label": "contract IERC1155Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(Reward)12620_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.Reward)"
          },
          "t_struct(Reward)12620_storage": {
            "label": "struct MelandTierStorage.Reward",
            "members": [
              {
                "label": "erc1155RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc721RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc20RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "5d709ebd998e433a83437aa70b0eec547e1c0bc05f68c6709c00ae031c842004": {
      "address": "0x43Ae842D2478e802EAE4C21D996eaaa3093E7C62",
      "txHash": "0xa74d8b1782ece14a6203205491ed701e712ce9a3189aaeedf1d1614da64b3682",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_rewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:14"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc1155RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:15"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc721RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:16"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc20RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:17"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc721RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC721Reward)12636_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:41"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc20RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Reward)12642_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:42"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc1155RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC1155Reward)12630_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:43"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardById",
            "type": "t_mapping(t_uint256,t_struct(Reward)12620_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:44"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:48"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:52"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:56"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:60"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardTransferedByRewardId",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../project:/contracts/MelandTierStorage.sol:63"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:40"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_uint256,t_struct(ERC721Reward)12636_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC721Reward)"
          },
          "t_struct(ERC721Reward)12636_storage": {
            "label": "struct MelandTierStorage.ERC721Reward",
            "members": [
              {
                "label": "erc721",
                "type": "t_contract(IERC721Upgradeable)3628"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC721Upgradeable)3628": {
            "label": "contract IERC721Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Reward)12642_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC20Reward)"
          },
          "t_struct(ERC20Reward)12642_storage": {
            "label": "struct MelandTierStorage.ERC20Reward",
            "members": [
              {
                "label": "erc20",
                "type": "t_contract(IERC20Upgradeable)3400"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC1155Reward)12630_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC1155Reward)"
          },
          "t_struct(ERC1155Reward)12630_storage": {
            "label": "struct MelandTierStorage.ERC1155Reward",
            "members": [
              {
                "label": "erc1155",
                "type": "t_contract(IERC1155Upgradeable)2499"
              },
              {
                "label": "tokenIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "amounts",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_contract(IERC1155Upgradeable)2499": {
            "label": "contract IERC1155Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(Reward)12620_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.Reward)"
          },
          "t_struct(Reward)12620_storage": {
            "label": "struct MelandTierStorage.Reward",
            "members": [
              {
                "label": "erc1155RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc721RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc20RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "3b8069c6f5324d90f766616c13a6a78f59af0c3f9409ec6954f7262b31381e5a": {
      "address": "0x2Dc8495de951e252538492639c2943Ee35bD351f",
      "txHash": "0xc6a2ffd08580a3e9ffea2effaccf8a7ec72af8fdd4a1c191a6c7a9316115681d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_rewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:14"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc1155RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:15"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc721RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:16"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc20RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:17"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc721RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC721Reward)12630_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:41"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc20RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Reward)12636_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:42"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc1155RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC1155Reward)12624_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:43"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardById",
            "type": "t_mapping(t_uint256,t_struct(Reward)12614_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:44"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:48"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:52"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:56"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:60"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardTransferedByRewardId",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../project:/contracts/MelandTierStorage.sol:63"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:40"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_uint256,t_struct(ERC721Reward)12630_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC721Reward)"
          },
          "t_struct(ERC721Reward)12630_storage": {
            "label": "struct MelandTierStorage.ERC721Reward",
            "members": [
              {
                "label": "erc721",
                "type": "t_contract(IERC721Upgradeable)3628"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC721Upgradeable)3628": {
            "label": "contract IERC721Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Reward)12636_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC20Reward)"
          },
          "t_struct(ERC20Reward)12636_storage": {
            "label": "struct MelandTierStorage.ERC20Reward",
            "members": [
              {
                "label": "erc20",
                "type": "t_contract(IERC20Upgradeable)3400"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC1155Reward)12624_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC1155Reward)"
          },
          "t_struct(ERC1155Reward)12624_storage": {
            "label": "struct MelandTierStorage.ERC1155Reward",
            "members": [
              {
                "label": "erc1155",
                "type": "t_contract(IERC1155Upgradeable)2499"
              },
              {
                "label": "tokenIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "amounts",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_contract(IERC1155Upgradeable)2499": {
            "label": "contract IERC1155Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(Reward)12614_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.Reward)"
          },
          "t_struct(Reward)12614_storage": {
            "label": "struct MelandTierStorage.Reward",
            "members": [
              {
                "label": "erc1155RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc721RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc20RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "fe5871aded817fddd230b8a6425b32da5c428e7baadedc503c46f88ea609ccd0": {
      "address": "0xd1CF87276CBED44aE7490ca760Eb59578eC8B65b",
      "txHash": "0x05cb0b492c3bf33348ef6fd4a77fd17dfe5d188840ff6b129d0017ac7d4e59e1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_rewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:14"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc1155RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:15"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc721RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:16"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc20RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:17"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc721RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC721Reward)12636_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:41"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc20RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Reward)12642_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:42"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc1155RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC1155Reward)12630_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:43"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardById",
            "type": "t_mapping(t_uint256,t_struct(Reward)12620_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:44"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:48"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:52"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:56"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:60"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardTransferedByRewardId",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../project:/contracts/MelandTierStorage.sol:63"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:40"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_uint256,t_struct(ERC721Reward)12636_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC721Reward)"
          },
          "t_struct(ERC721Reward)12636_storage": {
            "label": "struct MelandTierStorage.ERC721Reward",
            "members": [
              {
                "label": "erc721",
                "type": "t_contract(IERC721Upgradeable)3628"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC721Upgradeable)3628": {
            "label": "contract IERC721Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Reward)12642_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC20Reward)"
          },
          "t_struct(ERC20Reward)12642_storage": {
            "label": "struct MelandTierStorage.ERC20Reward",
            "members": [
              {
                "label": "erc20",
                "type": "t_contract(IERC20Upgradeable)3400"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC1155Reward)12630_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC1155Reward)"
          },
          "t_struct(ERC1155Reward)12630_storage": {
            "label": "struct MelandTierStorage.ERC1155Reward",
            "members": [
              {
                "label": "erc1155",
                "type": "t_contract(IERC1155Upgradeable)2499"
              },
              {
                "label": "tokenIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "amounts",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_contract(IERC1155Upgradeable)2499": {
            "label": "contract IERC1155Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(Reward)12620_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.Reward)"
          },
          "t_struct(Reward)12620_storage": {
            "label": "struct MelandTierStorage.Reward",
            "members": [
              {
                "label": "erc1155RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc721RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc20RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "fe3ce0af548719593629a3945922703d6017eb2b01fbdda75836a135b5dfccec": {
      "address": "0xb8DfA3F05499a7f72970aF5A391A17853B68d620",
      "txHash": "0x17a46d0fc86645eb9d17916843d9b190ea05653057850e5a7826d3c615ac3906",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12516",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)14047",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)14047": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12516": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "89c07985624adfa6810347f9bbefe35e9cf692c6afb06fefa54de6b220a34ae2": {
      "address": "0xf8b770262A63aE4842D4a294121E96dCed4a7EEC",
      "txHash": "0x626fdef2f92cdc5986983669ee2c28e8778896ae78cd58e8edd6aaba3fda895f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_rewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:14"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc1155RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:15"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc721RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:16"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc20RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:17"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc721RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC721Reward)12637_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:41"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc20RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Reward)12643_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:42"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc1155RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC1155Reward)12631_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:43"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardById",
            "type": "t_mapping(t_uint256,t_struct(Reward)12621_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:44"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:48"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:52"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:56"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:60"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardTransferedByRewardId",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../project:/contracts/MelandTierStorage.sol:63"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:40"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_uint256,t_struct(ERC721Reward)12637_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC721Reward)"
          },
          "t_struct(ERC721Reward)12637_storage": {
            "label": "struct MelandTierStorage.ERC721Reward",
            "members": [
              {
                "label": "erc721",
                "type": "t_contract(IERC721Upgradeable)3628"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC721Upgradeable)3628": {
            "label": "contract IERC721Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Reward)12643_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC20Reward)"
          },
          "t_struct(ERC20Reward)12643_storage": {
            "label": "struct MelandTierStorage.ERC20Reward",
            "members": [
              {
                "label": "erc20",
                "type": "t_contract(IERC20Upgradeable)3400"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC1155Reward)12631_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC1155Reward)"
          },
          "t_struct(ERC1155Reward)12631_storage": {
            "label": "struct MelandTierStorage.ERC1155Reward",
            "members": [
              {
                "label": "erc1155",
                "type": "t_contract(IERC1155Upgradeable)2499"
              },
              {
                "label": "tokenIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "amounts",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_contract(IERC1155Upgradeable)2499": {
            "label": "contract IERC1155Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(Reward)12621_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.Reward)"
          },
          "t_struct(Reward)12621_storage": {
            "label": "struct MelandTierStorage.Reward",
            "members": [
              {
                "label": "erc1155RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc721RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc20RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "883c83f837dfe1da9bc34e74712f9af54ceba7fa0355169c6e23ef40961a6967": {
      "address": "0xF31eE8B9E63eB5C4Dda1f490ddd0e3feaF4660dE",
      "txHash": "0x418468743956eca47d2a60f71ab0bb2f7c656d4cfe0707c098b816e34c14b1f1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_rewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:14"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc1155RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:15"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc721RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:16"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc20RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:17"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc721RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC721Reward)12637_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:41"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc20RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Reward)12643_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:42"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc1155RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC1155Reward)12631_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:43"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardById",
            "type": "t_mapping(t_uint256,t_struct(Reward)12621_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:44"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:48"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:52"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:56"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:60"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardTransferedByRewardId",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../project:/contracts/MelandTierStorage.sol:63"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:40"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_uint256,t_struct(ERC721Reward)12637_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC721Reward)"
          },
          "t_struct(ERC721Reward)12637_storage": {
            "label": "struct MelandTierStorage.ERC721Reward",
            "members": [
              {
                "label": "erc721",
                "type": "t_contract(IERC721Upgradeable)3628"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC721Upgradeable)3628": {
            "label": "contract IERC721Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Reward)12643_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC20Reward)"
          },
          "t_struct(ERC20Reward)12643_storage": {
            "label": "struct MelandTierStorage.ERC20Reward",
            "members": [
              {
                "label": "erc20",
                "type": "t_contract(IERC20Upgradeable)3400"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC1155Reward)12631_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC1155Reward)"
          },
          "t_struct(ERC1155Reward)12631_storage": {
            "label": "struct MelandTierStorage.ERC1155Reward",
            "members": [
              {
                "label": "erc1155",
                "type": "t_contract(IERC1155Upgradeable)2499"
              },
              {
                "label": "tokenIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "amounts",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_contract(IERC1155Upgradeable)2499": {
            "label": "contract IERC1155Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(Reward)12621_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.Reward)"
          },
          "t_struct(Reward)12621_storage": {
            "label": "struct MelandTierStorage.Reward",
            "members": [
              {
                "label": "erc1155RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc721RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc20RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "e2c060b7932e92959e246a968022fcf3f3b3776d6f6508a6ca788b2b579efbfe": {
      "address": "0xfbaeceEb2a7cCc54BC7385dE022D403C32Ba7EFd",
      "txHash": "0x136fb2bb6c15343b6e6432a3304ed13ac7211d8e3de07183d49355d4ef002bad",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_rewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:14"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc1155RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:15"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc721RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:16"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc20RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:17"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc721RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC721Reward)12637_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:41"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc20RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Reward)12643_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:42"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc1155RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC1155Reward)12631_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:43"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardById",
            "type": "t_mapping(t_uint256,t_struct(Reward)12621_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:44"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:48"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:52"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:56"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:60"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardTransferedByRewardId",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../project:/contracts/MelandTierStorage.sol:63"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:40"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_uint256,t_struct(ERC721Reward)12637_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC721Reward)"
          },
          "t_struct(ERC721Reward)12637_storage": {
            "label": "struct MelandTierStorage.ERC721Reward",
            "members": [
              {
                "label": "erc721",
                "type": "t_contract(IERC721Upgradeable)3628"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC721Upgradeable)3628": {
            "label": "contract IERC721Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Reward)12643_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC20Reward)"
          },
          "t_struct(ERC20Reward)12643_storage": {
            "label": "struct MelandTierStorage.ERC20Reward",
            "members": [
              {
                "label": "erc20",
                "type": "t_contract(IERC20Upgradeable)3400"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC1155Reward)12631_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC1155Reward)"
          },
          "t_struct(ERC1155Reward)12631_storage": {
            "label": "struct MelandTierStorage.ERC1155Reward",
            "members": [
              {
                "label": "erc1155",
                "type": "t_contract(IERC1155Upgradeable)2499"
              },
              {
                "label": "tokenIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "amounts",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_contract(IERC1155Upgradeable)2499": {
            "label": "contract IERC1155Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(Reward)12621_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.Reward)"
          },
          "t_struct(Reward)12621_storage": {
            "label": "struct MelandTierStorage.Reward",
            "members": [
              {
                "label": "erc1155RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc721RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc20RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "52990ac9864baabf11f3da4323597c7c9973827df27a3c497d17731291d8be36": {
      "address": "0xDFE9586b9f62C25206ef12dbc330462Fb9f29A5d",
      "txHash": "0x827227b118289c553f491e4b5e6a44d2defaa55cf53b8f18933fd85070e71abc",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_rewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:14"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc1155RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:15"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc721RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:16"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc20RewardIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:17"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc721RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC721Reward)12637_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:41"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc20RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Reward)12643_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:42"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc1155RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC1155Reward)12631_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:43"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardById",
            "type": "t_mapping(t_uint256,t_struct(Reward)12621_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:44"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:48"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:52"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:56"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:60"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardTransferedByRewardId",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../project:/contracts/MelandTierStorage.sol:63"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:40"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_uint256,t_struct(ERC721Reward)12637_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC721Reward)"
          },
          "t_struct(ERC721Reward)12637_storage": {
            "label": "struct MelandTierStorage.ERC721Reward",
            "members": [
              {
                "label": "erc721",
                "type": "t_contract(IERC721Upgradeable)3628"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC721Upgradeable)3628": {
            "label": "contract IERC721Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Reward)12643_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC20Reward)"
          },
          "t_struct(ERC20Reward)12643_storage": {
            "label": "struct MelandTierStorage.ERC20Reward",
            "members": [
              {
                "label": "erc20",
                "type": "t_contract(IERC20Upgradeable)3400"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC1155Reward)12631_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC1155Reward)"
          },
          "t_struct(ERC1155Reward)12631_storage": {
            "label": "struct MelandTierStorage.ERC1155Reward",
            "members": [
              {
                "label": "erc1155",
                "type": "t_contract(IERC1155Upgradeable)2499"
              },
              {
                "label": "tokenIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "amounts",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_contract(IERC1155Upgradeable)2499": {
            "label": "contract IERC1155Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(Reward)12621_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.Reward)"
          },
          "t_struct(Reward)12621_storage": {
            "label": "struct MelandTierStorage.Reward",
            "members": [
              {
                "label": "erc1155RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc721RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc20RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "ede96916c0e5436238c00fbacf18db999ced58c13cc77f5e462e1a18c6846c35": {
      "address": "0x7Ce979973EF6d1eE454c2995B75248371950F9b3",
      "txHash": "0x904026a63e8fd6e3fa46c9669beb0e61025af991e3e073d4e7e227a3637ce204",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12452",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)14084",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)14084": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12452": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "a31d56d567aaac727897c567a1a01f85dc46c24676d8a788929709b6fc4fef6f": {
      "address": "0xfC0Ac6E1395915396B31CD0dF83a0CDb81D0924D",
      "txHash": "0x11cbf18428adde8178bc07bc51e030e22e8c077f5de7437b1cfb804dd9900a93",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12529",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)14161",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)14161": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12529": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "01b3f51e1de93ef7cdeb306f002f86c0c9c9fad8eb0b12d1a314e5266ac625eb": {
      "address": "0xa619e9b50c2EDcED161D9AD58Bab9e39CeBa5E47",
      "txHash": "0xfee3efcad4e2226ba1d3b63364a0e1df343ac06ad15ef4f9adbb6bddeedb7655",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12527",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)14159",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)14159": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12527": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "2fe3b7cd443d574e4b69e0a98368a9b71b434c9e67b07f1caaeb55961637533f": {
      "address": "0x7fd4e84539BAa1210C13bb4AE1022e7B4AF56Fed",
      "txHash": "0x84a82cdbc90d9729426c08beaa063352e8b6c2f1fb7e32625607d03c8a7716ac",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12523",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)14155",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)14155": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12523": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "eea9e0841ca27976cc4383be9654443b65837195464246ebb39dd49860310db8": {
      "address": "0x3e6AC2A45147773E23feca6FA498111D16aDD33D",
      "txHash": "0x9e7ebe70170642683a03cbd1a4d3f0d8ff41b6da894d6320eedf8c5d00ac97b5",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12535",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)14167",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)14167": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12535": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "6a362ae42092d306360b77978c5adf3c06e1d0f256d17a1a7ed4d22c8786869a": {
      "address": "0xae7198C779937a23dCF962A396EaC6CBBa3fAD0A",
      "txHash": "0x609828e0d6299adca79201c8f63e71f2e1b16199d6666435088b20d9b2ba1a26",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12563",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)14195",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)14195": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12563": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "6e7a242d113e266991081c5d989f5ac8816570408f81f5a572092a8fdaebd2e0": {
      "address": "0x67F1fcB50836B26A2371729021aba00d5A8b960a",
      "txHash": "0xa63a777ba3c2f78cf357261c31ac72ca2d7c25087ff5c03efc7d106694b00101",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12751",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)14383",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155Land",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155Land.sol:26"
          },
          {
            "contract": "Meland1155Land",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155Land.sol:27"
          },
          {
            "contract": "Meland1155Land",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Land.sol:28"
          },
          {
            "contract": "Meland1155Land",
            "label": "ticketlandIds",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/Meland1155Land.sol:30"
          }
        ],
        "types": {
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)100_storage": {
            "label": "uint256[100]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)14383": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)12751": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "66a07714eeeb7b6944a92d313ae21ee1dc07e1b8bf8a81bf0e9770eff9c329a7": {
      "address": "0x22aBc0ac44A93E7bb0AD372059b8ba6eEaBe09eF",
      "txHash": "0x5e990ad2e53ef618e4c70c5546bb3a14cdd9b8cc9adb7bbc58aeff6849262f07",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12751",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)14383",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)14383": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12751": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "e428a2405a95db22458d5d221b564d2a82bf71a6f789f2013c40bc59eb20bc32": {
      "address": "0x0FaDDA07992836E1c1C8117a46a6a114B933104d",
      "txHash": "0x04fb7373d8a8ab2b2a5149491e4275267f07932d3192930787d3df06d1ebf761",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12753",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)14385",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155Land",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155Land.sol:26"
          },
          {
            "contract": "Meland1155Land",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155Land.sol:27"
          },
          {
            "contract": "Meland1155Land",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Land.sol:28"
          },
          {
            "contract": "Meland1155Land",
            "label": "ticketlandIds",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/Meland1155Land.sol:30"
          }
        ],
        "types": {
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)100_storage": {
            "label": "uint256[100]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)14385": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)12753": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "26b78eac801d2e38303230c1e09b7a46ec59e24d7a9c15da9b4d95307a65ae54": {
      "address": "0x969bc74043DDBA257d05AEa37186a631fEc55649",
      "txHash": "0x604305d4dac994f7cdd81ecb4435fd0f8afdb87000f30342f52ec4bfd9e11760",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12753",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)14385",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)14385": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12753": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "86114d10c325ac4bed97b1662134bbeac48f4bb59e3c19c25087a5a6025505e6": {
      "address": "0x72656c5CFe31f6E50BCf2f227d45dDb0F92F5f6b",
      "txHash": "0x733079c5a7ffc4999814be5209a748b8f20f10ce3e6eab5902e069a1b0c63677",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12622",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)14254",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155Land",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155Land.sol:26"
          },
          {
            "contract": "Meland1155Land",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155Land.sol:27"
          },
          {
            "contract": "Meland1155Land",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Land.sol:28"
          },
          {
            "contract": "Meland1155Land",
            "label": "ticketlandIds",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/Meland1155Land.sol:30"
          }
        ],
        "types": {
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)100_storage": {
            "label": "uint256[100]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)14254": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)12622": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "a8f8341ba25429a10b5a17d816ea5c4157d8bd3571b90e4651a1f7d897031f63": {
      "address": "0x916276fDf9A5982090147a412DCebf32822e4308",
      "txHash": "0x4104cada9edc1cf2d12a7da3a60e18da69e73f2e1961f88ebdefd7cb2726fb62",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12622",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)14254",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)14254": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12622": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "1b7e5a466f2e5f9f8f591adabe929c3bd525ae13894335d8dea30eeec58e0b88": {
      "address": "0x1B94A42Ae7CFbce854984f45B52bFf9C2a892923",
      "txHash": "0xf8486408ecf750dc425c7dc0cae839916391fafea5069bddc36ee621542d8e17",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12624",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)14256",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)14256": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12624": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "b47dac442ed223f0b819abbf769958000121d9bcb486cd0c15665096dca5708f": {
      "address": "0x5B12838b025F5A93d9e443f3ba0add97BA0c6CF9",
      "txHash": "0xe7df121170ad6f446b426b345c170f55896bc02115d2867a690187a6224d632e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12610",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)14242",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155Land",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155Land.sol:26"
          },
          {
            "contract": "Meland1155Land",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155Land.sol:27"
          },
          {
            "contract": "Meland1155Land",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Land.sol:28"
          },
          {
            "contract": "Meland1155Land",
            "label": "ticketlandIds",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/Meland1155Land.sol:30"
          }
        ],
        "types": {
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)100_storage": {
            "label": "uint256[100]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)14242": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)12610": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "f4400bceaf8a6571c8c899dd2d5f26bcc1d50cb76664f2f7dd885fe37abbd901": {
      "address": "0xb79FdaBDa4C23009e3e59ED21D5D0117faac0957",
      "txHash": "0x7a3954c858fc7133aae10a0c7ee032eda1f54ef06c5d8a9a25a1384700b5d40b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12610",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)14242",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)14242": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12610": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "0912e58a46be09eb81de62b3ed4b453c9e46afc097135da3099d741833c31b2b": {
      "address": "0xc5eCB03bA125067E7adb2cb44b21595E4F5911f5",
      "txHash": "0xb548d335e35ce8b6c33215cbbdfd8bc228de32b926991fa280d0adb7d2451915",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12799",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)14431",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155Land",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155Land.sol:26"
          },
          {
            "contract": "Meland1155Land",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155Land.sol:27"
          },
          {
            "contract": "Meland1155Land",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Land.sol:28"
          },
          {
            "contract": "Meland1155Land",
            "label": "ticketlandIds",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/Meland1155Land.sol:30"
          }
        ],
        "types": {
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)100_storage": {
            "label": "uint256[100]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)14431": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)12799": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "6c1ec6e734a4688b34da0772ec5dcb359b97300bf600436973e099c7fca54c88": {
      "address": "0xDE68FCb273f52ce45Fb5ce4B50E042960CA94C62",
      "txHash": "0xe13f360d2bb6de5a4201c03845c00c6d0dc8d15dea8acfd36f02c1254f6e79f8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12799",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)14431",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)14431": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)12799": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "ca50f17d975dbf1a8cca90cbe8c415ebd4a2d11075ff7cc69b73c7357a81d959": {
      "address": "0xF6A060088941D83fe91095D55efaC7342b3b68f1",
      "txHash": "0x19b61296bbe2630ac40225cadfb62cc93b3a93b5e4556eb59b91c57e43bacfec",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)13014",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)14646",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155Land",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155Land.sol:26"
          },
          {
            "contract": "Meland1155Land",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155Land.sol:27"
          },
          {
            "contract": "Meland1155Land",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Land.sol:28"
          },
          {
            "contract": "Meland1155Land",
            "label": "ticketlandIds",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/Meland1155Land.sol:30"
          }
        ],
        "types": {
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)100_storage": {
            "label": "uint256[100]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)14646": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)13014": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "ed5bcdf8a5f54160e50beba970bf1a2f98300e88dbd1e21b3059c2f463536348": {
      "address": "0x5F86068a8709cbc975025A3C474A187696512c3f",
      "txHash": "0xd687a760afc871b8d8e8f97978eadeceea7d28fd6e89ff39a4b6dc610d396ded",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)13014",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)14646",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)14646": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)13014": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "c1eb146ca416da23e24ebd8574960c89f2151c580f2e347afee13af8c23473d8": {
      "address": "0x769B90678d85DEe35B74360573B12e07DE4DB9AB",
      "txHash": "0x63ea847871026bc4649d4986ec699aa3a88fe4823eefe2c5b67842468ef356a2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)13014",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)14646",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155Land",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155Land.sol:26"
          },
          {
            "contract": "Meland1155Land",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155Land.sol:27"
          },
          {
            "contract": "Meland1155Land",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Land.sol:28"
          },
          {
            "contract": "Meland1155Land",
            "label": "ticketlandIds",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/Meland1155Land.sol:30"
          }
        ],
        "types": {
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)100_storage": {
            "label": "uint256[100]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)14646": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)13014": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "c2c0a0c93bf9ae01a8a7666081356838072123cd885ad9842b45cf8b92e9b1a1": {
      "address": "0x3f1D1d002C443d384E3180CDd3780B418fc8E2dF",
      "txHash": "0x3cec472a375282600dd503043ae65c7c7271232fc2f0f9def7b36ce1c0756329",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)13014",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)14646",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_bytes_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)14646": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_contract(MelandTier)13014": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "b3c92ebbac1e07b9f50daa969623561db0c210eb67830ee1699044af4c35be9b": {
      "address": "0x68Cbd22AfEA32b86df07d796FF0B3D5f6EAfeE45",
      "txHash": "0x18c71f9d198a9b6905ba30c0082502f06b4baab8015a7972a8695f280b51dd2e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "foundationWallet",
            "type": "t_address",
            "src": "../project:/contracts/NFTStoreStorage.sol:9"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "officialWallet",
            "type": "t_address",
            "src": "../project:/contracts/NFTStoreStorage.sol:12"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "bidbackWallet",
            "type": "t_address",
            "src": "../project:/contracts/NFTStoreStorage.sol:17"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "ownerCutPerMillion",
            "type": "t_uint256",
            "src": "../project:/contracts/NFTStoreStorage.sol:19"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "itemUploadedMap",
            "type": "t_mapping(t_contract(IMelandStoreItems)6537,t_bool)",
            "src": "../project:/contracts/NFTStoreStorage.sol:21"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "itemSymbolSales",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/NFTStoreStorage.sol:23"
          },
          {
            "contract": "NFTStore",
            "label": "itemIdCounters",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/NFTStore.sol:23"
          }
        ],
        "types": {
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_contract(IMelandStoreItems)6537,t_bool)": {
            "label": "mapping(contract IMelandStoreItems => bool)"
          },
          "t_contract(IMelandStoreItems)6537": {
            "label": "contract IMelandStoreItems"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "0bab99e966858aed4d9068c4a588a2c695ece434391fbbccf8a2f1f6417ce758": {
      "address": "0xcdBee99F315DcFc4DF446aA9AaAB0ab220FCB2cB",
      "txHash": "0x551b3284de10ca0e85b9368e0a670347a0267d24972e8872a7e32e403d0bb00a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12849",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)14481",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_string_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155Land",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155Land.sol:26"
          },
          {
            "contract": "Meland1155Land",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155Land.sol:27"
          },
          {
            "contract": "Meland1155Land",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Land.sol:28"
          },
          {
            "contract": "Meland1155Land",
            "label": "ticketlandIds",
            "type": "t_array(t_uint256)100_storage",
            "src": "../project:/contracts/Meland1155Land.sol:30"
          }
        ],
        "types": {
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)100_storage": {
            "label": "uint256[100]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)14481": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)12849": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "39dd411a886b82650a7f02394008fe4167345014c39e986e2aebd47ae95a4c49": {
      "address": "0xE509FB53C623F8Afa199991e116a245CA3D6ff59",
      "txHash": "0x5afdd73ae42b9e6e95a643daac6f9bb4852090da7baeeac30ea7be009d0f7ee1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3923_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)12849",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)14481",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3400",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_string_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)14481": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3400": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_contract(MelandTier)12849": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3923_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "426ba9e299fdeb043f5bf239f74138aa92c10d6be6c9ed9e2f969884f1a9ce46": {
      "address": "0xA342D235A18D21136a8Bb797C00eF7121Cc4F271",
      "txHash": "0xafe9e489f262bc95949a060f37db8624608eed93be4cb7a251f0bfe2a00a76ee",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ERC20BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "MELD",
            "label": "BP",
            "type": "t_contract(BPContract)6336",
            "src": "../project:/contracts/MELD.sol:21"
          },
          {
            "contract": "MELD",
            "label": "bpEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MELD.sol:22"
          },
          {
            "contract": "MELD",
            "label": "BPDisabledForever",
            "type": "t_bool",
            "src": "../project:/contracts/MELD.sol:23"
          },
          {
            "contract": "MELD",
            "label": "upgradeDelay",
            "type": "t_uint256",
            "src": "../project:/contracts/MELD.sol:25"
          },
          {
            "contract": "MELD",
            "label": "prepareUpgradeImpl",
            "type": "t_struct(PrepareUpgradeImpl)6606_storage",
            "src": "../project:/contracts/MELD.sol:27"
          }
        ],
        "types": {
          "t_contract(BPContract)6336": {
            "label": "contract BPContract"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(PrepareUpgradeImpl)6606_storage": {
            "label": "struct MELD.PrepareUpgradeImpl",
            "members": [
              {
                "label": "newImplementation",
                "type": "t_address"
              },
              {
                "label": "createdAt",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          }
        }
      }
    },
    "ef186050ee146e563420f238bf3ab4b7374a3fe7dffb06c464ec63e3965b65be": {
      "address": "0xf32Ea28057f6B423FaE717e0b5866e6a8008f33c",
      "txHash": "0x1412dd2a9fa249be7a0eeae12a0b6397b19c44e4f55877f3b21c33d6dbcf4937",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "foundationWallet",
            "type": "t_address",
            "src": "../project:/contracts/NFTStoreStorage.sol:9"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "officialWallet",
            "type": "t_address",
            "src": "../project:/contracts/NFTStoreStorage.sol:12"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "bidbackWallet",
            "type": "t_address",
            "src": "../project:/contracts/NFTStoreStorage.sol:17"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "ownerCutPerMillion",
            "type": "t_uint256",
            "src": "../project:/contracts/NFTStoreStorage.sol:19"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "itemUploadedMap",
            "type": "t_mapping(t_contract(IMelandStoreItems)6567,t_bool)",
            "src": "../project:/contracts/NFTStoreStorage.sol:21"
          },
          {
            "contract": "NFTStoreStorage",
            "label": "itemSymbolSales",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/NFTStoreStorage.sol:23"
          },
          {
            "contract": "NFTStore",
            "label": "itemIdCounters",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/NFTStore.sol:23"
          }
        ],
        "types": {
          "t_struct(Counter)3951_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_contract(IMelandStoreItems)6567,t_bool)": {
            "label": "mapping(contract IMelandStoreItems => bool)"
          },
          "t_contract(IMelandStoreItems)6567": {
            "label": "contract IMelandStoreItems"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "da6d61d76643fb2924b5446300f94988e9da2d3cffc4aa4ec2d3bd7c42308cab": {
      "address": "0x910ddEdFA3c002922919a3BA57f521dc1282a15D",
      "txHash": "0x5f1a5d71bf023361c0247e0d5de798d5fdbd9ef4efc5813256af4efa0df9d193",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "MarketplaceStorage",
            "label": "acceptedToken",
            "type": "t_contract(IERC20MELD)6495",
            "src": "../project:/contracts/MarketplaceStorage.sol:10"
          },
          {
            "contract": "MarketplaceStorage",
            "label": "foundationWallet",
            "type": "t_address",
            "src": "../project:/contracts/MarketplaceStorage.sol:13"
          },
          {
            "contract": "MarketplaceStorage",
            "label": "officialWallet",
            "type": "t_address",
            "src": "../project:/contracts/MarketplaceStorage.sol:16"
          },
          {
            "contract": "MarketplaceStorage",
            "label": "orderByAssetId",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Order)7834_storage))",
            "src": "../project:/contracts/MarketplaceStorage.sol:44"
          },
          {
            "contract": "MarketplaceStorage",
            "label": "ownerCutPerMillion",
            "type": "t_uint256",
            "src": "../project:/contracts/MarketplaceStorage.sol:47"
          },
          {
            "contract": "MarketplaceStorage",
            "label": "publicationFeeInWei",
            "type": "t_uint256",
            "src": "../project:/contracts/MarketplaceStorage.sol:50"
          }
        ],
        "types": {
          "t_contract(IERC20MELD)6495": {
            "label": "contract IERC20MELD"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Order)7834_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MarketplaceStorage.Order))"
          },
          "t_mapping(t_uint256,t_struct(Order)7834_storage)": {
            "label": "mapping(uint256 => struct MarketplaceStorage.Order)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Order)7834_storage": {
            "label": "struct MarketplaceStorage.Order",
            "members": [
              {
                "label": "id",
                "type": "t_bytes32"
              },
              {
                "label": "seller",
                "type": "t_address"
              },
              {
                "label": "assetId",
                "type": "t_uint256"
              },
              {
                "label": "nft",
                "type": "t_struct(ERC721Or1155)7820_storage"
              },
              {
                "label": "price",
                "type": "t_uint256"
              },
              {
                "label": "expiresAt",
                "type": "t_uint256"
              }
            ]
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(ERC721Or1155)7820_storage": {
            "label": "struct MarketplaceStorage.ERC721Or1155",
            "members": [
              {
                "label": "erc1155",
                "type": "t_contract(IERC1155)4774"
              },
              {
                "label": "erc721",
                "type": "t_contract(IERC721)5721"
              }
            ]
          },
          "t_contract(IERC1155)4774": {
            "label": "contract IERC1155"
          },
          "t_contract(IERC721)5721": {
            "label": "contract IERC721"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "5221f8747fb3c7c1d6aefed9987f18100fc3b5b60cfd3160f52d741311b54ab7": {
      "address": "0x593DAB2ab9350a0D34f8C809015A8211122C9d2A",
      "txHash": "0xaf4cb951a6da246cbb3b9a0e3a31bfb56a37371d55e5516b69a0f792fe7f3e62",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)13809",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)15475",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3428",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_string_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155Land",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155Land.sol:26"
          },
          {
            "contract": "Meland1155Land",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155Land.sol:27"
          },
          {
            "contract": "Meland1155Land",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Land.sol:28"
          },
          {
            "contract": "Meland1155Land",
            "label": "ticketlandIds",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155Land.sol:30"
          }
        ],
        "types": {
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)15475": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3428": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)13809": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "885e803c0f1386bce393ed8adfefbdd183c01933138b62ba8f2e41aada3aea45": {
      "address": "0xeB0efE19Ab437044887f44F1300CA860cFd63e22",
      "txHash": "0x48fe0f6077a245e74affd0bd64dbd5589b79a075466b6c80be0f78991d60267a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)13809",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeEnabled",
            "type": "t_bool",
            "src": "../project:/contracts/MelandNFTFreeze.sol:18"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/MelandNFTFreeze.sol:20"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "freezeWhiteList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:22"
          },
          {
            "contract": "MelandNFTFreeze",
            "label": "ereezeExpiredAtMapById",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/MelandNFTFreeze.sol:24"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)15475",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3428",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_string_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Meland1155LandFuture",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/Meland1155LandFuture.sol:27"
          },
          {
            "contract": "Meland1155LandFuture",
            "label": "supportLandtypes",
            "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
            "src": "../project:/contracts/Meland1155LandFuture.sol:32"
          },
          {
            "contract": "Meland1155LandFuture",
            "label": "landtypeById",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/Meland1155LandFuture.sol:33"
          },
          {
            "contract": "Meland1155LandFuture",
            "label": "totalSupplyByLandtype",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155LandFuture.sol:34"
          },
          {
            "contract": "Meland1155LandFuture",
            "label": "canBuyListByAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/Meland1155LandFuture.sol:35"
          }
        ],
        "types": {
          "t_struct(Counter)3951_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_bytes_memory_ptr,t_bool)": {
            "label": "mapping(bytes => bool)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_contract(NFTStore)15475": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3428": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(MelandTier)13809": {
            "label": "contract MelandTier"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "2d3b82802a314dca81c51c3a3aca89acc05344681041141010322d62c9c76704": {
      "address": "0x6171971f1529D03B2cA891d9363577ad96fB153c",
      "txHash": "0xfddc371d076b9de62be90f0287ce670d9c976a035b222252e9c397cdef240559",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "MelandTierAddressStore",
            "label": "_melandTier",
            "type": "t_contract(MelandTier)13809",
            "src": "../project:/contracts/MelandTierAddressStore.sol:18"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "mintMaxByRaritykeccak256",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/Meland1155Rarity.sol:21"
          },
          {
            "contract": "Meland1155Rarity",
            "label": "_rarityByCId",
            "type": "t_mapping(t_uint256,t_bytes_storage)",
            "src": "../project:/contracts/Meland1155Rarity.sol:23"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_store",
            "type": "t_contract(NFTStore)15475",
            "src": "../project:/contracts/Meland1155StoreItem.sol:19"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_acceptedToken",
            "type": "t_contract(IERC20Upgradeable)3428",
            "src": "../project:/contracts/Meland1155StoreItem.sol:20"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_storeSymbols",
            "type": "t_array(t_string_storage)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:22"
          },
          {
            "contract": "Meland1155StoreItem",
            "label": "_prices",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/Meland1155StoreItem.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTStore)15475": {
            "label": "contract NFTStore"
          },
          "t_contract(IERC20Upgradeable)3428": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "label": "mapping(uint256 => bytes)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_contract(MelandTier)13809": {
            "label": "contract MelandTier"
          },
          "t_struct(Counter)3951_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "e1723236c91457599f8bdbbbcd86e3fbed8da7eceed8ace2951719e6376c1dca": {
      "address": "0x30BD2644974B6EEE94dA5b46421303Fed7F58660",
      "txHash": "0xb9c52a48717fedeec97e8c397e71f05814c621a5efe1be797b08366dfbfd4aff",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_rewardIdCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:14"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc1155RewardIdCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:15"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc721RewardIdCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:16"
          },
          {
            "contract": "MelandTierStorage",
            "label": "_erc20RewardIdCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/MelandTierStorage.sol:17"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc721RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC721Reward)13930_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:41"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc20RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC20Reward)13936_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:42"
          },
          {
            "contract": "MelandTierStorage",
            "label": "erc1155RewardById",
            "type": "t_mapping(t_uint256,t_struct(ERC1155Reward)13924_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:43"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardById",
            "type": "t_mapping(t_uint256,t_struct(Reward)13914_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:44"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:48"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolFor100PercentByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:52"
          },
          {
            "contract": "MelandTierStorage",
            "label": "currentNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:56"
          },
          {
            "contract": "MelandTierStorage",
            "label": "saleNFTPoolForOptionByCId",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/MelandTierStorage.sol:60"
          },
          {
            "contract": "MelandTierStorage",
            "label": "rewardTransferedByRewardId",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../project:/contracts/MelandTierStorage.sol:63"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "Meland1155CID",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3951_storage",
            "src": "../project:/contracts/Meland1155CID.sol:17"
          },
          {
            "contract": "Meland1155CID",
            "label": "cidByTokenId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:19"
          },
          {
            "contract": "Meland1155CID",
            "label": "_totalSupplyByCid",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Meland1155CID.sol:21"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:40"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)3951_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_uint256,t_struct(ERC721Reward)13930_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC721Reward)"
          },
          "t_struct(ERC721Reward)13930_storage": {
            "label": "struct MelandTierStorage.ERC721Reward",
            "members": [
              {
                "label": "erc721",
                "type": "t_contract(IERC721Upgradeable)3656"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC721Upgradeable)3656": {
            "label": "contract IERC721Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC20Reward)13936_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC20Reward)"
          },
          "t_struct(ERC20Reward)13936_storage": {
            "label": "struct MelandTierStorage.ERC20Reward",
            "members": [
              {
                "label": "erc20",
                "type": "t_contract(IERC20Upgradeable)3428"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)3428": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(ERC1155Reward)13924_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.ERC1155Reward)"
          },
          "t_struct(ERC1155Reward)13924_storage": {
            "label": "struct MelandTierStorage.ERC1155Reward",
            "members": [
              {
                "label": "erc1155",
                "type": "t_contract(IERC1155Upgradeable)2527"
              },
              {
                "label": "tokenIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "amounts",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_contract(IERC1155Upgradeable)2527": {
            "label": "contract IERC1155Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(Reward)13914_storage)": {
            "label": "mapping(uint256 => struct MelandTierStorage.Reward)"
          },
          "t_struct(Reward)13914_storage": {
            "label": "struct MelandTierStorage.Reward",
            "members": [
              {
                "label": "erc1155RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc721RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "erc20RewardIds",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "c944e6f1c5888edc6f881ed8e0326f24e128731c98a07d71e0ed8ae07acbc0fd": {
      "address": "0xd987c27CD87876332357E287f66EFE22f803bb45",
      "txHash": "0x94d0325fceae935a2853e5a4b9f5d4f6e935c5258fea3a5d314a102c1fd8844d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "NFTFactory",
            "label": "supportNFTs",
            "type": "t_mapping(t_address,t_struct(SupportNFT)14657_storage)",
            "src": "../project:/contracts/NFTFactory.sol:26"
          },
          {
            "contract": "NFTFactory",
            "label": "supportRFCs",
            "type": "t_mapping(t_address,t_struct(RFC)14706_storage)",
            "src": "../project:/contracts/NFTFactory.sol:28"
          }
        ],
        "types": {
          "t_mapping(t_address,t_struct(SupportNFT)14657_storage)": {
            "label": "mapping(address => struct NFTFactory.SupportNFT)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(SupportNFT)14657_storage": {
            "label": "struct NFTFactory.SupportNFT",
            "members": [
              {
                "label": "erc721or1155",
                "type": "t_struct(ERC721Or1155)14651_storage"
              },
              {
                "label": "support",
                "type": "t_bool"
              }
            ]
          },
          "t_struct(ERC721Or1155)14651_storage": {
            "label": "struct NFTFactory.ERC721Or1155",
            "members": [
              {
                "label": "erc1155",
                "type": "t_contract(IERC1155)4774"
              },
              {
                "label": "erc721",
                "type": "t_contract(IERC721)5721"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IERC1155)4774": {
            "label": "contract IERC1155"
          },
          "t_contract(IERC721)5721": {
            "label": "contract IERC721"
          },
          "t_mapping(t_address,t_struct(RFC)14706_storage)": {
            "label": "mapping(address => struct NFTFactory.RFC)"
          },
          "t_struct(RFC)14706_storage": {
            "label": "struct NFTFactory.RFC",
            "members": [
              {
                "label": "proposer",
                "type": "t_address"
              },
              {
                "label": "proposalTime",
                "type": "t_uint256"
              },
              {
                "label": "approved",
                "type": "t_bool"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    }
  }
}
