/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import { UnsignedTransaction } from "ethers/utils/transaction";
import { TypedEventDescription, TypedFunctionDescription } from ".";

interface PausableUpgradeableInterface extends Interface {
  functions: {
    paused: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {
    Paused: TypedEventDescription<{
      encodeTopics([account]: [null]): string[];
    }>;

    Unpaused: TypedEventDescription<{
      encodeTopics([account]: [null]): string[];
    }>;
  };
}

export class PausableUpgradeable extends Contract {
  connect(signerOrProvider: Signer | Provider | string): PausableUpgradeable;
  attach(addressOrName: string): PausableUpgradeable;
  deployed(): Promise<PausableUpgradeable>;

  on(event: EventFilter | string, listener: Listener): PausableUpgradeable;
  once(event: EventFilter | string, listener: Listener): PausableUpgradeable;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): PausableUpgradeable;
  removeAllListeners(eventName: EventFilter | string): PausableUpgradeable;
  removeListener(eventName: any, listener: Listener): PausableUpgradeable;

  interface: PausableUpgradeableInterface;

  functions: {
    /**
     * Returns true if the contract is paused, and false otherwise.
     */
    paused(overrides?: UnsignedTransaction): Promise<boolean>;

    /**
     * Returns true if the contract is paused, and false otherwise.
     */
    "paused()"(overrides?: UnsignedTransaction): Promise<boolean>;
  };

  /**
   * Returns true if the contract is paused, and false otherwise.
   */
  paused(overrides?: UnsignedTransaction): Promise<boolean>;

  /**
   * Returns true if the contract is paused, and false otherwise.
   */
  "paused()"(overrides?: UnsignedTransaction): Promise<boolean>;

  filters: {
    Paused(account: null): EventFilter;

    Unpaused(account: null): EventFilter;
  };

  estimate: {
    /**
     * Returns true if the contract is paused, and false otherwise.
     */
    paused(overrides?: UnsignedTransaction): Promise<BigNumber>;

    /**
     * Returns true if the contract is paused, and false otherwise.
     */
    "paused()"(overrides?: UnsignedTransaction): Promise<BigNumber>;
  };
}
